<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web 前端工程化（三） —— 使用 Jenkins + Github 搭建持续集成环境</title>
      <link href="/set-up-ci-env-with-jenkins-and-github/"/>
      <url>/set-up-ci-env-with-jenkins-and-github/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> Jenkins </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 前端工程化（二） —— CI/CD</title>
      <link href="/what-is-ci-cd/"/>
      <url>/what-is-ci-cd/</url>
      
        <content type="html"><![CDATA[<p>工厂里的装配线以快速、自动化、可重复的方式从原材料生产出消费品。在软件开发领域，我们也同样会思考同样的问题：<strong>以快速、自动化和可重复的方式从源代码生成发布版本。</strong> </p><p><code>CI/CD</code> 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。<code>CI/CD</code> 的核心概念是持续集成、持续交付和持续部署。</p><p>缩略词 <code>CI/CD</code> 具有几个不同的含义。<code>CI/CD</code> 中的 <code>CI</code> 指持续集成（<code>Continuous Integration</code>），<code>CI/CD</code> 中的 <code>CD</code> 指的是持续交付（<code>Continuous Delivery</code>）或持续部署（<code>Continuous Deployment</code>）。</p><a id="more"></a><h3 id="一、持续集成"><a href="#一、持续集成" class="headerlink" title="一、持续集成"></a>一、持续集成</h3><p><strong>持续集成（<code>CI</code>）是在源代码变更后，自动检测、拉取、构建和进行单元测试的过程。持续集成是启动管道的环节。</strong>这里的<strong>持续</strong>指的并不是 <strong>“一直在运行”</strong>，而是 <strong>“随时可运行”</strong> 的意思。</p><p>有了持续集成，软件在每次修改之后都会被证明是可工作的（假如有足够全面的自动化测试集合的话），即使它被坏了，我们也能很快知道，并且修复，避免了应用程序在相当长的一段时间处于内不可用的状态。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/Contiunous-Integration.png" alt="Contiunous-Integration"></p><h4 id="持续集成的优势"><a href="#持续集成的优势" class="headerlink" title="持续集成的优势"></a>持续集成的优势</h4><ul><li><p>提高开发人员的工作效率</p><p>持续集成可将开发人员从手动任务中解放出来，并且鼓励有助于减少发布到客户环境中的错误和缺陷数量的行为，从而提高团队的工作效率。</p></li><li><p>更快发现并解决缺陷</p><p>通过更频繁的测试，团队可以在缺陷稍后变成大问题前发现并解决这些缺陷。</p></li><li><p>更快交付更新</p><p>持续集成有助于团队更快、更频繁地向客户交付更新。</p></li></ul><p>下面我们着重看下持续集成的内容，有些偏理论，但是很有用。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li><p>版本控制</p><p>在《持续交付》这本书中，对于持续集成中的版本控制，书中指出的好实践是：<strong>与项目相关的所有内容都必须提交到一个版本控制库中，包括产品代码、测试代码、数据库脚本、构建与部署脚本，以及所有用于创建、安装、运行和测试该应用程序的所有东西。</strong>把所有相关的东西放在一个版本控制库里面，有利于我们严格控制每次代码的变更都必须确保相关的代码检查和测试等工作都通过。</p><p>但是，在我的项目实践当中发现，如果项目比较复杂，测试集合（单元测试、集成测试、UI测试、<code>API</code> 功能和性能测试等）会非常多，再加上一些其他的中间件服务（如使用 <code>NodeJS</code> 和 <code>Python</code> 写的用作系统间通讯的中间件），如果都放在一个版本控制库里面，代码库就会变得异常庞大，并且每次的代码提交如果触发所有类型的测试，那么一次持续集成过程需要的时间也会非常长（我所在的项目常常需要 <code>30min</code>）。</p><p>如果你的项目是一个遗留系统，那么在改造整个遗留系统的过程中，也会因为某些依赖的环境或者 <code>Module</code> 的版本过于老旧且无法升级而造成开发阻碍。比如：遗留系统中依赖的 <code>NodeJS</code> 版本还是 <code>6.x</code>，并且无法快速升级，<code>AWS</code> 的 <code>Lambda</code> 服务已经放弃支持 <code>NodeJS 6.x</code> 的版本了，最终也只好新起一个版本仓库。</p><p>所以，关于版本控制这一点，我觉得应该也需要看实际的应用场景，对非中大型、不那么复杂的项目而言，把和程序相关的东西放在一个版本控制库里，还是很有必要的。</p></li><li><p>自动化构建</p><p>持续集成的构建过程需要实现自动化。并且，需要满足的条件是：<strong>人和计算机都能通过命令行自动执行应用的构建、测试以及部署过程。</strong>构建脚本应该被与代码库一样同等对待，也需要保持测试、重构。</p></li><li><p>团队共识</p><p>持续集成不是一种工具，而是一种实践。它需要团队开发人员遵守一些准则，达成共识。需要每个人一致认同 “<strong>修复破坏应用程序的任意修改是最高优先级的任务</strong>” 。只有大家都接受这样的准则，才能按照预期通过持续集成提高质量。</p><blockquote><p>PS：如我们团队遵循的一个准则：<strong><code>Pipline</code> 变红不能过夜</strong>，过夜就要请大家喝奶茶。</p></blockquote></li></ol><h4 id="持续集成包含的任务"><a href="#持续集成包含的任务" class="headerlink" title="持续集成包含的任务"></a>持续集成包含的任务</h4><p>持续集成一般执行的任务有：</p><ol><li>代码静态扫描：通过静态扫描确定代码的一些潜在 <code>bug</code>，如未被使用的变量等。</li><li>代码样式检查：团队一致定义出需要遵循的编码规范，并通过一些插件对迁入的代码进行样式合规性检查，防止不守规范的代码进入版本库。比如方法名首字母小写、类的大字母大写、<code>if</code> 关键字后面需要加空格等问题都可以纳入到样式检查中。</li><li>测试：通过运行自动化的单元测试、集成测试、系统测试可以有效的保证迁入代码的质量。一旦有测试失败，开发人员就需要快速反应进行修复。</li><li>测试覆盖率检查：一般项目会设置一个测试覆盖率指标，如果代码达不到这样的测试覆盖率，就不会允许代码迁入。这样可以保证开发人员在新增功能时也要为新加入的功能编写自动化测试。</li><li>编译打包：确保没有任何语法错误，生成构建产出物。</li><li>发布</li></ol><p>这些任务都必须是能通过命令行自动完成的，不同类型的项目任务略有不同。</p><h4 id="持续集成的原则"><a href="#持续集成的原则" class="headerlink" title="持续集成的原则"></a>持续集成的原则</h4><ol><li>经常提交代码</li><li>不要提交无法构建的代码</li><li>构建失败之后不要提交新代码</li><li>编写自动化测试</li><li>等提交测试通过后再继续工作</li><li>回家之前，构建必须处于成功状态</li><li>时刻准备回滚到前一个版本</li><li>在回滚之前要规定一个修复时间</li><li>不要将失败的测试注释掉</li><li>测试驱动开发</li></ol><h4 id="持续集成的工具"><a href="#持续集成的工具" class="headerlink" title="持续集成的工具"></a>持续集成的工具</h4><p>市场上有很多产品可以提供针对自动化构建和测试过程的基础设施。本质上，持续集成的软件包括两个部分：</p><ul><li><p>一个一直运行的进程，轮询版本控制系统，查看是否有新的版本提交。</p><blockquote><p>当然，你也可以做一些限制，不让持续集成软件自动运行构建脚本和测试，如过滤 <code>master</code> 分支之外的其他分支。</p></blockquote></li><li><p>提供展现这个流程运行结果的视图，通知构建的成功与否，让你可以找到测试报告，通过 <code>log</code> 查看构建过程和构建失败的原因。</p></li></ul><p>常用的构建工具有：</p><ul><li><a href="http://jenkins-ci.org/" target="_blank" rel="noopener">Jenkins</a></li><li><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis</a></li><li><a href="https://circleci.com/" target="_blank" rel="noopener">CircleCI</a></li><li><a href="https://www.gocd.org/" target="_blank" rel="noopener">GoCD</a></li><li><a href="https://about.gitlab.com/product/continuous-integration/" target="_blank" rel="noopener">Gitlab CI</a></li></ul><p>后面我会写一篇专门介绍如何使用 <code>Github + Jenkins</code> 、<code>Github + CircleCI</code> 来搭建 <code>CI</code> 环境。</p><h3 id="二、持续交付"><a href="#二、持续交付" class="headerlink" title="二、持续交付"></a>二、持续交付</h3><p>持续交付（<code>Continuous Delivery</code>）是一种软件工程的方法论。持续交付指的是频繁地将软件的新版本，交付给质量团队或者用户（或者是 <code>Product Owner</code>）。这种方式可以减少软件开发的成本与时间，减少风险。</p><h4 id="类生产环境"><a href="#类生产环境" class="headerlink" title="类生产环境"></a>类生产环境</h4><p>在持续集成的基础上，我们将集成后的代码部署到更贴近真实运行环境的 <strong>“类生产环境”</strong> 中。通常至少需要两个类生产环境：<code>Staffing</code> 环境（预发布环境）和 <code>Production</code> 环境。</p><p>我所在的项目中，创建了三个 “类生产环境”：</p><ul><li><p><code>DEV</code> 环境：用作开发自己线上测试，可以随意部署任意分支代码。</p></li><li><p><code>Staging</code> 环境：和 <code>Production</code> 环境的配置基本保持一致，用于部署比较稳定的代码版本，有时候用于测试应用程序的某一功能是否稳定。同时，<code>Staging</code> 环境也会和其他上下游的系统做集成测试，其他上下游系统的 <code>Staging</code> 环境的数据和功能也依赖于我们的 <code>Staging</code> 环境。所以，需要保证我们的 <code>Staging</code> 环境的应用程序也总是正常工作的。</p></li><li><p><code>Production</code> 环境</p><p>生产（产品）环境，直接面向于用户。应用程序在 <code>Staging</code> 环境中运行正常，没有 <code>bug</code>，可以手动部署到生产环境中。</p></li></ul><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/Continuous-Delivery.png" alt="Continuous-Delivery"></p><h3 id="三、持续部署"><a href="#三、持续部署" class="headerlink" title="三、持续部署"></a>三、持续部署</h3><p>持续部署（<code>Continuous Deployment</code>）是持续交付的下一步，是指能够自动提供持续交付管道中的应用程序版本给最终用户使用。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/Continuous-Deploy.png" alt="Continuous-Deploy"></p><h4 id="和持续交付的关系"><a href="#和持续交付的关系" class="headerlink" title="和持续交付的关系"></a>和持续交付的关系</h4><p>有时候，持续交付也与持续部署混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。</p><p>在完全部署应用程序到终端用户面前之前，有什么</p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> 持续交付 </tag>
            
            <tag> 持续部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 前端工程化（一） —— 什么是前后端分离？</title>
      <link href="/what-is-frontend-backend-separation/"/>
      <url>/what-is-frontend-backend-separation/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是-Web-开发？"><a href="#一、什么是-Web-开发？" class="headerlink" title="一、什么是 Web 开发？"></a>一、什么是 Web 开发？</h3><p>如果在一个比较高的抽象层面来看待这个问题的话，<strong><code>Web</code> 开发就是在处理客户端请求及服务端响应这两件事</strong>。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/web-development.jpg" alt="Web 开发"></p><p>当然，这是抽象。在实际的 <code>Web</code> 开发中，我们会有很多东西需要关注。</p><a id="more"></a><h3 id="二、传统开发模式"><a href="#二、传统开发模式" class="headerlink" title="二、传统开发模式"></a>二、传统开发模式</h3><p>相信很多做过 <code>Web</code> 开发的朋友都经历过这样一种开发模式：利用后端语言提供的模板引擎来编写 <code>HTML/XML</code> 页面。例如：</p><ul><li><code>Java web</code> 工程有 <code>jsp</code> 页面</li><li><code>Ruby</code> 项目中有 <code>erb</code> 页面</li><li>与 <code>NodeJS</code> 框架 <code>Express</code> 结合使用的 <code>ejs</code>、<code>jade</code> 等</li><li>…</li></ul><p>后端主要做的事情是从数据库中拉取数据，在 <code>Server</code> 端生成 <code>html</code> 模板，然后将生成的模板发送到客户端。客户端收到模板后，在客户端注入 <code>js</code> 和 <code>css</code>，生成 <code>dom</code> 树，然后渲染成页面呈现给用户。如下图示：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/traditional-web-development.jpg" alt="Web 传统开发模式"></p><p>这种开发模式被称为<strong>传统开发模式</strong>或者<strong>前后端混合开发模式</strong>，现在也有一些企业的 <code>Web</code> 应用依然在使用这种开发模式。</p><p>这种开发模式的特点是：页面的模板由后端生成，甚至生成的模板会带有样式和交互，前端仅仅是将模板丢给浏览器渲染成 <code>dom</code> 树生成页面而已。当然，有时候，前端也会注入一些  <code>JavaScript</code> 代码为页面的动态交互提供支持。</p><p>在这种开发模式下工作，你就会发现，同一个开发者需要扮演好几种不同的角色，不仅需要写 <code>server</code> 端的代码，同时也需要写一些模板代码，甚至还需要会写一些 <code>JavaScript</code> 和 <code>CSS</code> 代码，开发者需要在不同角色间切换。往往大多数专注于 <code>server</code> 端的开发者都不怎么喜欢（或者不怎么擅长）写这些模板、交互和样式代码。</p><p>在这种背景下，又出现了一种所谓<strong>套页面</strong>的开发模式：<strong>让专职的前端开发者切好静态页面，然后丢给后端开发者去仿照着静态页面写出模板，将需要动态变化的地方换成后端模板语法。</strong> 这时候的前端开发者也就是传说中的 “切图仔”（我在大三实习的时候经历过这种开发模式）。这种模式已经被证明是低效的，而且并没有合理的应用开发资源，开发效率很低。</p><p>在项目的开发、团队协作过程中，我们是要讲究效率的。那如何能够提高效果呢？让专业的人做专业的事、合适的事，分工协作。</p><p>所以，为了解决传统开发模式中的痛点，就衍生出了一种新的思路：<strong>让前后端的开发分离开来，独立开发，甚至可以做到独立部署。不同的角色只做好自己负责的事情，然后遵循某一种协作约定，分工协作，以达到高效产出。</strong></p><p>这就是前后端分离开发模式。</p><h3 id="三、前后端分离开发模式"><a href="#三、前后端分离开发模式" class="headerlink" title="三、前后端分离开发模式"></a>三、前后端分离开发模式</h3><p>前后端分离的开发模式图示如下：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/frontend-backend-development.jpg" alt="前后端分离开发模式"></p><p><strong>在前后端分离的开发模式下，<code>Server</code> 端从数据库拿到元数据后，经过处理直接吐出数据（而不是页面模板），<code>Client</code> 端拿到数据后，在客户端进行模板渲染生成页面，最终呈现给用户。</strong></p><p>前后端分离之后，前端有了自己的服务器，不再需要依靠后端服务器来支持项目运行。如果在开发阶段，还可以使用 <code>mock</code> 数据（要先和后端开发者确定接口数据和结构），摆脱对后端接口的依赖，这样极大的提高了开发效率，系统分工也更加明确。</p><p>同时，此时服务端也不再处理模板，专注于数据与服务，职责也变得更加单一，专注度和效率也得到了大大的提升。</p><p>显而易见的是，前后端分离之后，前端开发需要做更多的事了。随着业务的增加和不断的变化，代码也会变得越来越复杂，代码量越来越多，这样就会催生出各种各样的前端框架，使得前端生态圈呈现大爆炸式的发展。</p><p>并且，随着移动互联网的快速发展，<strong>大前端</strong>也诞生出来了。简单来说，大前端就是所有前端的统称，比如<code>Android</code>、<code>iOS</code>、<code>Web</code>、<code>Watch</code> 等，然后将其最接近用户的那一层（ <code>UI</code> 层）统一起来，就是大前端。    </p><p>由于 <code>NodeJS</code> 平台的崛起，前端开发可能已经不仅仅限于浏览器端的开发工作，借助 <code>NodeJS</code> 平台，以及<a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a>、<a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a>等框架，前端开发者也可以涉足服务端开发，这就要求我们具备一些后端开发思维。</p><h3 id="四、前后端分离需要考虑的事"><a href="#四、前后端分离需要考虑的事" class="headerlink" title="四、前后端分离需要考虑的事"></a>四、前后端分离需要考虑的事</h3><p>要实现前后端分离的，需要考虑很多事情。</p><h4 id="1、架构上分离解耦"><a href="#1、架构上分离解耦" class="headerlink" title="1、架构上分离解耦"></a>1、架构上分离解耦</h4><p>一般，我们会把前端应用部署在 <code>NodeJS</code>、<code>Nginx</code> 或者 <code>NodeJS</code> 和 <code>Nginx</code> 组合的服务器上，通过反向代理转发页面请求到后端服务器，相当于在传统的流程中加了 <code>NodeJS</code> 这一层。当然，也可以用 <code>NodeJS</code> 服务器来承担一部分负载均衡的工作，部分业务逻辑也可以放在 <code>NodeJS</code> 这一层来处理，例如：通过判断请求是来自 <code>PC</code> 端还是移动端的 <code>APP</code> ，将请求发到不同的后端服务器。</p><p>这里贴上淘宝前端团队提出的中途岛 （<code>Midway Framework</code>）架构图：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/taobao-midway-framework.png" alt="Midway Framework"></p><p>不同的需求，架构也需要做不同程度的相应的调整。</p><h4 id="2、接口设计规范"><a href="#2、接口设计规范" class="headerlink" title="2、接口设计规范"></a>2、接口设计规范</h4><p>不管是瀑布模式的前后端分离，还是敏捷模式下的前后端分离，都需要从业务逻辑出发，从业务的角度来说，<code>Web</code>  应用的前后端是一个整体，它们无法独立运行。于是，我们的开发模式（也可以说是交互形式）就变成了下面这样：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/fe-be-alternate.jpg" alt="前后端交互"></p><p>图中的 <code>API</code> 文档，可以是一个模拟后端接口的 <code>JSON API</code>，也可以是文档编写的 <code>API</code> 。在这个过程中，前后端需要根据业务逻辑需要展示的内容，一起细致化接口的每个字段名，直至接口确认完毕，当各种开发完成时，需要在测试环境进行集成。如果遇到 <code>API</code> 变更，我们需要重复这个过程。</p><p><code>API</code> 的设计、规范、安全、管理等，也都是我们需要认真考虑的问题（这部分内容会比较多，我打算后面单独写一篇来总结）。</p><h4 id="3、代码组织方式"><a href="#3、代码组织方式" class="headerlink" title="3、代码组织方式"></a>3、代码组织方式</h4><p>在传统架构模式中，前后端代码存放于同一个代码库中，甚至是同一工程目录下，页面中还夹杂着后端代码。前后端工程师进行开发时，都必须把整个项目导入到开发工具中。 </p><p>而前后端分离模式在代码组织形式上，有以下两种:</p><ul><li><p><strong>半分离</strong> </p><p>前后端共用一个代码库，但是代码分别存放在两个工程目录中。后端基本上不关心前端的东西。前端不需要知道后端的技术架构，后端也不需要知道前端的技术架构，前后端都有充分的自由采用各种技术来进行系统的性能优化。</p><p>但是这种形式有一个缺点，前后端不能独立部署。</p></li><li><p><strong>分离</strong>  </p><p>前后端代码库分离，前后端并行可发。在后端未准备好的情况下，可以使用 <code>Mock Server</code> （用于仿造后端接口的模拟 <code>HTTP</code> 服务器），为前端提供一个可用的 <code>API</code> 服务，支持前端的独立开发和测试。前后端可以独立部署。</p><p>那么是由前端还是后端来维护 <code>Mock Server</code> 呢？相对于前端开发人员来维护 <code>Mock Server</code>，由后端开发人员维护则会更加方便。因为后端是接口的提供方，他们是经验丰富的 <code>API</code> 编写者。当然，这中间也会有很多前后端的沟通工作，在维护 <code>Mock Server</code> 时，往往前后端开发者都有参与。</p></li></ul><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><p>前后端分离之后，前端需要承担更多的工作了。代码量和复杂度都会上升，为了保证代码质量，我们需要增加更多的前端测试，搭建好测试服务。对于后端，测试也同样必不可少。</p><p>并且，我们可以为前后端增加契约测试。业务修改会带来一定量的 <code>API</code> 修改，一旦 <code>API</code> 修改了，就需要通知使用方（前端或者上下游第三方系统）。那么，<strong>最好的通知方式是什么呢？答案是持续集成失败。</strong> 持续集成一失败，它会以直接的状态（红色）告知你当前的构建是有问题的。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>前后端分离的好处很多，需要考虑的东西也还有很多，如跨域、静态资源路径问题等等，需要在实践中不断发现、解决。</p>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web 前端工程化 </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 异步处理（ES6）</title>
      <link href="/javascript-async/"/>
      <url>/javascript-async/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Promise-是什么？"><a href="#一、Promise-是什么？" class="headerlink" title="一、Promise 是什么？"></a>一、Promise 是什么？</h3><p>不是讲 <code>async/await</code> 吗？为什么会提到 <code>Promise</code> ？</p><p>实际上，<code>async/await</code> 是 <code>Promise</code> 的一个拓展，所以，想要更好地理解 <code>async/await</code>，需要先理解 <code>Promise</code> 。</p><p>我们先看看 <code>Promise</code> 是什么。先在浏览器中使用 <code>console.dir(Promise)</code> 打印出 <code>Promise</code> 对象的所的属性和方法：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/JavaScript/promise.png" alt="Promise"></p><p>从打印结果可以看出，<code>Promise</code> 是一个构造函数，它自己本身有 <code>all</code>、<code>reject</code>、<code>resolve</code> 等方法，原型上有 <code>catch</code>、<code>finally</code>、<code>then</code> 等方法。所以 <code>new</code> 出来的 <code>Promise</code> 对象也就自然拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法。从上图中可以看到，<code>then</code> 方法返回的是一个新的 <code>Promise</code> 实例（注意，不是原来那个 <code>Promise</code> 实例）。因此可以采用链式写法，即 <code>then</code> 方法后面再调用另一个 <code>then</code> 方法。</p><p><code>Promise</code> 的中文意思是承诺，这种<strong>“承诺将来会执行”</strong>的对象在 <code>JavaScript</code> 中称为 <code>Promise</code> 对象。简单说就是一个容器，里面保存着某个未来才会执行的事件（通常是一个异步操作）的结果。<br><a id="more"></a></p><p><strong><code>Promise</code> 对象有两个特点：</strong></p><ol><li><p>对象的状态不受外界影响。</p><blockquote><p><code>Promise</code> 对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。<strong>只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</strong> 这也是 <code>Promise</code> 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p></blockquote></li></ol><ol start="2"><li><p>一旦状态发生了改变，就不会再变，并且任何时候都可以得到这个结果。</p><blockquote><p>Promise 对象的状态的改变，只有两种可能：</p><ul><li>从 <code>pending</code> 变为 <code>fulfilled</code> </li><li>从 <code>pending</code> 变为 <code>rejected</code></li></ul><p>只要这两种状况发生，状态就凝固了，不会再变，会一直保持这个结果，这时就称为 <code>resolved</code> （已定型）。</p><p>如果状态已经发生改变，再对 <code>Promise</code> 对象添加回调函数，也会立即得到这个结果。这与事件（<code>Event</code>）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></blockquote></li></ol><p><strong><code>Promise</code> 也有一些缺点：</strong></p><ol><li>无法取消 <code>Promise</code> ，一旦新建 <code>Promise</code>，它就会立即执行，无法中途取消；</li><li>如果不设置回调函数，<code>Promise</code> 内部抛出的错误，不会反应到外部；</li><li>当 <code>Promise</code> 对象处于 <code>Pending</code> 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li></ol><h3 id="二、Promise的使用"><a href="#二、Promise的使用" class="headerlink" title="二、Promise的使用"></a>二、Promise的使用</h3><h4 id="1、创建Promise"><a href="#1、创建Promise" class="headerlink" title="1、创建Promise"></a>1、创建Promise</h4><p>那如何创建一个 <code>Promise</code> 呢，下面看一个简单的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Do some Async</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code>，这两个参数也是函数，由 <code>JavaScript</code> 引擎提供，不用自己实现。</p><ul><li><code>resolve</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“成功”（即从 <code>pending</code> 变为 <code>resolved</code>），在异步操作成功时调用，并将异步操作的<strong>结果</strong>，作为参数传递出去；</li><li><code>reject</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“失败”（即从 <code>pending</code> 变为 <code>rejected</code>），在异步操作失败时调用，并将异步操作报出的<strong>错误</strong>，作为参数传递出去。</li></ul><p>在上面的代码中，我们执行了一个异步操作，也就是 <code>setTimeout</code>，<code>2</code> 秒后，输出“执行完成”，并且调用 <code>resolve</code> 方法。运行代码的时候我们发现，我们只是 <code>new</code> 了一个 <code>Promise</code> 对象，并没有调用它，我们传进去的函数就已经执行了。</p><p><strong>所以，我们使用 <code>Promise</code> 的时候一般是包在一个函数中，在需要的时候去运行这个函数 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数会 <code>return</code> 出 <code>Promise</code> 对象，也就是说，执行这个函数我们得到了一个 <code>Promise</code> 对象。在文章开始的时候，我们知道 <code>Promise</code> 对象拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法，现在我们看看怎么使用它们。继续使用上面的 <code>runAsync</code> 函数 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// reject('数据');</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// success</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`成功拿到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后面可以用传过来的数据做些其他操作</span>    <span class="token comment" spellcheck="true">// ......</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// failure</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 实例生成以后，可以用 <code>then</code> 方法分别指定 <code>resolved</code> 状态和 <code>rejected</code> 状态的回调函数。<code>Promise</code>实例的状态变为 <code>resolved</code> 或 <code>rejected</code>，就会触发 <code>then</code> 方法绑定的回调函数。</p><pre class=" language-javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>then</code> 方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code> 对象的状态变为 <code>resolved</code> 时调用，第二个回调函数是 <code>Promise</code> 对象的状态变为 <code>rejected</code> 时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受 <code>Promise</code> 对象传出的值作为参数。</p><p><strong>结论：所以这个时候我们就会发现：原来 <code>then</code> 里面的函数和我们平时的回调函数一个意思，能够在 <code>runAsync</code> 这个异步任务执行完成之后被执行。</strong></p><p>这里我们就可以清楚的知道 <code>Promise</code> 的作用了：<strong>异步执行的流程中，把原来的回调写法（执行代码和处理结果的代码）分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</strong></p><p>下面我们再具体看看 <code>Promise</code> 相比于回调嵌套的写法的好处。</p><h4 id="2、回调嵌套与Promise"><a href="#2、回调嵌套与Promise" class="headerlink" title="2、回调嵌套与Promise"></a>2、回调嵌套与Promise</h4><p>从表面上看，<code>Promise</code> 只是能够简化层层回调的写法，而实质上，<code>Promise</code> 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 <code>callback</code> 函数要简单、灵活的多。我们来看看这种简化解决了什么问题：</p><p>以往使用回调嵌套的方式来处理异步的代码是怎么实现的呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">doA</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doC</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行顺序：</span><span class="token comment" spellcheck="true">//doA</span><span class="token comment" spellcheck="true">//doF</span><span class="token comment" spellcheck="true">//doB</span><span class="token comment" spellcheck="true">//doC</span><span class="token comment" spellcheck="true">//doE</span><span class="token comment" spellcheck="true">//doD</span></code></pre><p>这样组织的代码就会遇到一个问题：当项目的代码变得复杂，加上了各种逻辑判断，不断的在函数之间跳转，那排查问题的难度就会大大增加。就比如在上面这个例子中，<code>doD()</code> 必须在 <code>doC()</code> 完成后才能完成，如果 <code>doC()</code> 执行失败了呢？我们是要重试 <code>doC()</code> 吗？还是直接转到其他错误处理函数中？当我们将这些判断都加入到这个流程中，很快代码就会变得非常复杂，难以定位问题。</p><p>回调嵌套：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 之后:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">writeFileAsynv</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 的好处就非常明显了。</p><h4 id="3、catch-方法"><a href="#3、catch-方法" class="headerlink" title="3、catch 方法"></a>3、catch 方法</h4><p><code>Promise</code> 对象也拥有 <code>catch</code> 方法。它的用途是什么呢？其实它和 <code>then</code> 方法的第二个参数是一样的，用来指定<code>reject</code> 的回调，和写在 <code>then</code> 里第二个参数里面的效果是一样。</p><p>用法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong><code>catch</code> 还有另外一个作用：在执行 <code>resolve</code> 的回调（也就是上面 <code>then</code> 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会程序报错卡死，而是会进到这个 <code>catch</code> 方法中，而 <code>then</code> 里面的第二个函数捕获不到。</strong></p><p>看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>somedata<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的somedata未定义</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`then 里面第二个参数捕获不到错误</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成</span><span class="token comment" spellcheck="true">// resolved</span><span class="token comment" spellcheck="true">// 数据</span><span class="token comment" spellcheck="true">// rejected</span><span class="token comment" spellcheck="true">// ReferenceError: somedata is not defined</span></code></pre><p>在 <code>resolve</code> 的回调中，<code>somedata</code> 这个变量是没有被定义的。如果我们不用 <code>catch</code>，代码运行到这里就直接报错了，不往下运行了。但是在这里，会得到这样的结果。也就是说，程序执行到 <code>catch</code> 方法里面去了，而且把错误原因传到了 <code>error</code> 参数中。即便是有错误的代码也不会报错了，这与 <code>try/catch</code> 语句有相同的功能。<strong>所以，如果想捕获错误，就可以使用 <code>catch</code> 方法。</strong></p><h4 id="4、Promise-all"><a href="#4、Promise-all" class="headerlink" title="4、Promise.all()"></a>4、Promise.all()</h4><p><code>Promise.all</code> 方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span><span class="token comment" spellcheck="true">// [ '数据1', '数据2', '数据3' ]</span></code></pre><p>用 <code>Promise.all</code> 来执行，接收一个数组参数，里面的值最终都返回 <code>Promise</code> 对象。这样，三个异步操作的就是并行执行的，等到它们都执行完后才会进到 <code>then</code> 里面。那么，三个异步操作返回的数据哪里去了呢？都在 <code>then</code> 里面，<code>Promise.all</code> 会把所有异步操作的结果放进一个数组中传给 <code>then</code> ，就是上面的 <code>results</code> 。</p><p><strong>应用场景：</strong></p><p><code>Promise.all</code> 方法有一个非常常用的应用场景：打开网页时，预先加载需要用到的各种资源如图片及各种静态文件，所有的都加载完后，再进行页面的初始化。</p><p>那如果 <code>Promise.all</code> 方法里面包含的几个异步操作，有一个出现错误了会发生什么呢？我们把 <code>runAsync1</code> 中的 <code>resolve</code> 改成 <code>reject</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 改成了 reject</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'results'</span> <span class="token operator">+</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序会报错，也没有走进 <code>then</code> 方法里的第一个参数中：</p><pre><code>执行完成3执行完成1(node:25251) UnhandledPromiseRejectionWarning: 数据1(node:25251) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)(node:25251) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.执行完成2</code></pre><p>加上 <code>then</code> 第二个参数：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'results'</span> <span class="token operator">+</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成3</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// error数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span></code></pre><p>所以，当 <code>Promise.all()</code> 中的异步请求有错误时，是不会走到 <code>then</code> 方法中指定 <code>resolved</code> 状态的函数中的，我们需要加上指定 <code>rejected</code> 状态的函数或者 <code>catch</code> 方法：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'results'</span> <span class="token operator">+</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成3</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// catch数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span></code></pre><p><strong>也就是说：<code>Promise.all()</code> 中的异步请求只要有一个被 <code>rejected</code> ，<code>Promise.all([runAsync1(), runAsync2(), runAsync3()])</code> 的状态就会变成 <code>rejected</code> 。</strong></p><h4 id="5、Promise-race"><a href="#5、Promise-race" class="headerlink" title="5、Promise.race()"></a>5、Promise.race()</h4><p><code>race</code> 是竞赛、赛跑的意思。它的用法也就是它的字面意思：<strong>谁跑的快，就以谁为准，执行回调</strong>。其实再看看<code>Promise.all</code> 方法，和 <code>race</code> 方法恰恰相反。还是用 <code>Promise.all</code> 的例子，但是把 <code>runAsync1</code> 的方法 <code>timeout</code> 时间调成 <code>1000ms</code>。</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span></code></pre><p>这三个异步操作同样是并行执行的。结果很可以猜到，<code>1</code> 秒后 <code>runAsync1</code> 已经执行完了，此时 <code>then</code> 里面的方法就会立即执行了。但是，在 <code>then</code> 里面的回调函数开始执行时，<code>runAsync2()</code> 和 <code>runAsync3()</code> 并没有停止，仍然继续执行。所以再过 <code>1</code> 秒后，输出了他们结束的标志。这个点需要注意。</p><p>同样的，如果 <code>promise.race</code> 中的异步操作也有一个出现错误会发生什么呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span></code></pre><p><strong>也就是说：<code>Promise.race()</code> 中的异步请求谁率先改变状态，<code>Promise.race([runAsync1(), runAsync2(), runAsync3()])</code> 的状态就跟着改变，并传给 <code>Promise.race</code> 的回调函数中。</strong></p><p>上面的这些方法就是 <code>Promise</code> 比较常用的几个方法了。</p><h3 id="三、红绿灯问题"><a href="#三、红绿灯问题" class="headerlink" title="三、红绿灯问题"></a>三、红绿灯问题</h3><p>题目：红灯3秒亮一次，绿灯1秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用 <code>Promse</code> 实现）</p><p>三个亮灯函数已经存在：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>利用 <code>then</code> 和递归实现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>timmer<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> timmer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四、async-await-简介"><a href="#四、async-await-简介" class="headerlink" title="四、async/await 简介"></a>四、async/await 简介</h3><p><code>async</code> 函数是 <code>Generator</code> 函数的语法糖。</p><p>下面是一个 <code>Generator</code> 函数，依次读取两个文件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">ascReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">ascReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码的函数 <code>gen</code> 可以写成 <code>async</code> 函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncReadFile <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">asyncReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>比较一下就会发现，<code>async</code> 函数就是将 <code>Generator</code> 函数的星号（<code>*</code>）替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>。比起星号和 <code>yield</code>，<code>async</code> 和 <code>await</code>，语义上更清楚了。</p><p><strong>语法：</strong></p><p><code>await</code> 只能出现在 <code>async</code> 函数中，<code>async</code> 用于申明一个 <code>function</code> 是异步的，而 <code>await</code> 用于等待一个异步方法执行完成。下面我们单独对 <code>async</code> 和 <code>await</code> 做一些介绍，帮助理解。</p><h3 id="五、async"><a href="#五、async" class="headerlink" title="五、async"></a>五、async</h3><p><code>async</code> 函数是怎么处理它的返回值的呢？我们先写段代码来试试，看它到底会返回什么：</p><p><code>index.js</code> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello async"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> node index<span class="token punctuation">.</span>jsPromise <span class="token punctuation">{</span> <span class="token string">'hello async'</span> <span class="token punctuation">}</span></code></pre><p>输出的是一个 <code>Promise</code> 对象。<code>async</code> 函数（包含函数语句、函数表达式、<code>Lambda</code> 表达式）会返回一个 <code>Promise</code> 对象，如果在函数中 <code>return</code> 一个直接量，<code>async</code> 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 <code>Promise</code> 对象。</p><p>由于 <code>async</code> 函数返回的是一个 <code>Promise</code> 对象，所以在最外层不能用 <code>await</code> 获取其返回值的情况下，我们可以用原来的方式：<code>then()</code> 链来处理这个 <code>Promise</code> 对象，像下面这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello async"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello async</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那如果 <code>async</code> 函数没有返回值，会怎么样呢？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p><p>联想一下 <code>Promise</code> 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 <code>async</code> 函数，它会立即执行，返回一个 <code>Promise</code> 对象，并且不会阻塞后面的语句。这和普通返回 <code>Promise</code> 对象的函数是一样的。</p><h3 id="六、await"><a href="#六、await" class="headerlink" title="六、await"></a>六、await</h3><p><code>await</code> 操作符用于等待一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 对象。它只能在异步函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a> 中使用。</p><p>因为 <code>async</code> 函数返回一个 <code>Promise</code> 对象，所以 <code>await</code> 可以用于等待一个 <code>async</code> 函数的返回值——这也可以说是 <code>await</code> 在等 <code>async</code> 函数。</p><p>但要清楚，<code>await</code> 等的实际是一个返回值 —— 一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 对象或者任何要等待的值， <code>await</code> 不仅仅用于等 <code>Promise</code> 对象，它可以等任意表达式的结果，所以，<code>await</code> 后面实际是可以接普通函数调用或者直接量的。</p><blockquote><p>实际上，当 <code>await</code> 等待的不是一个 <code>Promise</code> 的时候，它就有一个隐式调用：<code>Promise.resolve(&quot;hello async&quot;);</code></p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"something"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"hello async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>await</code> 等到了它要等的东西 —— 一个 <code>Promise</code> 对象，或者其它值，然后呢？首先我们需要明确的是：<strong>await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</strong></p><ul><li>如果 <code>await</code> 等到的不是一个 <code>Promise</code> 对象，那 <code>await</code> 表达式的运算结果就是它等到的东西。</li><li>如果它等到的是一个 <code>Promise</code> 对象，<code>await</code> 就忙起来了，它会阻塞后面的代码，等着 <code>Promise</code> 对象 <code>resolve</code>，然后得到 <code>resolve</code> 的值，作为 <code>await</code> 表达式的运算结果。这就是 <code>await</code> 必须用在 <code>async</code> 函数中的原因，<code>async</code> 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 <code>Promise</code> 对象中异步执行。</li></ul><h3 id="七、async-await-的优势"><a href="#七、async-await-的优势" class="headerlink" title="七、async/await 的优势"></a>七、async/await 的优势</h3><h4 id="1、简洁"><a href="#1、简洁" class="headerlink" title="1、简洁"></a>1、简洁</h4><p>使用 <code>async/await</code> 明显节约了不少代码。我们：</p><ul><li>不需要写 <code>.then</code>；</li><li>不需要写匿名函数处理 <code>Promise</code> 的 <code>resolve</code> 值；</li><li>不需要定义多余的 <code>data</code> 变量；</li><li>避免了嵌套代码。</li></ul><h4 id="2、错误处理"><a href="#2、错误处理" class="headerlink" title="2、错误处理"></a>2、错误处理</h4><p><code>async/await</code> 使得最终可以使用相同的代码结构来处理同步和异步错误。</p><p>在下面带有 <code>promises</code> 的示例中，如果 <code>JSON.parse</code> 失败，则 <code>try/catch</code> 将无法处理，因为它发生在 <code>promise</code> 中。我们需要在 <code>promise</code> 上调用 <code>.catch</code> 并复制我们的错误处理代码，这会让代码变得非常冗杂。在实际生产中，会更加复杂。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// JSON.parse可能会出错</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取消注释，处理异步代码的错误</span>    <span class="token comment" spellcheck="true">// .catch((err) => {</span>    <span class="token comment" spellcheck="true">//   console.log(err)</span>    <span class="token comment" spellcheck="true">// })</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如果我们使用 <code>async/await</code> 的话，<code>catch</code> 就能很好地处理 <code>JSON.parse</code> 错误：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// JSON.parse可能会出错</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3、条件语句"><a href="#3、条件语句" class="headerlink" title="3、条件语句"></a>3、条件语句</h4><p>下面的代码示例当中，异步请求 <code>getJSON</code> 获取数据，然后根据返回的数据来判断决定是直接返回还是继续获取更多的数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>needsAnotherRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">makeAnotherRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>moreData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> moreData<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面的代码看着就会觉得很头疼，嵌套了 6 层。<code>return</code> 语句很容易让人感到迷茫，而它们只是需要将最终结果传递到最外层的 <code>Promise</code>。如果我们使用 <code>async/await</code> 来改写代码，代码的可读性会大大提高：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>needsAnotherRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> moreData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">makeAnotherRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> moreData<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="4、中间值"><a href="#4、中间值" class="headerlink" title="4、中间值"></a>4、中间值</h4><p>开发中我们经常会遇到这样一个场景：调用 <code>promise1</code>，使用 <code>promise1</code> 返回的结果去调用 <code>promise2</code>，然后使用两者的结果去调用 <code>promise3</code>。你的代码很可能是这样的:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something</span>      <span class="token keyword">return</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value2 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// do something          </span>          <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>我们可以做些改变，减少嵌套：将 <code>value1</code> 和 <code>value2</code> 放进 <code>Promise.all</code> 来避免深层嵌套：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value1<span class="token punctuation">,</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something          </span>      <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>代码看起来减少了嵌套，但是为了可读性却牺牲了语义。除了避免嵌套，并没有其他理由将 <code>value1</code> 和 <code>value2</code> 放在一个数组中。</p><p>如果我们使用 <code>async/await</code> 的话，代码会变得非常简单、直观：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5、错误栈"><a href="#5、错误栈" class="headerlink" title="5、错误栈"></a>5、错误栈</h4><p>假设有一段代码在一个链中调用多个 <code>promise</code>，而在链的某个地方会抛出一个错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'oops'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// output</span>    <span class="token comment" spellcheck="true">// Error: oops at callAPromise.then.then.then.then.then (index.js:8:13)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 链中返回的错误栈不会给出错误发生位置的详细原因。更糟糕的是，它会误导我们：错误栈中唯一的函数名为 <code>callAPromise</code>，然而它和错误没有关系。(当然文件名和行号还是有用的)。</p><p>然而，<code>async/await</code> 中的错误栈会指向错误所在的函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"oops"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// output</span>    <span class="token comment" spellcheck="true">// Error: oops at makeRequest (index.js:7:9)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在开发环境中，这一点优势可能并不大。但是，当我们分析生产环境的错误日志时，它将非常有用。</p><h4 id="6、调试"><a href="#6、调试" class="headerlink" title="6、调试"></a>6、调试</h4><p><code>async/await</code> 能够使得代码调试更简单。</p><p>由于我们不能在返回表达式的箭头函数中设置断点，所以如果使用 <code>Promise</code> 的话，就无法进行断点调试：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'oops'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>并且，如果我们在 <code>.then</code> 代码块中设置断点，使用 <code>Step Over</code> 快捷键时，调试器不会跳到下一个 <code>.then</code>，它会跳过异步代码。</p><p>如果使用 <code>await/async</code>，我们就不再需要那么多箭头函数了，这样就可以像调试同步代码一样跳过 <code>await</code> 语句：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><ul><li><code>async/await</code> 是写异步代码的新方式，以前的方法有<strong>回调函数</strong>和 <code>Promise</code>。</li><li><code>async/await</code> 是基于 <code>Promise</code> 实现的，它不能用于普通的回调函数。</li><li><code>async/await</code> 与 <code>Promise</code> 一样，是非阻塞的。</li><li><code>async/await</code> 使得异步代码看起来像同步代码，看起来更加清楚明了。</li><li><code>async/await</code> 相比于 <code>Promise</code> ，更加有优势。</li></ul><h3 id="九、await-in-loops"><a href="#九、await-in-loops" class="headerlink" title="九、await in loops"></a>九、await in loops</h3><p>下面我们看看在 <code>for</code> 循环中如何正确的使用 <code>await</code>。</p><p>我们调用一个知乎的 <code>api</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-fetch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bluebird <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bluebird'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> getZhihuColumn <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> bluebird<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`https://zhuanlan.zhihu.com/api/columns/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在有一个 <code>id</code> 列表，遍历里面的 <code>id</code>，在循环中调用 <code>getZhihuColumn</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> showColumnInfo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'showColumnInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'feweekly'</span><span class="token punctuation">,</span> <span class="token string">'toolingtips'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">of</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> column <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getZhihuColumn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>column<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Intro: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>column<span class="token punctuation">.</span>intro<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'showColumnInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">showColumnInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><pre><code>Name: 前端周刊 Intro: 在前端领域跟上时代的脚步，广度和深度不断精进 Name: tooling bits Intro: 工欲善其事必先利其器 showColumnInfo: 2446.938ms</code></pre><p>可以看到上面的这种写法也是串行，只不过是在循环中串行。那怎么把串行改成并行，让代码运行的更快呢？思路是：<strong>先触发所有的请求，拿到一个 Promise 的数组，然后遍历这个数组，等待里面的结果。</strong> 实现如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> showColumnInfo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'showColumnInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'feweekly'</span><span class="token punctuation">,</span> <span class="token string">'toolingtips'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> promises <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getZhihuColumn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> column <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>column<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Intro: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>column<span class="token punctuation">.</span>intro<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> `</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'showColumnInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">showColumnInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><pre class=" language-javascript"><code class="language-javascript">Name<span class="token punctuation">:</span> 前端周刊 Intro<span class="token punctuation">:</span> 在前端领域跟上时代的脚步，广度和深度不断精进 Name<span class="token punctuation">:</span> tooling bits Intro<span class="token punctuation">:</span> 工欲善其事必先利其器 showColumnInfo<span class="token punctuation">:</span> <span class="token number">1255</span><span class="token punctuation">.</span>428ms</code></pre><p>可以看到运行时间节省了不少。</p><h3 id="十、forEach-的问题"><a href="#十、forEach-的问题" class="headerlink" title="十、forEach 的问题"></a>十、forEach 的问题</h3><h4 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h4><p>前几天，项目中遇到一个 <code>JavaScript</code> 异步问题：</p><blockquote><p>有一组数据，需要对每一个数据进行一个异步处理，并且希望处理的时候是同步的。</p></blockquote><p>用代码描述如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 生成数据</span><span class="token keyword">const</span> getNumbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异步处理</span><span class="token keyword">const</span> doMulti <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>num <span class="token operator">*</span> num<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'num not specified'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这个例子中，通过 <code>forEach</code> 遍历地将每一个数字都执行 <code>doMulti</code> 操作。代码执行的结果是：首先会立即打印 <code>start</code>、<code>end</code> 。<code>2</code> 秒后，一次性输出 <code>1，4，9</code>。</p><p>这个结果和我们的预期有些区别，我们是希望每间隔 <code>2</code> 秒，执行一次异步处理，依次输出 <code>1，4，9</code>。所以当前代码应该是并行执行了，而我们期望的应该是串行执行。</p><p>我们尝试把 <code>forEach</code> 循环替换成 <code>for</code> 循环：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>执行结果完全符合了预期：依次输出：<code>start</code>、<code>1</code>， <code>4</code>， <code>9</code>， <code>end</code> 。</p><h4 id="2、问题分析"><a href="#2、问题分析" class="headerlink" title="2、问题分析"></a>2、问题分析</h4><p>思路都是一样的，只是使用的遍历方式不一样而已，为什么会出现这样的情况呢？在 <code>MDN</code> 上查找了一下 <code>forEach</code> 的 <code>polyfill</code> 参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN-Array.prototype.forEach()</a> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Production steps of ECMA-262, Edition 5, 15.4.4.18</span><span class="token comment" spellcheck="true">// Reference: http://es5.github.io/#x15.4.4.18</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> T<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">' this is null or not defined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. Let O be the result of calling toObject() passing the</span>    <span class="token comment" spellcheck="true">// |this| value as the argument.</span>    <span class="token keyword">var</span> O <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. Let lenValue be the result of calling the Get() internal</span>    <span class="token comment" spellcheck="true">// method of O with the argument "length".</span>    <span class="token comment" spellcheck="true">// 3. Let len be toUint32(lenValue).</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> O<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. If isCallable(callback) is false, throw a TypeError exception. </span>    <span class="token comment" spellcheck="true">// See: http://es5.github.com/#x9.11</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>callback <span class="token operator">+</span> <span class="token string">' is not a function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. If thisArg was supplied, let T be thisArg; else let</span>    <span class="token comment" spellcheck="true">// T be undefined.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      T <span class="token operator">=</span> thisArg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6. Let k be 0</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 7. Repeat, while k &lt; len</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> kValue<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// a. Let Pk be ToString(k).</span>      <span class="token comment" spellcheck="true">//    This is implicit for LHS operands of the in operator</span>      <span class="token comment" spellcheck="true">// b. Let kPresent be the result of calling the HasProperty</span>      <span class="token comment" spellcheck="true">//    internal method of O with argument Pk.</span>      <span class="token comment" spellcheck="true">//    This step can be combined with c</span>      <span class="token comment" spellcheck="true">// c. If kPresent is true, then</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> O<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// i. Let kValue be the result of calling the Get internal</span>        <span class="token comment" spellcheck="true">// method of O with argument Pk.</span>        kValue <span class="token operator">=</span> O<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ii. Call the Call internal method of callback with T as</span>        <span class="token comment" spellcheck="true">// the this value and argument list containing kValue, k, and O.</span>        callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> kValue<span class="token punctuation">,</span> k<span class="token punctuation">,</span> O<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// d. Increase k by 1.</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 8. return undefined</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的 <code>polyfill</code> 中的 <code>setp 7</code> ，我们可以简单地理解成下面的步骤：</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// this represents our array</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// We call the callback for each entry</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>相当于 <code>for</code> 循环执行了这个异步函数，所以是并行执行，导致了一次性全部输出结果：<code>1，4，9</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// nums.forEach(async (x) => {</span>  <span class="token comment" spellcheck="true">//   const res = await doMulti(x);</span>  <span class="token comment" spellcheck="true">//   console.log(res);</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3、解决方案"><a href="#3、解决方案" class="headerlink" title="3、解决方案"></a>3、解决方案</h4><p>现在，我们把问题分析清楚了。前面用 <code>for-of</code> 循环来代替 <code>forEach</code> 作为解决方案 ，其实我们也可以改造一下 <code>forEach</code> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncForEach <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>array<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">callback</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">asyncForEach</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">async</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4、Eslint-问题"><a href="#4、Eslint-问题" class="headerlink" title="4、Eslint 问题"></a>4、Eslint 问题</h4><p>这时候 <code>Eslint</code> 又报了错：<code>no-await-in-loop</code> 。关于这一点，<code>Eslint</code> 官方文档 <a href="https://eslint.org/docs/rules/no-await-in-loop" target="_blank" rel="noopener">https://eslint.org/docs/rules/no-await-in-loop</a> 也做了说明。</p><p>好的写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Good: all asynchronous operations are immediately started.</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Now that all the asynchronous operations are running, here we wait until they all complete.</span>  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不好的写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Bad: each loop iteration is delayed until the entire asynchronous operation completes</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实上面两种写法没有什么好坏之分，这两种写法的结果是完全不一样的。<code>Eslint</code> 推荐的 “好的写法” 在执行异步操作的时候没有顺序的，”不好的写法” 中有顺序，具体需要用哪种写法还是要根据业务需求来决定。</p><p>所以，在文档的 <code>When Not To Use It</code> 中，<code>Eslint</code> 也提到，如果需要有顺序地执行，我们是可以禁止掉该规则的：</p><blockquote><p>In many cases the iterations of a loop are not actually independent of each-other. For example, the output of one iteration might be used as the input to another. Or, loops may be used to retry asynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending an excessive amount of requests in parallel. In such cases it makes sense to use <code>await</code> within a loop and it is recommended to disable the rule via a standard ESLint disable comment.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 forEach 中使用 async/await 遇到的问题</title>
      <link href="/javascript-async-await-in-foreach/"/>
      <url>/javascript-async-await-in-foreach/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h3><p>前几天，项目中遇到一个 <code>JavaScript</code> 异步问题：</p><blockquote><p>有一组数据，需要对每一个数据进行一个异步处理，并且希望处理的时候是同步的。</p></blockquote><p>用代码描述如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 生成数据</span><span class="token keyword">const</span> getNumbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 异步处理</span><span class="token keyword">const</span> doMulti <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>num <span class="token operator">*</span> num<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'num not specified'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主函数</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><p>在这个例子中，通过 <code>forEach</code> 遍历地将每一个数字都执行 <code>doMulti</code> 操作。代码执行的结果是：首先会立即打印 <code>start</code>、<code>end</code> 。<code>2</code> 秒后，一次性输出 <code>1，4，9</code>。</p><p>这个结果和我们的预期有些区别，我们是希望每间隔 <code>2</code> 秒，执行一次异步处理，依次输出 <code>1，4，9</code>。所以当前代码应该是并行执行了，而我们期望的应该是串行执行。</p><p>我们尝试把 <code>forEach</code> 循环替换成 <code>for</code> 循环：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> x <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>执行结果完全符合了预期：依次输出：<code>start</code>、<code>1</code>， <code>4</code>， <code>9</code>， <code>end</code> 。</p><h3 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h3><p>思路都是一样的，只是使用的遍历方式不一样而已，为什么会出现这样的情况呢？在 <code>MDN</code> 上查找了一下 <code>forEach</code> 的 <code>polyfill</code> 参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">MDN-Array.prototype.forEach()</a> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Production steps of ECMA-262, Edition 5, 15.4.4.18</span><span class="token comment" spellcheck="true">// Reference: http://es5.github.io/#x15.4.4.18</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> T<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">' this is null or not defined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. Let O be the result of calling toObject() passing the</span>    <span class="token comment" spellcheck="true">// |this| value as the argument.</span>    <span class="token keyword">var</span> O <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. Let lenValue be the result of calling the Get() internal</span>    <span class="token comment" spellcheck="true">// method of O with the argument "length".</span>    <span class="token comment" spellcheck="true">// 3. Let len be toUint32(lenValue).</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> O<span class="token punctuation">.</span>length <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. If isCallable(callback) is false, throw a TypeError exception. </span>    <span class="token comment" spellcheck="true">// See: http://es5.github.com/#x9.11</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>callback <span class="token operator">+</span> <span class="token string">' is not a function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. If thisArg was supplied, let T be thisArg; else let</span>    <span class="token comment" spellcheck="true">// T be undefined.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      T <span class="token operator">=</span> thisArg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6. Let k be 0</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 7. Repeat, while k &lt; len</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> kValue<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// a. Let Pk be ToString(k).</span>      <span class="token comment" spellcheck="true">//    This is implicit for LHS operands of the in operator</span>      <span class="token comment" spellcheck="true">// b. Let kPresent be the result of calling the HasProperty</span>      <span class="token comment" spellcheck="true">//    internal method of O with argument Pk.</span>      <span class="token comment" spellcheck="true">//    This step can be combined with c</span>      <span class="token comment" spellcheck="true">// c. If kPresent is true, then</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> O<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// i. Let kValue be the result of calling the Get internal</span>        <span class="token comment" spellcheck="true">// method of O with argument Pk.</span>        kValue <span class="token operator">=</span> O<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ii. Call the Call internal method of callback with T as</span>        <span class="token comment" spellcheck="true">// the this value and argument list containing kValue, k, and O.</span>        callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span> kValue<span class="token punctuation">,</span> k<span class="token punctuation">,</span> O<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// d. Increase k by 1.</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 8. return undefined</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面的 <code>polyfill</code> 中的 <code>setp 7</code> ，我们可以简单地理解成下面的步骤：</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forEach <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// this represents our array</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// We call the callback for each entry</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>相当于 <code>for</code> 循环执行了这个异步函数，所以是并行执行，导致了一次性全部输出结果：<code>1，4，9</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// nums.forEach(async (x) => {</span>  <span class="token comment" spellcheck="true">//   const res = await doMulti(x);</span>  <span class="token comment" spellcheck="true">//   console.log(res);</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><p>现在，我们把问题分析清楚了。前面用 <code>for-of</code> 循环来代替 <code>forEach</code> 作为解决方案 ，其实我们也可以改造一下 <code>forEach</code> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncForEach <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>array<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">callback</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">asyncForEach</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">async</span> x <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doMulti</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="四、Eslint-问题"><a href="#四、Eslint-问题" class="headerlink" title="四、Eslint 问题"></a>四、Eslint 问题</h3><p>这时候 <code>Eslint</code> 又报了错：<code>no-await-in-loop</code> 。关于这一点，<code>Eslint</code>  官方文档 <a href="https://eslint.org/docs/rules/no-await-in-loop" target="_blank" rel="noopener">https://eslint.org/docs/rules/no-await-in-loop</a> 也做了说明。</p><p>好的写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Good: all asynchronous operations are immediately started.</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Now that all the asynchronous operations are running, here we wait until they all complete.</span>  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不好的写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>things<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> thing <span class="token keyword">of</span> things<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Bad: each loop iteration is delayed until the entire asynchronous operation completes</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">bar</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">baz</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其实上面两种写法没有什么好坏之分，这两种写法的结果是完全不一样的。<code>Eslint</code> 推荐的 “好的写法” 在执行异步操作的时候没有顺序的，”不好的写法” 中有顺序，具体需要用哪种写法还是要根据业务需求来决定。</p><p>所以，在文档的 <code>When Not To Use It</code> 中，<code>Eslint</code> 也提到，如果需要有顺序地执行，我们是可以禁止掉该规则的：</p><blockquote><p>In many cases the iterations of a loop are not actually independent of each-other. For example, the output of one iteration might be used as the input to another. Or, loops may be used to retry asynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending an excessive amount of requests in parallel. In such cases it makes sense to use <code>await</code> within a loop and it is recommended to disable the rule via a standard ESLint disable comment.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventEmitter</title>
      <link href="/eventemitter/"/>
      <url>/eventemitter/</url>
      
        <content type="html"><![CDATA[<p><code>Node.js</code> 所有的异步 <code>I/O</code> 操作在完成时都会发送一个事件到事件队列。</p><p>例如，<a href="http://nodejs.cn/s/gBYjux" target="_blank" rel="noopener"><code>net.Server</code></a> 会在每次有新连接时触发事件，<a href="http://nodejs.cn/s/C3Eioq" target="_blank" rel="noopener"><code>fs.ReadStream</code></a> 会在打开文件时触发事件，<a href="http://nodejs.cn/s/kUvpNm" target="_blank" rel="noopener"><code>stream</code></a> 会在数据可读时触发事件。</p><p>所有能触发事件的对象都是 <code>EventEmitter</code> 类的实例。 </p><h3 id="一、EventEmitter-类"><a href="#一、EventEmitter-类" class="headerlink" title="一、EventEmitter 类"></a>一、EventEmitter 类</h3><p><code>events</code> 模块只提供了一个对象： <code>events.EventEmitter</code>。<code>EventEmitter</code> 的核心就是事件触发与事件监听器功能的封装。</p><p>我们可以通过 <code>require(&#39;events&#39;);</code> 来访问该模块：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 events 模块</span><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建 eventEmitter 对象</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><p><code>EventEmitter</code> 对象如果在实例化时发生错误，会触发 <code>error</code> 事件。</p><p>当添加新的监听器时，<code>newListener</code> 事件会触发，当监听器被移除时，<code>removeListener</code> 事件被触发。</p><p>下面我们用一个简单的例子说明 <code>EventEmitter</code> 的用法：</p><p><code>index.js</code> ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 events 模块</span><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建 eventEmitter 对象</span><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'someEvent 事件触发'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p>执行结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> node index<span class="token punctuation">.</span>jssomeEvent 事件触发</code></pre><p>运行这段代码，<code>1</code> 秒后控制台输出了 ‘ <code>someEvent</code> 事件触发’。其原理是 <code>event</code> 对象注册了事件 <code>someEvent</code> 的一个监听器，然后我们通过 <code>setTimeout</code> 在 <code>1000</code> 毫秒后向 <code>event</code> 对象发送事件 <code>someEvent</code>，此时会调用 <code>someEvent</code> 的监听器。</p><p><code>EventEmitter</code> 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<code>EventEmitter</code> 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次同步调用，事件参数作为回调函数参数传递。</p><p>看看下面的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listener1'</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listener2'</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'someEvent'</span><span class="token punctuation">,</span> <span class="token string">'arg1 参数'</span><span class="token punctuation">,</span> <span class="token string">'arg2 参数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> node index<span class="token punctuation">.</span>jslistener1 arg1 参数 arg2 参数listener2 arg1 参数 arg2 参数</code></pre><p>上面的例子中，<code>emitter</code> 为事件 <code>someEvent</code> 注册了两个事件监听器，然后触发了 <code>someEvent</code> 事件。从运行结果中我们可以看到两个事件监听器的回调函数先后被调用（同步的）。</p><p><code>EventEmitter</code> 提供了多个属性，如 <code>on</code> 和 <code>emit</code>。<code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。</p><h3 id="二、将参数和-this-传给监听器"><a href="#二、将参数和-this-传给监听器" class="headerlink" title="二、将参数和 this 传给监听器"></a>二、将参数和 this 传给监听器</h3><p><code>eventEmitter.emit()</code> 方法可以传任意数量的参数到监听器函数。 当监听器函数被调用时， <code>this</code> 关键词会被指向监听器所绑定的 <code>EventEmitter</code> 实例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">===</span> emitter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果打印:</span><span class="token comment" spellcheck="true">//   a b MyEmitter {</span><span class="token comment" spellcheck="true">//     domain: null,</span><span class="token comment" spellcheck="true">//     _events: { event: [Function] },</span><span class="token comment" spellcheck="true">//     _eventsCount: 1,</span><span class="token comment" spellcheck="true">//     _maxListeners: undefined } true</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以使用 <code>ES6</code> 的箭头函数作为监听器。但 <code>this</code> 关键词不会指向 <code>EventEmitter</code> 实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印: a b {}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="三、异步-VS-同步"><a href="#三、异步-VS-同步" class="headerlink" title="三、异步 VS 同步"></a>三、异步 VS 同步</h3><p><code>EventEmitter</code> 会按照监听器注册的顺序同步地调用所有监听器。 所以必须确保事件的排序正确，且避免竞态条件。 可以使用 <code>setImmediate()</code> 或 <code>process.nextTick()</code> 切换到异步模式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步进行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果</span><span class="token comment" spellcheck="true">// a b</span><span class="token comment" spellcheck="true">// 异步进行</span></code></pre><h3 id="四、仅处理事件一次"><a href="#四、仅处理事件一次" class="headerlink" title="四、仅处理事件一次"></a>四、仅处理事件一次</h3><p>当使用 <code>eventEmitter.on()</code> 注册监听器时，监听器会在每次触发命名事件时被调用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印: 1</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印: 2</span></code></pre><p>使用 <code>eventEmitter.once()</code> 可以注册最多可调用一次的监听器。 当事件被触发时，监听器会被注销，然后再调用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印: 1</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不触发</span></code></pre><h3 id="五、-错误事件"><a href="#五、-错误事件" class="headerlink" title="五、 错误事件"></a>五、 错误事件</h3><p>当 <code>EventEmitter</code> 实例出错时，应该触发 <code>error</code> 事件。 这些在 <code>Node.js</code> 中被视为特殊情况。</p><p>如果没有为 <code>error</code> 事件注册监听器，则当 <code>error</code> 事件触发时，会抛出错误、打印堆栈跟踪、并退出 Node.js 进程：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'错误信息'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了防止崩溃 <code>Node.js</code> 进程，可以使用 <a href="http://nodejs.cn/s/cnfQ9s" target="_blank" rel="noopener"><code>domain</code></a> 模块，但是这并不是一个好的实践。作为最佳实践，我们应该始终为 <code>error</code> 事件注册监听器：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'events'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'错误信息'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印：错误信息</span></code></pre><h3 id="六、-继承-EventEmitter"><a href="#六、-继承-EventEmitter" class="headerlink" title="六、 继承 EventEmitter"></a>六、 继承 EventEmitter</h3><p>大多数时候我们不会直接使用 <code>EventEmitter</code>，而是在对象中继承它。包括 <code>fs</code>、<code>net</code>、 <code>http</code> 在内的，只要是支持事件响应的核心模块都是 <code>EventEmitter</code> 的子类。</p><p>这样做的原因有两点：</p><ul><li>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。</li><li>其次，<code>JavaScript</code> 的对象机制是基于原型的，支持部分多重继承，继承 <code>EventEmitter</code> 不会打乱对象原有的继承关系。</li></ul>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EventEmitter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React setState 的异步与同步</title>
      <link href="/react-setstate/"/>
      <url>/react-setstate/</url>
      
        <content type="html"><![CDATA[<h3 id="一、如何使用-setState"><a href="#一、如何使用-setState" class="headerlink" title="一、如何使用 setState"></a>一、如何使用 setState</h3><p>在 <code>React</code> 中，一个很重要的点就是不要直接去修改 <code>state</code>，类似于这样的写法：<code>this.state.count = 1</code> ，这种方式是无法触发 <code>React</code> 去更新视图的。因为 React 的机制中规定了：一个 <code>state</code> 的更新，首先需要调用 <code>setState</code> 方法：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>稍有经验的 <code>React</code> 开发者都会知道，<code>setState</code> 方法其实是<strong>异步</strong>的。即 <code>setState</code> 立马执行之后，是无法直接获取到最新的 <code>state</code> 的，需要经过 <code>React</code> 对 <code>state</code> 的所有改变进行合并处理之后，才会去计算新的虚拟 <code>DOM</code>，然后再根据最新的虚拟 <code>DOM</code> 去重新渲染真实 <code>DOM</code>。<br><a id="more"></a><br>我们看个例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Demo about setState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过打印结果我们可以看出：<code>React setState</code> 并不是同步的。那怎么才能获取到修改后的 <code>state</code> 呢？<code>React</code> 为我们提供了一个回调去实现：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><p>回调里的 <code>state</code> 便是最新的了，原因是该回调的执行时机在于 <code>state</code> 合并处理之后。如果我们这样去做：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></code></pre><p>实际最终的 <code>count</code> 会等于 <code>1</code>，原因是执行时第二行代码时得到的 <code>this.state.count = 0</code>。那怎么实现结果为 <code>2</code> 呢？</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span></code></pre><p><code>setState()</code> 实际上可以接受一个函数作为参数，函数的首个参数就是上一次的 <code>state</code>。</p><p>以上介绍了 <code>setState</code> 的三种使用方式，下面我们来看看它们的执行时机是怎样的，看段代码：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'console: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'console from callback: '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'console from func: '</span> <span class="token operator">+</span> prevState<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`last console: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span></code></pre><p>控制台的执行结果：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">:</span> <span class="token number">0</span> console <span class="token keyword">from</span> func<span class="token punctuation">:</span> <span class="token number">1</span> console <span class="token keyword">from</span> callback<span class="token punctuation">:</span> <span class="token number">2</span>last console<span class="token punctuation">:</span> <span class="token number">2</span> </code></pre><p><code>React</code> 其实会维护着一个 <code>state</code> 的更新队列，每次调用 <code>setState</code> 都会先把当前修改的 <code>state</code> 推进这个队列，最后，<code>React</code> 会对这个队列进行合并处理，然后去执行回调。根据最终的合并结果再去走下面的流程（更新虚拟<code>DOM</code>，触发渲染）。</p><h3 id="二、setState为什么要设计成异步的形式"><a href="#二、setState为什么要设计成异步的形式" class="headerlink" title="二、setState为什么要设计成异步的形式"></a>二、setState为什么要设计成异步的形式</h3><p>因为 <code>setState</code> 之后，无法立即获取最新的 <code>state</code> ，给人的感觉像是用<strong>异步</strong>的方式去设置状态。那 <code>setState</code> 到底是不是异步的呢？</p><p>看个 <code>demo</code> ：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生命周期中调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`lifecycle: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// setTimeout中调用</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`setTimeout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>increment2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 合成事件中调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`react event: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  increment2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 原生事件中调用</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`dom event: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>          couont<span class="token punctuation">:</span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          click me and count<span class="token operator">+</span><span class="token number">1</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click me and count<span class="token operator">+</span><span class="token number">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>这里需要提前了解一下 <code>react</code> 的事件机制：<code>react</code> 为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在 <code>jsx</code> 中常见的 <code>onClick</code>、<code>onChange</code> 这些都是合成事件。</p></blockquote><p>在上面的 <code>demo</code> 中我们用了 <code>4</code> 种方式调用 <code>setState()</code>，后面紧接着去取最新的 <code>state</code>，如果按照异步原理，应该是取不到的。然而，在 <code>setTimeout</code> 中调用以及原生事件中调用的话，是可以立马获取到最新的 <code>state</code> 的。根本原因在于，<code>setState</code> 并不是真正意义上的异步操作，它只是模拟了异步的行为。</p><p><code>React</code> 中会去维护一个标识（<code>isBatchingUpdates</code>），判断是直接更新还是先暂存 <code>state</code> 进队列。<code>setTimeout</code> 以及原生事件都会直接去更新 <code>state</code> ，因此可以立即得到最新 <code>state</code>。而合成事件和 <code>React</code> 生命周期函数中，是受 <code>React</code> 控制的，其会将 <code>isBatchingUpdates</code> 设置为 <code>true</code>，从而走的是类似异步的那一套机制。</p><p>那么为什么 <code>React</code> 要把状态的更新设计成这种方式呢？直接 <code>this.state.count = 1</code> 不可以吗？ <code>FaceBook</code> 做了解释：<a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710" target="_blank" rel="noopener">https://github.com/facebook/react/issues/11527#issuecomment-360199710</a></p><p>原因简单总结下：</p><ul><li>保证内部的一致性：即使 <code>state</code> 是同步更新，<code>props</code> 也不是。（你只有在父组件重新渲染时才能知道<code>props</code>）</li><li>将 <code>state</code> 的更新延缓到最后批量合并再去渲染对于应用的性能优化是有极大好处的，如果每次的状态改变都去重新渲染真实 <code>dom</code>，那么它将带来巨大的性能消耗。</li></ul><h3 id="三、函数式组件的-useState"><a href="#三、函数式组件的-useState" class="headerlink" title="三、函数式组件的 useState"></a>三、函数式组件的 useState</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Update Count<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        Count<span class="token punctuation">:</span>        <span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span>count<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">+</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">-</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>message</code> 中的值总是会比 <code>count</code> 的值少 <code>1</code>。所以，函数式组件的表现情况和 <code>class</code> 组件是一样的。那针对于函数式组件，我们怎么去拿到最新的 <code>state</code> 呢？</p><h4 id="1、使用-useEffect"><a href="#1、使用-useEffect" class="headerlink" title="1、使用 useEffect"></a>1、使用 useEffect</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 使用 useEffect</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> message<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Update Count<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        Count<span class="token punctuation">:</span>        <span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span>count<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">+</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">-</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果你还不清楚 <code>uesEffect</code> 如何使用，可以看这里：<a href="https://togoblog.cn/react-hook/#toc-heading-9">https://togoblog.cn/react-hook/#toc-heading-9</a></p><h4 id="2、封装一个-useAsyncState"><a href="#2、封装一个-useAsyncState" class="headerlink" title="2、封装一个 useAsyncState"></a>2、封装一个 useAsyncState</h4><p>使用 <code>Promise</code> 进行封装，但是不接受回调，因为这样很容易引起回调地狱。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">useAsyncState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setter<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如何使用呢？像使用 <code>useState</code> 一样去使用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useAsyncState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setValue</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setter<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useAsyncState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>message<span class="token punctuation">,</span> setMessage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useAsyncState</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`count is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Update Count<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        Count<span class="token punctuation">:</span>        <span class="token punctuation">{</span>count<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>increment<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">+</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>decrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">-</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> rootElement<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle批量插入数据时ID自增问题</title>
      <link href="/oracle-id-increase/"/>
      <url>/oracle-id-increase/</url>
      
        <content type="html"><![CDATA[<!-- ## Oracle批量插入数据时ID自增问题 --><p><strong>三步走：</strong></p><p>1、创建序列 sequence</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> sequence seq_stu      increment <span class="token keyword">by</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">-- 每次递增1</span>      <span class="token keyword">start</span> <span class="token keyword">with</span> <span class="token number">1</span>       <span class="token comment" spellcheck="true">-- 从1开始</span>      nomaxvalue      <span class="token comment" spellcheck="true">-- 没有最大值</span>      minvalue <span class="token number">1</span>       <span class="token comment" spellcheck="true">-- 最小值=1</span>      <span class="token keyword">NOCYCLE</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">-- 不循环</span></code></pre><p>2、为序列创建触发事件</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> replace <span class="token keyword">trigger</span> student_id_automation  before <span class="token keyword">insert</span>  <span class="token keyword">on</span> student  <span class="token keyword">for each row</span><span class="token keyword">begin</span>  <span class="token keyword">IF</span> :new<span class="token punctuation">.</span>id <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> :new<span class="token punctuation">.</span>id :<span class="token operator">=</span> seq_stu<span class="token punctuation">.</span>nextval<span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span></code></pre><a id="more"></a><p>3、批量插入</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端</title>
      <link href="/micro-frontends/"/>
      <url>/micro-frontends/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是微前端？"><a href="#一、什么是微前端？" class="headerlink" title="一、什么是微前端？"></a>一、什么是微前端？</h3><p>微前端的概念由我司(<code>ThoughtWorks</code>)在2016年十一月份的<a href="https://www.thoughtworks.com/radar/techniques/micro-frontends" target="_blank" rel="noopener">技术雷达</a>中被列为组织应评估的技术，后来又被提升为试用版，最后将其推广到 <code>Adopt</code> 中。</p><p>微前端是一种类似于微服务的架构。它将微服务的理念应用于浏览器端，即将单页面前端应用由单一的单体应用转变为把多个小型前端应用聚合为一的应用。各个前端应用还可以独立开发，独立部署，这样我们也就实现了应用的自治。而划分的团队之间也可以自治，独立定义自己的命名规则、代码规范、技术栈、开发流程等。</p><a id="more"></a><h3 id="二、为什么需要微前端？"><a href="#二、为什么需要微前端？" class="headerlink" title="二、为什么需要微前端？"></a>二、为什么需要微前端？</h3><p>一个大型组织的组织架构、软件架构是在不断地发生变化的。其业务的不断发展会导致组织的应用不断地膨胀，进一步映射到软件架构上。当一个组织的部门已经过于庞大的时候，就会进一步将它细化。同理，软件的不同部分又被拆分到不同的部门之下。随着不同部门的业务发展，技术栈也会因此变得越来越难以统一，出现多样化。</p><p>而对于用户来说，会越来越厌倦同一家公司的软件出现在不同的应用上。用户厌倦之后，应用的获客成本就会变得越来越高，在这样的背景下，应用又再一次走向了聚合。最近几年，移动应用就出现了这样的趋势，我们拿支付宝来举例。</p><p>一家大的商业公司，都会提供一系列的应用，这些应用从某种程度上也可以反映这家公司的组织架构。但是在用户眼里，他们就是一家公司，他们就只应该有一个应用。就像支付宝，我们肯定希望只在一个 <code>App</code> 中进行各种操作，比如收付款、转账、理财、缴纳水电，以及现在的小程序等，当然不希望下载多个 <code>App</code> 来完成这些事情。</p><p><strong>相似的，这种趋势也在桌面 <code>Web</code> 出现，聚合成为客户端的一个技术趋势，实现前端聚合的就是微前端架构。</strong></p><p>现在，绝大多数的公司都已经采用前后端分离的架构和开发模式。分离降低了系统的复杂度，同时也提高了软件的开发效率。而随着业务的不断扩张，需求也不断扩大，应用又开始变得臃肿起来。既然应用变大了，我们就得继续拆分，拆分成更小的单元。所以，微前端的架构模式和理念也是基于此诞生。</p><p>如果你经历过一个遗留系统的项目开发，应该会有很深的体会。产品代码是使用一个老旧的前端框架搭建而成，当你想把新的框架应用到项目中的时候，却发现新技术栈的某些编译配置在当前代码库中无法使用；想在的产品代码库中构建一个响应式 <code>Web</code> 应用程序，却找不到一个合适的入口去进行代码集成。代码越来越臃肿，前进的脚步被往日堆积的技术债所阻碍。你可能会想到重写，但是对于一个遗留系统而言，在没有很清楚地弄明白它的业务细节之前，加上无法得到重写的 <code>support</code> 之前，是万万不敢轻举妄动的，也是无法进行的。<strong>解决遗留系统，是采用微前端方案最重要的原因。</strong></p><h3 id="三、微前端的技术拆分方式"><a href="#三、微前端的技术拆分方式" class="headerlink" title="三、微前端的技术拆分方式"></a>三、微前端的技术拆分方式</h3><p>从技术实践上来说，微前端可以采用以下几种方式进行：</p><ol><li>路由分发式。通过 <code>HTTP</code> 服务器的反向代理功能，将请求路由到对应的应用上。</li><li>前端微服务化。在不同的框架之上设计通信和加载机制，以在一个页面内加载对应的应用。</li><li>微应用。通过软件工程的方式，在部署构建环境之中，把多个独立的应用组合成一个单体应用。</li><li>微件化。开发一个新的构建系统，将部分业务功能构建成一个独立的 <code>chunk</code> 代码，使用时只需要远程加载即可。</li><li>前端容器化。将 <code>iframe</code> 作为容器来容纳其他前端应用。</li><li>应用组件化。借助于 <code>Web Components</code> 技术，来构建跨框架的前端应用。</li></ol><p>实施的方式虽然多，但都是依据场景而采用的。在某些场景下，可能没有合适的方式；而在某些场景下，则可以同时使用多种方案。下面我们看看上面这六种方式的具体实现。</p><h4 id="1-路由分发式"><a href="#1-路由分发式" class="headerlink" title="(1) 路由分发式"></a>(1) 路由分发式</h4><p>路由分发式微前端，即通过路由将不同的业务分发到不同的独立前端应用上。通常是通过 <code>HTTP</code> 服务器的反向代理来实现，也可以通过应用框架自带的路由来解决。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/micro-frontend-router.jpg" alt="路由分发式"></p><p>路由分发式的架构应该是采用最多最容易的微前端方法。但是这种方式也有一个缺点：看上去更像是多个前端应用的聚合 —— 我们只是将这些不同的前端应用拼凑在一起，使它们看起来像一个完整的整体，但它们并非是一个整体。每当用户从 <code>A</code> 应用切换到 <code>B</code> 应用的时候，往往需要刷新一下页面，重新加载资源文件。</p><p>在这个架构中，我们只需要关注应用间的数据传递方式。通常，我们只需要将当前的用户状态从 <code>A</code> 应用传递到 <code>B</code> 应用即可。如果两个应用在同一个域里运行，就更加方便了，它们可以通过 <code>LocalStorage</code> 、<code>Cookies</code> 、<code>IndexedDB</code> 等方式共享数据。</p><blockquote><p>这里需要注意的是：在采用这种应用时，缺少了对应用状态的处理，需要用户重新登录，这种体验对用户来说相当不友好。</p></blockquote><h4 id="2-前端微服务化"><a href="#2-前端微服务化" class="headerlink" title="(2) 前端微服务化"></a>(2) 前端微服务化</h4><p>前端微服务化，是微服务架构在前端的实施，每个前端应用都是完全独立的（技术栈、开发、部署、构建）、自主运行的，最后通过模块化的方式组合出完整的前端应用，架构图如下：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/micro-frontend-microfrontend.jpg" alt="前端微服务化"></p><p>采用这种方式，就意味着一个页面上同时存在两个及以上的前端应用在运行，而前面所提到的路由分发方案则是页面页面只有唯一一个应用。</p><p>当我们单击指向某个应用的路由时，会加载、运行对应的应用。而原有的一个或多个应用，仍然可以在页面上保持运行的状态。同时，这些应用可以使用的不同的技术栈来开发，如页面上可以同时运行 <code>React</code>、<code>Angular</code> <code>和 Vue</code> 框架开发的应用。</p><p>能够这样实施的原因是：不论是基于 <code>Web Components</code> 的 <code>Angular</code>，还是 <code>VirtualDOM</code> 的 <code>React</code>，现有的前端框架都离不开基本的 <code>HTML</code> 元素 <code>DOM</code> 。所以我们只需要做到如下两点：</p><ul><li>在页面合适的地方引入或者创建 <code>DOM</code>；</li><li>用户操作时，加载对应的应用（触发应用的启动），并能卸载应用。</li></ul><p>创建 <code>DOM</code> 比较容易解决，第二点却比较麻烦，特别是移除 <code>DOM</code> 和相应应用的监听。当我们拥有一个不同的技术栈时，我们需要有针对性地设计出一套这样的逻辑。同时，我们还需要保证应用间的第三方依赖之间不发生冲突。</p><h4 id="3-组合式集成：微应用化"><a href="#3-组合式集成：微应用化" class="headerlink" title="(3) 组合式集成：微应用化"></a>(3) 组合式集成：微应用化</h4><p>微应用化是指，在开发时应用都是以单一的、微小应用的形式存在的，而在运行时，则通过构建系统合并这些应用，并组合成一个新的应用，其架构如下图：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/micro-frontend-micro-app.jpg" alt="微应用化"></p><p>微应用化大都是以软件工程的方式来完成前端应用的开发的，因此又可以称之为组合式集成。对于一个大型的前端应用来说，采用的架构方式往往是可以通过业务作为主目录的，然后在业务目录中放置相关的组件，同时拥有一些通用的共享模板，例如：</p><pre><code>|—— account|—— dashboard|—— reports|—— ...|__ shared</code></pre><p>当我们开发一个这样的应用时，从目录结构上看，业务本身已经被拆分了。我们所要做的是：让每个模块都成为一个单独的项目，如将仪表盘功能提取出来，加上共享部分的代码、应用的基本脚手架，便可以成为一个单独的应用。拆分出每个模块之后，便只需要在构建的时候复制所有的模块到一个项目中，再进行集成构建。</p><p>微应用化与前端微服务化类似，在开发时都是独立应用的，在构建时又可以按照需要单独加载。如果以微前端的单独开发、单独部署、运行时聚合的基本思想来看，微应用化就是微前端的一种实践，只是使用微应用化意味着我们只用使用唯一的一种前端框架。大团队通常是不会同时支持多个前端框架的。</p><h4 id="4-微件化"><a href="#4-微件化" class="headerlink" title="(4) 微件化"></a>(4) 微件化</h4><p><strong>微件（widget），指的是一段可以直接嵌入在应用上运行的代码，它由开发人员预先编译好，在加载时不需要再做任何修改或者编译。</strong>而微前端下的微件化则指的是，每个业务团队编写自己的业务代码，并将编译好的代码部署（上传或者放置）到指定的服务器上，在运行时，我们只需要加载相应的业务模块即可。对应的，在更新代码的时候，我们只需要更新对应的模块即可。下图便是微件化的架构示意图：</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/micro-front-micro-component.jpg" alt="微件化"></p><p>在非单面应用时代，要实现微件化方案是一件特别容易的事。从远程加载来对应的 <code>JavaScript</code> 代码并在浏览器上执行，生成对应的组件嵌入到页面的相应部分。对于业务组件也是类似的，提前编写好我们的业务组件，当需要对应的组件时再响应和执行。在未来，我们也可以采用 <code>WebComponent</code> 技术来做这样的事情。</p><p>而在单页面应用时代，要实现微件化就没有那么容易了。为了支持微建化，我们需要做下面一些事情：</p><ul><li>持有一个完整的框架运行时及编译环境。这用于保证微件能征程使用，即可调用框架 <code>API</code> 等。</li><li>性能受影响。应用由提前编译变成运行时才编译，会造成一些性能方面的影响——具体视组件的大小而定。</li><li>提前规划依赖。如果一个新的微件想使用新的依赖，需要从上游编译引入。</li></ul><p>此外，我们还需要一个支持上述功能的构建系统，它用于构建一个独立的微件模块。这个微件的形式如下：</p><ul><li>分包构建出来的独立代码，如 <code>webpack</code> 构建出来的 <code>chunk</code> 。</li><li>使用 <code>DSL</code> 的方式编写出来的组件。</li></ul><p>为了实现这种方式，我们需要对前端的应用的构建系统进行修改，如 <code>webpack</code> ，使它可以支持构建出单个的代码段。这种方式的实施成本比微应用化成本高。</p><h4 id="5-前端容器：iframe"><a href="#5-前端容器：iframe" class="headerlink" title="(5) 前端容器：iframe"></a>(5) 前端容器：iframe</h4><p><code>iframe</code> 作为一个非常 “古老” 的，人人都觉得普通的技术，却一直很管用。它能有效地将另一个网页/单页面应用嵌入到当前页面中，两个页面间的 <code>CSS</code> 和 <code>JavaScript</code> 是相互隔离的——除去 iframe 父子通信部分的代码，它们之间的代码是完全不相互干扰的。<code>iframe</code> 便相当于是创建了一个全新的独立的宿主环境，类似于沙箱隔离，它意味着前端应用之间可以相互独立运行。</p><p>当然，采用 <code>iframe</code> 有几个重要的前提：</p><ul><li>网站不需要 <code>SEO</code> 支持；</li><li>设计相应的应用管理机制。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Book Store<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to Book Store!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>micro-frontend-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">const</span> microFrontendsByRoute <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'/browse'</span><span class="token punctuation">:</span> <span class="token string">'https://browse.micro-frontend-demo.com/index.html'</span><span class="token punctuation">,</span>        <span class="token string">'/order'</span><span class="token punctuation">:</span> <span class="token string">'https://order.micro-frontend-demo.com/index.html'</span><span class="token punctuation">,</span>        <span class="token string">'/profile'</span><span class="token punctuation">:</span> <span class="token string">'https://profile.micro-frontend-demo.com/index.html'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'micro-frontend-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> microFrontendsByRoute<span class="token punctuation">[</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="6-结合-Web-Components-构建"><a href="#6-结合-Web-Components-构建" class="headerlink" title="(6) 结合 Web Components 构建"></a>(6) 结合 Web Components 构建</h4><p><code>Web Components</code> 是一套不同的技术，允许开发者创建可重用的定制元素（它们的功能封装在代码之外），并且在 <code>web</code> 应用中使用它们。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/FrontEnd/micro-frontend-web-component.jpg" alt="微件化"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Book Store!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to Book Store!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- These scripts don't render anything immediately --></span>    <span class="token comment" spellcheck="true">&lt;!-- Instead they each define a custom element type --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://browse.micro-frontend-demo.com/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://order.micro-frontend-demo.com/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://profile.micro-frontend-demo.com/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>micro-frontend-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// These element types are defined by the above scripts</span>      <span class="token keyword">const</span> webComponentsByRoute <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'micro-frontend-browse-books'</span><span class="token punctuation">,</span>        <span class="token string">'/order'</span><span class="token punctuation">:</span> <span class="token string">'micro-frontend-order-book'</span><span class="token punctuation">,</span>        <span class="token string">'/profile'</span><span class="token punctuation">:</span> <span class="token string">'micro-frontend-profile'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> webComponentType <span class="token operator">=</span> webComponentsByRoute<span class="token punctuation">[</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Having determined the right web component custom element type,</span>      <span class="token comment" spellcheck="true">// we now create an instance of it and attach it to the document</span>      <span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'micro-frontend-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> webComponent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>webComponentType<span class="token punctuation">)</span><span class="token punctuation">;</span>      root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>webComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>Web Component</code> 于微前端中的应用，现在也正处于摸索阶段。</p><blockquote><p>参考：</p><ul><li>《前端架构 — 从入门到微前端》—— 黄峰达（Phodal）</li><li><a href="https://martinfowler.com/articles/micro-frontends.html" target="_blank" rel="noopener">https://martinfowler.com/articles/micro-frontends.html</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> FrontEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.JS 中的事件循环机制</title>
      <link href="/event-loop-in-nodejs/"/>
      <url>/event-loop-in-nodejs/</url>
      
        <content type="html"><![CDATA[<h3 id="一、与浏览器中事件循环机制的差异"><a href="#一、与浏览器中事件循环机制的差异" class="headerlink" title="一、与浏览器中事件循环机制的差异"></a>一、与浏览器中事件循环机制的差异</h3><p>前面我们对浏览器中的事件循环机制有了一些了解，那 <code>Node</code> 环境下事件循环机制是否也是一致的呢？看段代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer1'</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer2'</span><span class="token punctuation">)</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><a id="more"></a><p>我们现在浏览器里面运行一下，结果应该和我们预想的一样(如果你已经读过<a href="https://togoblog.cn/event-loop-in-browser/">《浏览器中的事件循环》</a>)：</p><pre class=" language-javascript"><code class="language-javascript">timer1promise1timer2promise2</code></pre><p>再在 <code>Node</code> 环境下运行下，发现运行结果和浏览器中的运行结果并不是一样的：</p><pre class=" language-javascript"><code class="language-javascript">timer1timer2promise1promise2</code></pre><p>所以，浏览器中的事件循环机制和 <code>Node</code> 环境下的时间循环机制是有差异的。之后，我们在谈事件循环机制的时候，就要分不同的场景：浏览器环境和 <code>Node</code> 环境，不能混为一谈。</p><p>简单的讲：</p><ul><li><code>Node.js</code> 的 <code>event loop</code> 是基于 <code>libuv</code> 实现，而浏览器的 <code>event loop</code> 则在 <code>HTML5</code> 的规范中定义。</li><li><code>libuv</code> 已经对 <code>event loop</code> 作出了实现，而 <code>HTML5</code> 规范中只是定义了浏览器中 <code>event loop</code> 的模型，具体实现留给了浏览器厂商。</li></ul><blockquote><p>对于上面的代码在 <code>Node</code> 环境中执行结果的原因，我会在下文解释。</p></blockquote><h3 id="二、Node-js-的架构"><a href="#二、Node-js-的架构" class="headerlink" title="二、Node.js 的架构"></a>二、Node.js 的架构</h3><p>把 <code>Node.js</code> 拆分到组件，看看它们的关键作用是什么、如何交互协作。</p><p> <code>Node.js</code> 运行时环境图示：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/nodejs-architecture.png" alt="node.js 架构图"></p><ul><li><strong>Application/Modules（JS）</strong>：这部分就是所有的 <code>JavaScript</code> 代码：我们的应用程序、<code>Node.js</code> 核心模块、任何 <code>npm install</code> 的模块，以及你写的所有模块代码等等，我们花费的主要精力都在这部分。</li><li><strong>C/C++ Bindings</strong>：<code>Node.js</code> 中用了很多 <code>C/C++</code> 的代码和库，它们的性能很好。但是这三种不同的语言是怎么相互调用的呢？<code>Bindings</code> 就在这里发挥了作用。<code>Bindings</code> 是一些胶水代码，能够把不同语言绑定在一起，使其能够互相沟通调用。</li><li><strong>Addons</strong>：<code>Binding</code> 仅桥接 <code>Node.js</code> 核心库的一些依赖，<code>zlib</code>、<code>OpenSSL</code>、<code>c-ares</code>、<code>http-parser</code> 等。如果你想在应用程序中包含其他第三方或者自己的 <code>C/C++</code> 库的话，需要自己完成这部分胶水代码。那我们自己写的这部分胶水代码就称为 <code>Addon</code>。可以把 <code>Binding</code> 和 <code>Addons</code> 视为连接 <code>JavaScript</code>  代码和 <code>C/C++</code> 代码的桥梁。</li><li><p><a href="https://developers.google.com/v8/" target="_blank" rel="noopener"><strong>V8</strong></a>：<code>Google</code> 开源的高性能 <code>JavaScript</code> 引擎，以 <code>C++</code> 实现。这也是集成在 <code>Chrome</code> 中的 <code>JS</code> 引擎。<code>V8</code> 将你写的 <code>JavaScript</code> 代码编译为机器码（所以它超级快）然后执行。</p></li><li><p><a href="https://github.com/libuv/libuv" target="_blank" rel="noopener"><strong>libuv</strong></a>：提供异步功能的 <code>C</code> 库。它在运行时负责一个事件循环（<code>Event Loop</code>）、一个线程池、文件系统 <code>I/O</code>、<code>DNS</code> 相关和网络 <code>I/O</code>，以及一些其他重要功能。</p></li><li><a href="https://nodejs.org/en/docs/meta/topics/dependencies/" target="_blank" rel="noopener"><strong>其他 C/C++ 组件和库</strong></a>：如 <a href="http://c-ares.haxx.se/" target="_blank" rel="noopener">c-ares</a>、<a href="https://www.openssl.org/" target="_blank" rel="noopener">crypto (OpenSSL)</a>、<a href="https://github.com/nodejs/http-parser" target="_blank" rel="noopener">http-parser</a> 以及 <a href="http://zlib.net/" target="_blank" rel="noopener">zlib</a>。这些依赖提供了对系统底层功能的访问，包括网络、压缩、加密等。</li></ul><h3 id="三、事件循环"><a href="#三、事件循环" class="headerlink" title="三、事件循环"></a>三、事件循环</h3><p>上面我们对 <code>Node.js</code> 架构中的顶层组件有了一个简单的了解。</p><p>在 <code>Node.js</code> 中，也是单线程的事件循环。<code>Nodejs</code> 的事件循环会分为6个阶段，它们会按照顺序反复运行。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/nodejs-eventloop-structure.jpg" alt="NodeJS事件循环"></p><p>每个阶段的作用如下:</p><ul><li><p><code>timers</code> 阶段：这个阶段执行 <code>timer</code> (包括 <code>setTimeout</code>、<code>setInterval</code>) 的回调；</p></li><li><p><code>I/O callbacks</code> 阶段：执行 <code>I/O</code>（例如文件、网络）的回调；</p></li><li><code>idle, prepare</code> 阶段：队列的移动，仅 <code>node</code> 内部使用；</li><li><code>poll</code> 阶段：最重要的阶段，获取新的 <code>I/O</code> 事件, 适当的条件下 <code>node</code> 将阻塞在这里；</li><li><code>check</code> 阶段：执行 <code>setImmediate()</code> 的 <code>callback</code>；</li><li><code>close callbacks</code> 阶段：执行 <code>close</code> 事件的 <code>callback</code>，例如 <code>socket.on(&quot;close&quot;,func)</code></li></ul><p>我们重点看 <code>timers</code>、<code>poll</code>、<code>check</code> 这3个阶段就好，因为日常开发中的绝大部分异步任务都是在这3个阶段处理的。</p><h4 id="1、timers-阶段"><a href="#1、timers-阶段" class="headerlink" title="1、timers 阶段"></a>1、timers 阶段</h4><p><code>timers</code>  是事件循环的第一个阶段，<code>Node</code> 会去检查有无已过期的 <code>timer</code>，如果有则把它的回调压入 <code>timer</code> 的任务队列中等待执行。</p><p>事实上，<code>Node</code> 并不能保证 <code>timer</code> 在预设时间到了就会立即执行，因为 <code>Node</code> 对 <code>timer</code> 的过期检查不一定靠谱，它会受机器上其它运行程序影响，或者那个时间点主线程不空闲。比如下面的代码，<code>setTimeout()</code> 和 <code>setImmediate()</code> 的执行顺序是不确定的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'immediate'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>但是把它们放到一个 <code>I/O</code> 回调里面，就一定是 <code>setImmediate()</code> 先执行，因为 <code>poll</code> 阶段后面就是 <code>check</code> 阶段。</p><h4 id="2、poll-阶段"><a href="#2、poll-阶段" class="headerlink" title="2、poll 阶段"></a>2、poll 阶段</h4><p><code>poll</code> 阶段主要有2个功能：</p><ul><li>处理 <code>poll</code> 队列的事件</li><li>当有已超时的 <code>timer</code>，执行它的回调函数</li></ul><p><code>even loop</code> 将同步执行 <code>poll</code> 队列里的回调，直到队列为空或执行的回调达到系统上限（上限具体多少未详），接下来 <code>even loop</code> 会去检查有无预设的 <code>setImmediate()</code>，分两种情况：</p><ol><li>若有预设的 <code>setImmediate()</code>，<code>event loop</code> 将结束 <code>poll</code> 阶段进入 <code>check</code> 阶段，并执行 <code>check</code> 阶段的任务队列；</li><li>若没有预设的 <code>setImmediate()</code>，<code>event loop</code> 将阻塞在该阶段等待。</li></ol><p>注意一个细节，没有 <code>setImmediate()</code> 会导致 <code>event loop</code> 阻塞在 <code>poll</code> 阶段，这样之前设置的 <code>timer</code> 岂不是执行不了了？所以呢，在 <code>poll</code> 阶段 <code>event loop</code> 会有一个检查机制，检查 <code>timer</code> 队列是否为空，如果 <code>timer</code> 队列非空，<code>event loop</code> 就开始下一轮事件循环，即重新进入到 <code>timer</code> 阶段。</p><h4 id="3、check-阶段"><a href="#3、check-阶段" class="headerlink" title="3、check 阶段"></a>3、check 阶段</h4><p><code>setImmediate()</code> 的回调会被加入 <code>check</code> 队列中， 从 <code>event loop</code> 的阶段图可以知道，<code>check</code> 阶段的执行顺序在 <code>poll</code> 阶段之后。</p><p><strong>小结一下：</strong></p><ul><li><code>event loop</code> 的每个阶段都有一个任务队列；</li><li>当 <code>event loop</code> 到达某个阶段时，将执行该阶段的任务队列，直到队列清空或执行的回调达到系统上限后，才会转入下一个阶段；</li><li>当所有阶段被顺序执行一次后，称 <code>event loop</code> 完成了一个 <code>tick</code>。</li></ul><p>看个 <code>demo</code> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'readFile'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'immediate'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre><code>readFileimmediatetimeout</code></pre><h3 id="四、Node-js-与浏览器的-Event-Loop-差异"><a href="#四、Node-js-与浏览器的-Event-Loop-差异" class="headerlink" title="四、Node.js 与浏览器的 Event Loop 差异"></a>四、Node.js 与浏览器的 Event Loop 差异</h3><p>现在我们回到文章开头提到的问题，为什么 <code>Node.js</code> 与浏览器的 <code>Event Loop</code> 差异在什么地方呢？</p><p><strong>回顾一下：</strong></p><p>浏览器环境下，<code>microtask</code> 的任务队列是每个 <code>macrotask</code> 执行完之后执行。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/eventLoop-browser-2.png" alt="事件循环"></p><p>而在 <code>Node.js</code> 中，<strong><code>microtask</code> 会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行 <code>microtask</code> 队列的任务。</strong></p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/nodejs-eventloop-structure.jpg" alt="NodeJS事件循环"></p><p>文章最开始的 <code>demo</code>，在 <code>Node.js</code> 环境中，全局脚本 <code>main()</code> 执行，将2个 <code>timer</code> 依次放入 <code>timer</code> 队列，<code>main()</code> 执行完毕，执行栈空闲，任务队列开始执行：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/node-excute-animate.gif" alt="NodeJS事件循环"></p><ul><li><p>首先进入 <code>timers</code> 阶段，执行 <code>timer1</code> 的回调函数，打印 <code>timer1</code>，并将 <code>promise1.then</code> 回调放入 <code>microtask</code> 队列，同样的步骤执行 <code>timer2</code> ，打印 <code>timer2</code>；</p></li><li><p>至此，<code>timer</code> 阶段执行结束，<code>event loop</code> 进入下一个阶段之前，执行 <code>microtask</code> 队列的所有任务，依次打印 <code>promise1</code>、<code>promise2</code>。</p></li></ul><p><strong>对比浏览器端的处理过程：</strong></p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/browser-event-loop-excute-animate.gif" alt="事件循环"></p><h3 id="五、process-nextTick和setImmediate"><a href="#五、process-nextTick和setImmediate" class="headerlink" title="五、process.nextTick和setImmediate"></a>五、process.nextTick和setImmediate</h3><p>除了 <code>setTimeout</code> 和 <code>setInterval</code> 这两个方法，<code>Node.js</code> 还提供了另外两个与 <strong>任务队列</strong> 有关的方法：<a href="http://nodejs.org/docs/latest/api/process.html#process_process_nexttick_callback" target="_blank" rel="noopener">process.nextTick</a> 和 <a href="http://nodejs.org/docs/latest/api/timers.html#timers_setimmediate_callback_arg" target="_blank" rel="noopener">setImmediate</a>。它们可以帮助我们加深对 <strong>任务队列</strong> 的理解。</p><p><code>process.nextTick()</code> 会在各个事件阶段之间执行，一旦执行，要直到 <code>nextTick</code> 队列被清空，才会进入到下一个事件阶段，所以如果递归调用 <code>process.nextTick()</code>，会导致出现 <code>I/O starving</code> （饥饿）的问题。</p><p>比如下面例子的 <code>readFile</code> 已经完成，但它的回调一直无法执行：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> starttime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> endtimefs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'text.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  endtime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finish reading time: '</span><span class="token punctuation">,</span> endtime <span class="token operator">-</span> starttime<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> handler <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`nextTick </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  process<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// console.log(`setImmediate ${index}`)</span>  <span class="token comment" spellcheck="true">// setImmediate(handler)</span><span class="token punctuation">}</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>process.nextTick()</code> 的运行结果：</p><pre class=" language-shell"><code class="language-shell">nextTick 1nextTick 2......nextTick 999nextTick 1000finish reading time: 170</code></pre><p>替换成 <code>setImmediate()</code>，运行结果：</p><pre class=" language-shell"><code class="language-shell">setImmediate 1setImmediate 2finish reading time: 80......setImmediate 999setImmediate 1000</code></pre><p>这是因为嵌套调用的 <code>setImmediate()</code> 回调，被排到了下一次 <code>event loop</code> 才执行，所以不会出现阻塞。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><ol><li><p><code>Node.js</code> 的事件循环分为6个阶段；</p></li><li><p>浏览器和Node 环境下，<code>microtask</code> 任务队列的执行时机不同</p><ul><li><p><code>Node.js</code> 中，<code>microtask</code> 在事件循环的各个阶段之间执行</p></li><li><p>浏览器端，<code>microtask</code> 在事件循环的 <code>macrotask</code> 执行完之后执行</p></li></ul></li><li><p>递归的调用 <code>process.nextTick()</code> 会导致 <code>I/O starving</code> ，官方推荐使用 <code>setImmediate()</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器中的事件循环机制</title>
      <link href="/event-loop-in-browser/"/>
      <url>/event-loop-in-browser/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在看 Event loop 的时候，我发现相关的文章有很多，但是有的文章写得零碎，有的文章只讲解了浏览器或者 Node 环境之一的事件循环，这两者如果没有对比起来理解的话，总是觉得比较模糊。所以在读了很多文章之后，整理出来本文，本篇文章为《浏览器中的事件循环》，下一篇为《<a href="https://togoblog.cn/event-loop-in-nodejs/">Node.JS中的事件循环</a>》，二者对比起来理解会更好。</p></blockquote><h3 id="一、单线程和异步"><a href="#一、单线程和异步" class="headerlink" title="一、单线程和异步"></a>一、单线程和异步</h3><p>提到 <code>JavaScript</code> ，就会想到它的 <strong>单线程</strong> 和 <strong>异步</strong> 两大特性。那么在 <code>JavaScript</code> 中单线程是如何做到异步的呢？我们先了解一下单线程和异步之间的关系。</p><p><code>JavaScript</code> 中的任务分为 <strong>同步</strong> 和 <strong>异步</strong> 两种，它们的处理方式存在很大的不同。</p><h4 id="1、异步"><a href="#1、异步" class="headerlink" title="1、异步"></a>1、异步</h4><p><strong>同步任务</strong> 是直接在 <strong>主线程</strong> 上排队执行。在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。所有同步任务都在主线程上执行，形成一个 <strong>执行栈</strong>（<code>execution context stack</code>）。</p><p><strong>异步任务</strong> 则是被放在 <strong>任务队列</strong> (<code>task queue</code>) 中，不进入主线程，只有 <strong>任务队列</strong> 通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。任务队列类似一个缓冲区，任务下一步会被移到 <strong>执行栈</strong>，然后主线程执行 <strong>执行栈 </strong>的任务。如果有多个异步任务，那这些异步任务就要在任务队列中排队等候。</p><a id="more"></a><p>主线程和任务队列的示意图：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/main-thread-and-task-queue.jpg" alt="主线程和任务队列"></p><h4 id="2、单线程"><a href="#2、单线程" class="headerlink" title="2、单线程"></a>2、单线程</h4><p><code>JavaScript</code> 中其实是没有线程概念的，所谓的单线程也只是相对于多线程而言。<strong>线程</strong> 本来就不属于 <code>JavaScript</code> 语言的范畴，只是为了和其它语言做对比而已，为了让那些用过多线程语言的人理解 <code>JavaScript</code> 的特点。</p><p>单线程是指 <code>JavaScript</code> 引擎中负责解析执行 <code>JavaScript</code> 代码的线程只有一个（<strong>主线程</strong>），即每次只能做一件事。</p><blockquote><p>注意：所谓的 <code>JavaScript</code> 是单线程的，是指 <code>JavaScript</code> 运行在浏览器中是单线程的，叫做 <code>JavaScript</code> 引擎线程。但是浏览器不是单线程的。</p></blockquote><p>浏览器是<strong>事件驱动（<code>Event driven</code>）</strong>的。浏览器中很多异步行为都是由浏览器新开一个线程去完成的，它会创建事件并放入执行队列中。<code>JavaScript</code> 引擎是单线程处理任务队列，它只是浏览器多个线程中的一个。所以当多个事件触发时，会依次放入队列，然后一个一个响应。</p><p>浏览器还包括很多其他线程，如界面渲染线程，浏览器事件触发线程，<code>Http</code> 请求线程等。</p><p>怎么证明 <code>JavaScript</code> 是单线程的呢？ 看段代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码中，<code>JavaScript</code> 引擎 <code>5ms</code> 后会把打印 <code>second</code> 的任务加入队列，而当前有任务，所以只能等 <code>1000000</code> 个 <code>first</code> 打印完后才会打印 <code>second</code> 。所以执行结果会首先全部打印 <code>first</code> ，然后再全部打印 <code>second</code> ，即使中间的执行时间超过 <code>5ms</code> 。</p><p>由此可见，<code>JavaScript</code> 是单线程的。</p><h4 id="3、ajax-请求"><a href="#3、ajax-请求" class="headerlink" title="3、ajax 请求"></a>3、ajax 请求</h4><p>我们知道一个当发出 <code>ajax</code> 请求的时候，主线程在等待它响应的同时是会去做其它事情的。浏览器先在事件表中注册 <code>ajax</code> 的回调函数，响应回来后回调函数被添加到任务队列中等待执行，不会造成线程阻塞，所以说 <code>JavaScript</code> 处理 <code>ajax</code> 请求的方式是异步的。</p><h3 id="二、事件循环"><a href="#二、事件循环" class="headerlink" title="二、事件循环"></a>二、事件循环</h3><p>根据上面的描述，<code>JavaScript</code> 检查执行栈是否为空，以及确定把哪个 <code>task</code> 加入执行栈的这个过程就是 <strong>事件循环</strong>，<code>JavaScript</code> 实现异步的核心就是事件循环。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/eventLoop-browser.png" alt="事件循环"></p><p>主线程运行的时候，产生堆（<code>heap</code>）和栈（<code>stack</code>），栈中的代码调用各种外部 <code>API</code>，它们在 <strong>任务队列</strong> 中加入各种事件（<code>click</code>，<code>load</code>，<code>done</code> 等）。只要执行栈中的代码执行完毕，主线程就会去读取 <strong>任务队列</strong> ，依次执行那些事件所对应的回调函数。</p><blockquote><p><strong>注意：执行栈中的代码（同步任务），总是在读取 “任务队列”（异步任务）之前执行。</strong> </p></blockquote><h3 id="三、在浏览器中的实现"><a href="#三、在浏览器中的实现" class="headerlink" title="三、在浏览器中的实现"></a>三、在浏览器中的实现</h3><p>浏览器中，一个事件循环里有很多个来自不同任务源的任务队列（<code>task queues</code>），每一个任务队列里的任务是严格按照<strong>先进先出</strong>的顺序执行的。但是，因为<strong>浏览器自己调度</strong>的关系，<strong>不同任务队列的任务的执行顺序是不确定</strong>的。举个例子：</p><pre><code>浏览器有一个处理鼠标和键盘事件的任务队列。浏览器可以给这个队列比其他队列多3/4的执行时间，以确保交互的响应而不让其他任务队列饿死（starving），并且不会乱序处理任何一个任务队列的事件。</code></pre><p>任务被分为 <code>Task</code>（又称为 <code>MacroTask</code>，宏任务）和 <code>MicroTask</code>（微任务）两种。那哪些行为属于 <code>MacroTask</code>，哪些又属于 <code>MicroTask</code> 呢？</p><ul><li><strong>MacroTask</strong>：<code>script</code>(整体代码), <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>（<code>node</code>独有）, <code>I/O</code>, <code>UI rendering</code> ;</li><li><strong>MicroTask</strong>：<code>process.nextTick</code>(<code>node</code>独有), <code>Promises</code>, <code>Object.observe</code>(废弃), <code>MutationObserver</code> 。</li></ul><p>关于 <code>macrotask</code> 和 <code>microtask</code> 的理解，光这样描述会有些晦涩难懂，结合事件循坏的机制理解会清晰很多，下面这张图可以说是介绍得非常清楚了：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/eventLoop-browser-1.jpg" alt="事件循环"></p><p>总结一下上图，<strong>事件循环的进程模型</strong>：</p><ul><li>浏览器会不断从 <code>macrotask</code> 队列中按顺序取 <code>macrotask</code> 执行</li><li>每执行完一个 <code>macrotask</code> 都会检查 <code>microtask</code> 队列是否为空（执行完一个 <code>macrotask</code> 的具体标志是函数执行栈为空）</li><li>如果 <code>microtask</code> 队列不为空，则会<strong>一次性执行完</strong>所有 <code>microtask</code>，直到 <code>microtasks</code> 队列全部清空。</li><li>更新界面渲染</li><li>返回第一步，再进入下一个循环去 <code>macrotask</code> 队列中取下一个 <code>macrotask</code> 执行</li></ul><p><code>macrotask</code> 和 <code>microtask</code> 的执行顺序：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/eventLoop-browser-2.png" alt="事件循环"></p><p><strong>这里需要 <code>highlight</code> 的是：<code>microtask queue</code> 中的 <code>task</code> 会在事件循环的当前回合中执行，因此 <code>macrotask queue</code> 中的 <code>task</code> 就只能等到事件循环的下一个回合中执行了。</strong></p><blockquote><p>注意：图中橙色的 MacroTask 任务队列也应该是在不断被切换着的。</p></blockquote><p>我们看段代码：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>代码来自 <a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a> .</p></blockquote><p>在这里，<code>setTimeout</code> 的延时为 0，而 <code>Promise.resolve()</code> 也是返回一个被 <code>resolve</code> 了 <code>promise</code> 对象，即这里的 <code>then</code> 方法中的函数也是相当于异步的立即执行任务，那么他们到底是谁在前谁在后？</p><p>正确的打印顺序是：</p><pre><code>startendpromise1promise2setTimeout</code></pre><p><strong>这里的运行结果是 <code>Promise</code> 的立即返回的异步任务会优先于 <code>setTimeout</code> 延时为0的任务执行。</strong></p><p>看看执行过程：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/browser-event-loop-excute-animate.gif" alt="事件循环"></p><ul><li><p>一开始 <code>task</code> 队列中只有 <code>script</code>，则 <code>script</code> 中所有函数放入函数执行栈执行，代码按顺序执行。</p></li><li><p>接着遇到了 <code>setTimeout</code><strong>，它的作用是 <code>0ms</code> 后将回调函数放入 <code>task</code> 队列中</strong>，<strong>也就是说这个函数将在下一个事件循环中执行。</strong></p></li><li><p>接着遇到了 <code>Promise</code>，按照前面所述 <code>Promise</code> 属于 <code>microtask</code> ，所以第一个 <code>.then()</code> 会放入 <code>microtask</code> 队列。</p></li><li><p>当所有 <code>script</code> 代码执行完毕后，<strong>此时函数执行栈为空</strong>。 <strong><code>microtask queue</code> 中的 <code>task</code> 会在事件循环的当前回合中执行。</strong>所以，开始检查 <code>microtask</code> 队列，此时 <code>microtask</code> 队列不为空，执行 <code>.then()</code> 的回调函数输出 <code>&#39;promise1&#39;</code>，由于 <code>.then()</code> 返回的依然是 <code>promise</code> ，所以第二个 <code>.then()</code> 会放入 <code>microtask</code> 队列继续执行，输出 <code>&#39;promise2&#39;</code> 。也就是说如果我的某个 <code>microtask</code> 任务又推入了一个任务进入 <code>microtasks</code> 队列，那么在主线程完成该任务之后，仍然会继续运行 <code>microtasks</code> 任务，直到任务队列耗尽。</p></li><li><p>此时 <code>microtask</code> 队列为空了，进入下一个事件循环，检查 <code>task</code> 队列发现了 <code>setTimeout</code> 的回调函数，立即执行回调函数输出 <code>&#39;setTimeout&#39;</code>，代码执行完毕。</p></li><li>这个过程会不断重复，也就是所谓的<strong>事件循环</strong>。</li></ul><h3 id="四、定时器"><a href="#四、定时器" class="headerlink" title="四、定时器"></a>四、定时器</h3><p>除了放置异步任务的事件，<strong>任务队列</strong> 中还可以放置定时事件，即指定某些代码在多少时间之后执行。这叫作 <strong>定时器（<code>timer</code>）</strong>功能，也就是定时执行的代码。</p><p>定时器功能主要由 <code>setTimeout()</code> 和 <code>setInterval()</code> 这两个函数来完成，它们两个的内部运行机制完全一样，区别在于前者指定的代码是一次性执行，后者则为反复执行。下面看段代码：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token number">3</span><span class="token number">2</span></code></pre><p><code>setTimeout()</code> 将第二行代码推迟到 <code>1000ms</code> 之后执行。</p><p>写 <code>JavaScript</code> 代码的时候，我们会经常将 <code>setTimeout()</code> 的第二个参数设为 <code>0</code>，就表示当前代码执行完（执行栈清空）以后，立即执行（ <code>0ms</code> 间隔）指定的回调函数。</p><p><strong>注意</strong>：<code>setTimeout()</code> 只是将事件插入了 <strong>任务队列</strong>，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。如果当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在 <code>setTimeout()</code> 指定的时间执行。</p>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux — 让 scp 始终覆盖或创建目录</title>
      <link href="/linux-scp-cover-completely/"/>
      <url>/linux-scp-cover-completely/</url>
      
        <content type="html"><![CDATA[<p>前段时间在搭建前端项目的基础设施时，遇到这样一个问题：在 <code>pipline</code> 上将前端项目 <code>build</code> 之后的文件夹拷贝到 <code>aws</code> 上，我使用 <code>scp</code> 命令将目录从一个远程服务器复制到另一个远程服务器上的新目录，命令如下：</p><pre class=" language-shell"><code class="language-shell">$ scp -r server1:dir1 server2:dir2</code></pre><p>如果在 <code>server2</code> 上不存在 <code>dir2</code>，这可以正常工作，它会创建一个名为 <code>dir2</code> 的新目录，其中包含 <code>server1</code> 上 <code>dir1</code> 的所有内容。</p><p>但是当 <code>dir2</code> 已经存在于 <code>server2</code> 上时，就会出现问题，已经存在的文件不会被覆盖。<br><a id="more"></a><br><strong>解决办法：</strong></p><pre class=" language-shell"><code class="language-shell">$ scp -prq server1:dir1/. server2:dir2/</code></pre><p>在文件目录后面加个点 <code>.</code>，将复制该目录的内容，而不是目录本身。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 基础语法</title>
      <link href="/python-basic/"/>
      <url>/python-basic/</url>
      
        <content type="html"><![CDATA[<h3 id="一、标准数据类型"><a href="#一、标准数据类型" class="headerlink" title="一、标准数据类型"></a>一、标准数据类型</h3><h4 id="1、六个标准的数据类型："><a href="#1、六个标准的数据类型：" class="headerlink" title="1、六个标准的数据类型："></a>1、六个标准的数据类型：</h4><ul><li><p>Number（数字）</p><blockquote><p>支持三种不同的数值类型：整型(int)、浮点型(float)和复数(complex)</p></blockquote></li><li><p>String（字符串）</p><blockquote><ul><li>使用引号( <code>&#39;</code> 或 <code>&quot;</code> )来创建字符串；</li><li>三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</li></ul></blockquote></li><li><p>List（列表）</p><blockquote><p>列表用 <code>[ ]</code> 标识，支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p></blockquote></li><li><p>Tuple（元组）</p><blockquote><p>元组用 <code>()</code> 标识，类似于 <code>List</code>（列表）。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p></blockquote></li></ul><a id="more"></a><ul><li><p>Dictionary（字典）</p><blockquote><p>字典用 <code>{ }</code> 标识。字典由索引 <code>key</code> 和它对应的值 <code>value</code> 组成。</p></blockquote></li><li><p>Set（集合）</p><blockquote><p>集合 <code>set</code> 是一个无序的不重复元素序列。可以使用大括号 <code>{ }</code> 或者 <code>set()</code> 函数创建集合。</p><p>注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p><p>创建格式：</p><pre class=" language-python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">{</span>value01<span class="token punctuation">,</span>value02<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>或者set<span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre></blockquote></li></ul><p>其中：</p><ul><li>不可变数据类型（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据类型（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><h4 id="2、不可变数据类型与可变数据类型"><a href="#2、不可变数据类型与可变数据类型" class="headerlink" title="2、不可变数据类型与可变数据类型"></a>2、不可变数据类型与可变数据类型</h4><p><strong>不可变数据类型的不可变指的是变量引用的地址的值是不可变的。</strong>例如 <code>int</code> 类型，改变该类型变量的值，实际是改变了该变量引用的地址值，即改变了该变量引用的对象，并没有改变之前引用的对象的值。</p><ul><li>优点：不管内存中有多少个引用，相同的对象只占用一块内存；</li><li>缺点：当对变量进行运算从而改变变量的值时，由于是不可变数据类型，所以需要创建新对象，不断的改变就会不断的创建新对象。但是不再使用的变量会被垃圾回收器回收。</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">31106520</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token number">31106520</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">31106508</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token number">31106508</span><span class="token operator">>></span><span class="token operator">></span> z <span class="token operator">=</span> y<span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token number">31106508</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token number">31106484</span> </code></pre><p><strong>可变数据类型是指具有同样值的对象是不同的对象，即在内存中保存了多个同样值的对象，地址值不同。</strong>可变数据类型的对象，当值发生改变时，并不会创建新的对象，只是改变了原地址的值，扩充了原地址的内容，并不会改变原地址的地址值。但是对于可变数据类型的赋值操作是会改变该变量的地址值的。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">41568816</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">41575088</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">41575088</span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">41575088</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><h4 id="3、判断数据类型："><a href="#3、判断数据类型：" class="headerlink" title="3、判断数据类型："></a>3、判断数据类型：</h4><ul><li><code>type()</code> 不会认为子类是一种父类类型</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token number">111</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span></code></pre><ul><li><code>isinstance()</code> 会认为子类是一种父类类型</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A<span class="token boolean">False</span></code></pre><h3 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h3><h4 id="1、参数传递"><a href="#1、参数传递" class="headerlink" title="1、参数传递"></a>1、参数传递</h4><h5 id="传不可变对象实例"><a href="#传不可变对象实例" class="headerlink" title="传不可变对象实例"></a>传不可变对象实例</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change_int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">2</span>change_int<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 结果是 2</span></code></pre><h5 id="传可变对象实例"><a href="#传可变对象实例" class="headerlink" title="传可变对象实例"></a>传可变对象实例</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">change_me</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">:</span>    myList<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数内取值: "</span><span class="token punctuation">,</span> myList<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span>    <span class="token keyword">return</span>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>change_me<span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> myList<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span></code></pre><p>传入函数的和在末尾添加新内容的对象用的是同一个引用。故输出结果如下：</p><pre class=" language-python"><code class="language-python">函数内取值<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>有的时候，我们需要禁止函数修改列表，怎么做呢？向函数传递副本而不是原件：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_models</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> unprinted_designs<span class="token punctuation">:</span>        current_design <span class="token operator">=</span> unprinted_designs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>completed_models<span class="token punctuation">)</span>        completed_models<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_design<span class="token punctuation">)</span>unprinted_designs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>completed_models <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>print_models<span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> completed_models<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>unprinted_designs<span class="token punctuation">)</span></code></pre><p>使用切片表示法 <code>[:]</code> 创建列表的副本。</p><h4 id="2、关键字实参"><a href="#2、关键字实参" class="headerlink" title="2、关键字实参"></a>2、关键字实参</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nI have a "</span> <span class="token operator">+</span> animal_type <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My "</span> <span class="token operator">+</span> animal_type <span class="token operator">+</span> <span class="token string">"'s name is "</span> <span class="token operator">+</span> pet_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span>describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span></code></pre><p>打印结果：</p><pre><code>I have a hamster.My hamster&#39;s name is Harry.</code></pre><h4 id="3、传递任意数量的实参"><a href="#3、传递任意数量的实参" class="headerlink" title="3、传递任意数量的实参"></a>3、传递任意数量的实参</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>toppings<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('pepperoni',)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ('mushrooms', 'green peppers', 'extra cheese')</span></code></pre><p>形参名 <code>*toppings</code> 中的星号让 <code>Python</code> 创建一个名为 <code>toppings</code> 的空元组，并将接收到的所有值都封装在这个元素中(即使函数只接收到一个值)。</p><p>因为 Python 将实参封装到一个元组中了，所以我们可以使用元组的方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span><span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p>结果如下：</p><pre><code>Making a pizza with the following toppings:-pepperoniMaking a pizza with the following toppings:-mushrooms-green peppers-extra cheese</code></pre><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。<code>Python</code> 先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre><code>Making a 12 pizza with the following toppings:-pepperoniMaking a 16 pizza with the following toppings:-mushrooms-green peppers-extra cheese</code></pre><h4 id="4、将函数存储在模块中"><a href="#4、将函数存储在模块中" class="headerlink" title="4、将函数存储在模块中"></a>4、将函数存储在模块中</h4><p>可以将函数存储在被称为<strong>模块</strong>的独立文件中，再通过 <code>import</code> 语句将模块导入到主程序当中。</p><p><code>helper.py</code> :</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">describe_pet</span><span class="token punctuation">(</span>animal_type<span class="token punctuation">,</span> pet_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nI have a "</span> <span class="token operator">+</span> animal_type <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My "</span> <span class="token operator">+</span> animal_type <span class="token operator">+</span> <span class="token string">"'s name is "</span> <span class="token operator">+</span> pet_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_pizza</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token operator">*</span>toppings<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" pizza with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> topping <span class="token keyword">in</span> toppings<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> topping<span class="token punctuation">)</span></code></pre><p><code>index.py</code> :</p><p><strong>导入整个模块</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> helperhelper<span class="token punctuation">.</span>describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span>helper<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p><strong>导入特定的函数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> helper <span class="token keyword">import</span> describe_pet<span class="token keyword">from</span> helper <span class="token keyword">import</span> make_pizzadescribe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p><strong>使用 <code>as</code> 给函数指定别名</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> helper <span class="token keyword">import</span> describe_pet <span class="token keyword">as</span> dp<span class="token keyword">from</span> helper <span class="token keyword">import</span> make_pizza <span class="token keyword">as</span> mpdp<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span>mp<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p><strong>使用 <code>as</code> 给模块指定别名</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> helper <span class="token keyword">as</span> hh<span class="token punctuation">.</span>describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><p><strong>导入模块中的所有函数</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> helper <span class="token keyword">import</span> <span class="token operator">*</span>describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'harry'</span><span class="token punctuation">)</span>make_pizza<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'mushrooms'</span><span class="token punctuation">,</span> <span class="token string">'green peppers'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span></code></pre><h3 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h3><h4 id="1、创建和使用类"><a href="#1、创建和使用类" class="headerlink" title="1、创建和使用类"></a>1、创建和使用类</h4><p><strong>创建 <code>Dog</code> 类</strong></p><p>根据 <code>Dog</code> 类创建的每个实例都将存储名字和年龄，并赋予每条小狗蹲下(<code>site()</code>) 和打滚(<code>roll_over</code>)的能力：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">sit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is now sitting"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">roll_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" rolled over!"</span><span class="token punctuation">)</span></code></pre><ul><li>类中的函数成为<strong>方法</strong>，<code>__init__()</code> 是一个特殊的方法，每当根据 <code>Dog</code> 类创建实例时，<code>Python</code> 都会自动运行它；</li><li><code>__init__()</code> 方法的定义中，形参 <code>self</code> 必不可少，还必须位于其他形参前面。</li></ul><h4 id="2、根据类创建实例"><a href="#2、根据类创建实例" class="headerlink" title="2、根据类创建实例"></a>2、根据类创建实例</h4><pre class=" language-python"><code class="language-python">my_dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'willie'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 访问属性</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My dog's name is "</span> <span class="token operator">+</span> my_dog<span class="token punctuation">.</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My dog "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>my_dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" years old."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 调用方法</span>my_dog<span class="token punctuation">.</span>sit<span class="token punctuation">(</span><span class="token punctuation">)</span>my_dog<span class="token punctuation">.</span>roll_over<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3、给属性指定默认值"><a href="#3、给属性指定默认值" class="headerlink" title="3、给属性指定默认值"></a>3、给属性指定默认值</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回整洁的描述性信息"""</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条支出汽车里程的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印：</p><pre><code>2016 Audi A4This car has 0 miles on it.</code></pre><h4 id="4、修改属性的值"><a href="#4、修改属性的值" class="headerlink" title="4、修改属性的值"></a>4、修改属性的值</h4><h5 id="直接修改属性的值"><a href="#直接修改属性的值" class="headerlink" title="直接修改属性的值"></a>直接修改属性的值</h5><p>要修改属性的值，最简单的方式是通过实例直接访问它：</p><pre class=" language-python"><code class="language-python">my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">23</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印：</p><pre><code>2016 Audi A4This car has 0 miles on it.This car has 23 miles on it.</code></pre><h5 id="通过方法修改属性的值"><a href="#通过方法修改属性的值" class="headerlink" title="通过方法修改属性的值"></a>通过方法修改属性的值</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回整洁的描述性信息"""</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条支出汽车里程的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将里程表读书设置为指定的值"""</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer"</span><span class="token punctuation">)</span>my_new_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'audi'</span><span class="token punctuation">,</span> <span class="token string">'a4'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_new_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>update_odometer<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>update_odometer<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>my_new_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印：</p><pre class=" language-python"><code class="language-python"><span class="token number">2016</span> Audi A4This car has <span class="token number">0</span> miles on it<span class="token punctuation">.</span>This car has <span class="token number">23</span> miles on it<span class="token punctuation">.</span>You can't roll back an odometerThis car has <span class="token number">23</span> miles on it<span class="token punctuation">.</span></code></pre><h5 id="通过方法对属性的值进行递增"><a href="#通过方法对属性的值进行递增" class="headerlink" title="通过方法对属性的值进行递增"></a>通过方法对属性的值进行递增</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回整洁的描述性信息"""</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条支出汽车里程的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将里程表读书设置为指定的值"""</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> miles<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">+=</span> milesmy_used_car <span class="token operator">=</span> Car<span class="token punctuation">(</span><span class="token string">'subaru'</span><span class="token punctuation">,</span> <span class="token string">'outback'</span><span class="token punctuation">,</span> <span class="token number">2013</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_used_car<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_used_car<span class="token punctuation">.</span>update_odometer<span class="token punctuation">(</span><span class="token number">23500</span><span class="token punctuation">)</span>my_used_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span>my_used_car<span class="token punctuation">.</span>increment_odometer<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>my_used_car<span class="token punctuation">.</span>read_odometer<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印：</p><pre><code>2013 Subaru OutbackThis car has 23500 miles on it.This car has 23600 miles on it.</code></pre><h3 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h3><p>如果你要编写的类是另一个现成类的特殊版本，可使用<strong>继承</strong>。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法：原有的类称为父类，新类称为子类。子类继承了其父类所有的属性和方法，同时还可以定义的自己的属性和方法。</p><h4 id="1、子类的方法-init"><a href="#1、子类的方法-init" class="headerlink" title="1、子类的方法 __init__"></a>1、子类的方法 <code>__init__</code></h4><p>下面创建一个简单的 <code>ElectricCar</code> 类版本，它具备 <code>Car</code> 类的所有功能：</p><p><code>ElectricCar.py</code> :</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化描述汽车的属性"""</span>        self<span class="token punctuation">.</span>make <span class="token operator">=</span> make        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""返回整洁的描述性信息"""</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>make <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条支出汽车里程的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将里程表读书设置为指定的值"""</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> miles<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">+=</span> miles<span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的特殊之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>打印：</p><pre><code>2016 Tesla Model S</code></pre><p>定义子类时，必须在括号内指定父类的名称。方法 <code>__init__()</code> 接受创建 <code>Car</code>  实例所需要的信息。</p><p><code>super()</code> 是一个特殊的函数，帮助 <code>Python</code> 将父类和子类关联起来。这行代码让 <code>Python</code> 调用 <code>ElectricCar</code> 的父类的方法 <code>__init__()</code> ，让 <code>ElectricCar</code> 实例包含父类的所有属性。父类也称为<strong>超类</strong>(<code>superclass</code>)，名称 <code>super</code> 因此而得名。</p><h4 id="2、Python-2-7-中的继承"><a href="#2、Python-2-7-中的继承" class="headerlink" title="2、Python 2.7 中的继承"></a>2、Python 2.7 中的继承</h4><p>在 <code>Python 2.7</code> 中，继承的语法稍有不同：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的特殊之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ElectricCar<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span></code></pre><p>函数 <code>super()</code> 需要两个实参：子类名和对象 <code>self</code> 。另外，在 <code>Python 2.7</code> 中使用继承时，务必在定义父类时在括号内指定 <code>object</code>。</p><h4 id="3、给子类定义属性和方法"><a href="#3、给子类定义属性和方法" class="headerlink" title="3、给子类定义属性和方法"></a>3、给子类定义属性和方法</h4><p>让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。</p><p>下面添加一个电动汽车的特有属性(电瓶)，以及一个描述该属性的方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的特殊之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> <span class="token number">70</span>    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kwh battery."</span><span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_tesla<span class="token punctuation">.</span>get_descriptive_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="4、重写父类的方法"><a href="#4、重写父类的方法" class="headerlink" title="4、重写父类的方法"></a>4、重写父类的方法</h4><p>对于父类的方法，可以在子类中定义同名方法来重写它。这样，<code>Python</code> 将不会考虑父类方法，而只关注在子类中定义的方法。</p><p>假设 <code>Car</code> 类有一个名为 <code>fill_gas_tank()</code> 的方法，这个方法对全电动汽车毫无意义，因此我们可以重写它：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span>    <span class="token keyword">def</span> <span class="token function">fill_gas_tank</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""电动汽车没有邮箱"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car doesn't need a gas tank!"</span><span class="token punctuation">)</span></code></pre><p>使用继承时，取其精华，弃其糟粕。</p><h4 id="5、将实例用作属性"><a href="#5、将实例用作属性" class="headerlink" title="5、将实例用作属性"></a>5、将实例用作属性</h4><p>使用代码模拟实物时，我们会发现自己给类添加的细节越来越多：属性和方法清单以及文件都会越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来，将大型类拆分为多个协同工作的小类。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> battery_size<span class="token operator">=</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化电瓶的属性"""</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""打印一条描述电瓶容量的消息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kwh battery."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""电动汽车的特殊之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>make<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>我们定义了一个名为 <code>Battery</code> 的新类。在 <code>ElectricCar</code> 类中，添加了一个名为 <code>self.battery</code> 的属性。这行代码让 <code>Python</code> 创建一个新的 <code>Battery</code> 实例(由于没有指定尺寸，因此为默认值70)，并将实例存储在属性 <code>self.battery</code> 中，每当方法 <code>__init__()</code> 被调用时，都将执行该操作；因此现在每个 <code>ElectricCar</code> 实例都包含一个自动创建的 <code>Battery</code> 实例。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter — 零、设置开发环境</title>
      <link href="/flutter-development-environment-configuration/"/>
      <url>/flutter-development-environment-configuration/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><ul><li><p><code>Flutter</code> 是由 <code>Google</code> 的工程师团队打造的，用于创建高性能、跨平台的移动应用的框架</p></li><li><p><code>Flutter</code> 针对当下以及未来的移动设备进行优化，专注于 <code>Android and iOS</code> 低延迟的输入和高帧率</p></li><li><p><code>Flutter</code> 的设计跟 <code>react-native</code> 很像，但是比 <code>RN</code> 进了一步</p></li><li><p><code>Flutter</code> 的开发语言是 <code>Dart</code></p></li><li><p><code>Flutter</code> 的热重载（<code>hot-reload</code>）特性让人惊叹，它能在编 码时为你提供超快的视觉反馈</p></li></ul><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><h4 id="1、获取-Flutter-SDK"><a href="#1、获取-Flutter-SDK" class="headerlink" title="1、获取 Flutter SDK"></a>1、获取 Flutter SDK</h4><ul><li>将 <code>Flutter</code> 项目克隆到本地：<a id="more"></a></li></ul><blockquote><p> 在电脑上存放文件的时候，我有严重的”洁癖”。之前在用 <code>Windows</code> 的时候，有时候因为不小心把软件安装错盘符，卸载也有残余，我甚至会去重装系统，然后再花上整夜的时间设置各项环境和安装软件。</p><p>所以，这里我单独在根目录创建一个 <code>Development</code> 文件夹来存放克隆下来的 <code>flutter</code> 库，因为之后会用把这个库导入到环境变量里面，避免存放在其他位置造成误操作，也不利于后面的版本升级。</p></blockquote><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> ~$ <span class="token function">mkdir</span> Development$ <span class="token function">cd</span> Development/ $ <span class="token function">git</span> clone -b beta https://github.com/flutter/flutter.git</code></pre><ul><li>将 <code>Flutter</code> 添加到本地环境变量：</li></ul><pre class=" language-bash"><code class="language-bash">$ vim ~/.bash_profile</code></pre><p>在国内由于一些原因，还需要设置一下 <code>pub</code> 源，用以下载相关的依赖文件。其中  <code>PUB_HOSTED_URL</code> 和 <code>FLUTTER_STORAGE_BASE_URL</code> 是 <code>google</code> 为国内开发者搭建的临时镜像。</p><p>所以需要在环境变量中添加三个变量：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PUB_HOSTED_URL<span class="token operator">=</span>https://pub.flutter-io.cn<span class="token function">export</span> FLUTTER_STORAGE_BASE_URL<span class="token operator">=</span>https://storage.flutter-io.cn<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"PATH_TO_FLUTTER_GIT_DIRECTORY/flutter/bin:<span class="token variable">$PATH</span>"</span></code></pre><p>其中 <code>PATH_TO_FLUTTER_GIT_DIRECTORY</code> 为你的 <code>flutter sdk</code> 的路径（也就是前面 <code>clone</code> 的 <code>repo</code> 地址）。如我这里就是改成：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token string">"/Users/cxin/Development/flutter/bin:<span class="token variable">$PATH</span>"</span></code></pre><ul><li>刷新 <code>bash</code> ，需要 <code>source</code> 一下：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">source</span> ~/.bash_profile</code></pre><ul><li>查看 <code>PATH</code> :</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token keyword">echo</span> <span class="token variable">$PATH</span></code></pre><p>可以看到 <code>flutter</code> 已经被写入了。</p><ul><li>验证是否配置成功：</li></ul><pre class=" language-bash"><code class="language-bash">$ flutter -h</code></pre><p>配置成功的话，会展示 <code>flutter</code> 的命令帮助。</p><h4 id="2、运行-flutter-doctor"><a href="#2、运行-flutter-doctor" class="headerlink" title="2、运行 flutter doctor"></a>2、运行 flutter doctor</h4><p>运行以下命令查看是否需要安装一些依赖项以完成安装：</p><pre class=" language-bash"><code class="language-bash">$ flutter doctor</code></pre><blockquote><p>第一次运行 <code>flutter</code> 命令（如<code>flutter doctor</code>）时，它会下载自己的依赖关系并自行编译，所以速度会比较慢，后续的运行应该将会快得多。</p></blockquote><p>该命令将检查你的环境并在终端窗口中显示报告。<code>Dart SDK</code> 是与 <code>Flutter</code> 捆绑在一起的，所以不用再单独安装<code>Dart</code>。</p><p>这里我们需要仔细检查显示出来的报告中是否提示需要安装其他软件或执行其他任务，下面是我的机器的检查报告：</p><pre class=" language-bas"><code class="language-bas">Doctor summary (to see all details, run flutter doctor -v):[✓] Flutter (Channel beta, v1.5.4-hotfix.2, on Mac OS X 10.14.4 18E226, locale en-CN)[✗] Android toolchain - develop for Android devices    ✗ Unable to locate Android SDK.      Install Android Studio from: https://developer.android.com/studio/index.html      On first launch it will assist you in installing the Android SDK components.      (or visit https://flutter.dev/setup/#android-setup for detailed instructions).      If the Android SDK has been installed to a custom location, set ANDROID_HOME to that location.      You may also want to add it to your PATH environment variable.[!] iOS toolchain - develop for iOS devices (Xcode 10.2.1)    ✗ libimobiledevice and ideviceinstaller are not installed. To install with Brew, run:        brew update        brew install --HEAD usbmuxd        brew link usbmuxd        brew install --HEAD libimobiledevice        brew install ideviceinstaller    ✗ ios-deploy not installed. To install:        brew install ios-deploy    ✗ CocoaPods not installed.        CocoaPods is used to retrieve the iOS platform side's plugin code that responds to your plugin usage on the Dart side.        Without resolving iOS dependencies with CocoaPods, plugins will not work on iOS.        For more info, see https://flutter.dev/platform-plugins      To install:        brew install cocoapods        pod setup[!] Android Studio (not installed)[!] IntelliJ IDEA Ultimate Edition (version 2019.1.1)    ✗ Flutter plugin not installed; this adds Flutter specific functionality.    ✗ Dart plugin not installed; this adds Dart specific functionality.[✓] VS Code (version 1.33.1)[!] Connected device    ! No devices available! Doctor found issues in 5 categories.</code></pre><p>可以看到，对于每一项需要执行的任务，报告中都给出了相应的解决办法。按照提示执行就好了：</p><pre class=" language-bash"><code class="language-bash">Doctor summary <span class="token punctuation">(</span>to see all details, run flutter doctor -v<span class="token punctuation">)</span>:<span class="token punctuation">[</span>✓<span class="token punctuation">]</span> Flutter <span class="token punctuation">(</span>Channel beta, v1.5.4-hotfix.2, on Mac OS X 10.14.4 18E226, locale en-CN<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> Android toolchain - develop <span class="token keyword">for</span> Android devices <span class="token punctuation">(</span>Android SDK version 28.0.3<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> iOS toolchain - develop <span class="token keyword">for</span> iOS devices <span class="token punctuation">(</span>Xcode 10.2.1<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> Android Studio <span class="token punctuation">(</span>version 3.4<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> IntelliJ IDEA Ultimate Edition <span class="token punctuation">(</span>version 2019.1.1<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> VS Code <span class="token punctuation">(</span>version 1.33.1<span class="token punctuation">)</span><span class="token punctuation">[</span>✓<span class="token punctuation">]</span> Connected device <span class="token punctuation">(</span>1 available<span class="token punctuation">)</span>• No issues found<span class="token operator">!</span></code></pre><p>这中间有些是 <code>IDE</code> 的配置，在对应的 <code>IDE</code> 中安装 <code>Dart</code> 和 <code>Flutter</code> 即可。</p><blockquote><p>因为我使用的是 <code>Mac</code>，所以这里只介绍了 <code>macOS</code> 上的配置方法，关于其他系统的配置可以参考官网：<a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noopener">https://flutter.dev/docs/get-started/install</a></p></blockquote><h3 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h3><p>我们使用 <code>VSCode</code> 来开发。需要在 <code>VSCode</code> 中安装 <code>Dart</code> 和 <code>Flutter</code> 两个 <code>Extensions</code> 。</p><p>打开 <code>VSCode</code> ，选择 <code>View</code>  &gt;  <code>Command Palette</code>  &gt;  <code>Flutter: New Project</code>  &gt;  <code>Enter Project Name</code> ，<code>VSCode</code> 会自动帮我们创建一个 <code>Flutter</code> 项目。这里我创建的项目名称为 <code>demo</code> 。</p><p>运行 <code>demo</code> :</p><pre class=" language-bash"><code class="language-bash">$ flutter run</code></pre><p>执行报出如下错误：</p><pre class=" language-bash"><code class="language-bash">It appears that your application still contains the default signing identifier.Try replacing <span class="token string">'com.example'</span> with your signing <span class="token function">id</span> <span class="token keyword">in</span> Xcode:  <span class="token function">open</span> ios/Runner.xcworkspace</code></pre><p>按照上面的提示，用 <code>Xcode</code> 打开示例项目中的 <code>ios/Runner.xcworkspace</code> 这个文件。</p><p>选择项目菜单 <code>Runner</code> – <code>General</code> 选项 ，可以看到 <code>Signing</code> 中的 <code>Status</code> 提示错误信息：</p><pre class=" language-bash"><code class="language-bash">Signing <span class="token keyword">for</span> <span class="token string">"Runner"</span> requires a development team.Select a development team <span class="token keyword">in</span> the projct editor.</code></pre><p>点击 <code>Team</code> 选项的 <code>Add Account...</code> 按钮，登录 <code>Apple ID</code> ，没有则需要创建一个。回到 <code>General</code> 界面，选择 <code>Team</code> 名称，等待验证。</p><p>这里我又遇到另外的问题：</p><pre class=" language-bash"><code class="language-bash">ailed to create provisioning profile.The app ID <span class="token string">"com.example.demo"</span> cannot be registered to your development team. Change your bundle identifier to a unique string to try again.No profiles <span class="token keyword">for</span> <span class="token string">'com.example.demo'</span> were foundXcode couldn<span class="token string">'t find any iOS App Development provisioning profiles matching '</span>com.example.demo'.</code></pre><p>找了好久，有人给出一个解决办法：</p><p><strong>将 <code>Bundle Identifier</code> 的值改变一下，比如在结尾随机加上几个数字。</strong></p><p>然后点击 <code>try again</code> ，成功 <code>sign</code> 。</p><p>接下来我们重新执行 <code>flutter run</code> 运行，中间会要求输入密码，能够正常运行了，也支持热加载调试。</p><p><img src="https://github.com/IDeepspace/ImageHosting/raw/master/Flutter/flutter-start-demo.gif" alt="Flutter Demo"></p><h3 id="四、Flutter版本更新"><a href="#四、Flutter版本更新" class="headerlink" title="四、Flutter版本更新"></a>四、Flutter版本更新</h3><p>执行 <code>flutter doctor</code> ，如果有新版本更新，会提醒升级，按照提示，执行 <code>flutter upgrade</code> 进行升级即可。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React v16.8 Hook 功能</title>
      <link href="/react-hook/"/>
      <url>/react-hook/</url>
      
        <content type="html"><![CDATA[<p><code>Hook</code> 是 <code>React v16.8</code> 的新增特性。它可以让你在不创建 <code>class</code>  式组件的情况下使用 <code>state</code> 以及其他的 <code>React</code> 特性。</p><h3 id="一、-React-Hook-出现的背景"><a href="#一、-React-Hook-出现的背景" class="headerlink" title="一、 React Hook 出现的背景"></a>一、 <code>React Hook</code> 出现的背景</h3><p>我们知道，<code>React</code> 的核心思想就是：将一个页面拆分成一些独立的、可复用的组件，并且用自上而下的单向数据流的形式将这些组件串联起来。 </p><p>但是在实际项目中，很多组件式非常冗杂且难以复用的。对于那些 <code>class</code> 式的组件，因为它们本身包含了自己的状态( <code>state</code> )，所以这类组件复用起来是非常麻烦的。对于这个问题，<code>React</code> 官方也给出了两种推荐的解决方式：</p><ul><li>渲染属性( <a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener"><code>Render Props</code></a> )</li><li>高阶组件( <a href="https://zh-hans.reactjs.org/docs/higher-order-components.html#___gatsby" target="_blank" rel="noopener"><code>Higher-Order Components</code> </a>)<a id="more"></a></li></ul><h4 id="渲染属性"><a href="#渲染属性" class="headerlink" title="渲染属性"></a>渲染属性</h4><p>渲染属性指的是使用一个值为函数的 <code>prop</code> 来传递需要动态渲染的  <code>nodes</code> 或组件。</p><p>看个例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DataProvider</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      target<span class="token punctuation">:</span> <span class="token string">'DianDian'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DataProvider</span>  <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Dog target<span class="token punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>target<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p><code>DataProvider</code> 组件包含了所有跟状态相关的代码，而 <code>Dog</code> 组件则可以是一个单纯的展示组件，这样一来 <code>DataProvider</code> 就可以单独复用了。</p><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h4><p>参考：<a href="https://togoblog.cn/react-high-order-component/">https://togoblog.cn/react-high-order-component/</a></p><p>这两种方式看起来都很好，很多 <code>React</code> 的第三方库也都在用。但是这两种方式会增加我们代码的层级关系。</p><h4 id="复杂的生命周期函数"><a href="#复杂的生命周期函数" class="headerlink" title="复杂的生命周期函数"></a>复杂的生命周期函数</h4><p>我们通常希望一个函数只做一件事情，但是在生命周期钩子函数里面，通常会做很多事情。比如我们需要在 <code>componentDidMount</code> 中发起 <code>ajax</code> 请求来获取数据、绑定一些事件监听等等。同时，用时候我们还需要在 <code>componrntDidUpdate</code> 里面再做一遍同样的事情。随着项目越来越复杂，这部分的代码也变得越来越庞杂、不直观。</p><h4 id="令人困惑的-class"><a href="#令人困惑的-class" class="headerlink" title="令人困惑的 class"></a>令人困惑的 class</h4><p>我们用创建 <code>class</code> 式组件的时候，会一直遇到一件比较麻烦的事情：<code>this</code> 的指向。为了保证 <code>this</code> 的指向正确，我们要经常写这样的代码：<code>this.handleClick = this.handleClick.bind(this)</code>，或者是这样的代码：<code>&lt;button onClick={() =&gt; this.handleClick(e)}&gt;</code> 。看着觉得很啰嗦，而且还要随时注意不要绑定错 <code>this</code> 。</p><h4 id="无状态组件的无奈"><a href="#无状态组件的无奈" class="headerlink" title="无状态组件的无奈"></a>无状态组件的无奈</h4><p>我们在写 <code>React</code> 组件的时候，会尽可能把组件写成无状态组件的形式，更方便复用和独立测试。但是往往，我们用 <code>function</code> 创建了一个简洁完美的组件，后来需要发生变动，该组件必须得有自己的状态，这个时候我们又得很麻烦地将函数式组件改成 <code>class</code> 式组件。</p><h3 id="二、Hook-是什么？"><a href="#二、Hook-是什么？" class="headerlink" title="二、Hook 是什么？"></a>二、Hook 是什么？</h3><p><code>Hook</code> 是一些可以让你在函数组件里 “钩入”  <code>React state</code> 及生命周期等特性的<strong>函数</strong>。<code>Hooks</code> 使开发人员可以在任何地方都能够进入 <code>React</code> 的 <code>state</code> 和生命周期。它通过消除模板语法 ( <code>super(props)</code>，<code>componentDidMount</code>，函数绑定等)，简化了组件。<code>Hook</code> 还允许我们将一些逻辑封装到自定义的 <code>hooks</code> 中，并在整个应用程序中重用它们。</p><blockquote><p>注意：<code>Hook</code> 不能在 <code>class</code> 组件中使用。</p></blockquote><p><strong>什么时候我会用 Hook？</strong> </p><p>如果我们需要在函数式组件中添加一些 <code>state</code> ，以前的做法是必须将其它转化为 <code>class</code>。现在我们可以在现有的函数组件中使用 <code>Hook</code>。如果你的项目中 <code>React</code> 的版本已经升级到 <code>v16.8</code>，那完全可以使用 <code>React Hook</code> 功能来创建组件。</p><h3 id="三、State-Hook"><a href="#三、State-Hook" class="headerlink" title="三、State Hook"></a>三、State Hook</h3><p><code>useState</code> 钩子是 <code>setState</code> 的替代品。<code>API</code> 允许我们通过一次调用定义状态变量和 <code>setter</code> 函数。</p><p>看一个计数器的例子：当用户点击 <code>button</code> 按钮，计数器的值就会增加。我们先看看使用  <code>class</code> 的方式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Click me        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 <code>Hook</code> 属性：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明一个叫 "count" 的 state 变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        Click me      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在类组件中，我们使用 <code>this.state</code> 来保存组件状态，并对其修改触发组件重新渲染。而在函数组件中，由于没有 <code>this</code> ，<code>React</code> 通过 <code>useState</code> 来帮我们保存组件的状态。</p><ul><li><p><code>useState</code> 是 <code>React</code> 自带的一个 <code>Hook</code> 函数，被用来声明组件的状态变量。<code>useState</code> 这个函数接收的参数是状态初始值（<code>initial state</code>），它返回了一个数组，这个数组的第 <code>[0]</code> 项是当前当前的状态值，第 <code>[1]</code> 项是可以改变状态值的方法函数，相当于 <code>this.state</code>。</p></li><li><p>读取状态的时候，直接引用状态变量就可以了，再也不需要写成 <code>this.state.count</code> 这样。</p></li><li><p>更新状态时，我们直接调用 <code>setCount</code> 函数，这个函数接受的参数就是修改过的新的状态值。</p></li></ul><p><strong>如果一个组件有多个状态值怎么办？</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ExampleWithManyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>fruit<span class="token punctuation">,</span> setFruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Learn Hooks'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span><span class="token punctuation">}</span>  </code></pre><p>我们可以像上面这样写，<code>useState</code> 是可以多次调用的。并且，<code>useState</code> 接收的初始值没有规定一定要是 <code>string/number/boolean</code> 等这些简单的数据类型，也可以接受对象或者数组作为参数。</p><h3 id="四、Effect-Hook"><a href="#四、Effect-Hook" class="headerlink" title="四、Effect Hook"></a>四、Effect Hook</h3><p>我们在上面 <code>useState</code> 的例子中添加一个功能：修改 <code>document.title</code> :</p><p><code>class</code> 式写法：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Click me        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果使用 <code>Hook</code> ，我们可以这样写：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们写的有状态的组件，通常会执行很多副作用的东西，副作用是什么？比如通过 <code>ajax</code> 请求数据、添加一些监听的注册和取消注册以及手动修改 <code>React</code> 组件中的 <code>DOM</code> 等等，都被称为副作用( <code>side effect</code> )。我们之前会把这些处理副作用的函数写在生命周期的函数里面，比如 <code>componentDidMount</code> 、<code>componentDidUpdate</code> 和 <code>componentWillMount</code> 。现在我们可以使用 <code>useEffect</code> 函数来替代它们。</p><p>合理的做法是：给每一个副作用添加一个单独的 <code>useEffect</code> ，这样一来，这些副作用就不再用堆在生命周期函数里面，代码会变得更加清晰。</p><p>我们来具体看看上面的例子里面， <code>useEffect</code>  做了什么：</p><ul><li>声明了一个状态变量 <code>count</code>，将它的初始值设置为 0；</li><li>告诉 <code>React</code> 组件，有一个副作用。给  <code>useEffect</code> 传入一个匿名函数，这个匿名函数就是我们的副作用。在这个副作用里面，我们通过调用 <code>brower API</code> 来修改文档的标题。</li></ul><blockquote><p>这里需要注意：<code>React</code> 首次渲染和之后的每一次渲染都会调用一遍传给 <code>useEffect</code> 的函数。</p></blockquote><p><strong><code>useEffect api</code> 将函数回调作为第一个参数，将可选的条件数组作为第二个参数(待会介绍)。</strong></p><p><strong><code>useEffect</code> 怎么解绑一些副作用</strong> ?</p><p>这种场景也是非常常见的：当我们在 <code>componentDidMount</code> 里添加了一个注册，我们得马上在<code>componentWillUnmount</code> 中，也就是组件被注销之前清除掉添加的注册，否则就会导致内存泄漏的问题。</p><p>怎么清除呢？我们可以在 <code>useEffect</code> 函数中返回一个函数，<code>React</code> 会在组件卸载时调用这个函数，所以我们可以把清理函数放在这里。看个例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> logo <span class="token keyword">from</span> <span class="token string">'./avatar.png'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Scroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>scrollDepth<span class="token punctuation">,</span> setScrollDepth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">determineUserScrollDepth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> scrolled <span class="token operator">=</span>      document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token function">setScrollDepth</span><span class="token punctuation">(</span>scrolled<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> determineUserScrollDepth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unbindScrollListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>App<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>App-header<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>App-logo<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>logo<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>        You've scrolled <span class="token keyword">this</span> far<span class="token punctuation">:</span> <span class="token punctuation">{</span>scrollDepth<span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          Lorem Ipsum is simply dummy text <span class="token keyword">of</span> the printing and typesetting          industry<span class="token punctuation">.</span> Lorem Ipsum has been the industry's standard dummy text ever          since the 1500s<span class="token punctuation">,</span> when an unknown printer took a galley <span class="token keyword">of</span> type and          scrambled it to make a type specimen book<span class="token punctuation">.</span> It has survived not only          five centuries<span class="token punctuation">,</span> but also the leap into electronic typesetting<span class="token punctuation">,</span>          remaining essentially unchanged<span class="token punctuation">.</span> It was popularised <span class="token keyword">in</span> the 1960s <span class="token keyword">with</span>          the release <span class="token keyword">of</span> Letraset sheets containing Lorem Ipsum passages<span class="token punctuation">,</span> and          more recently <span class="token keyword">with</span> desktop publishing software like Aldus PageMaker          including versions <span class="token keyword">of</span> Lorem Ipsum<span class="token punctuation">.</span> Why <span class="token keyword">do</span> we use it<span class="token operator">?</span> It is a long          established fact that a reader will be distracted by the readable          content <span class="token keyword">of</span> a page when looking at its layout<span class="token punctuation">.</span> The point <span class="token keyword">of</span> using Lorem          Ipsum is that it has a more<span class="token operator">-</span>or<span class="token operator">-</span>less normal distribution <span class="token keyword">of</span> letters<span class="token punctuation">,</span> <span class="token keyword">as</span>          opposed to using <span class="token string">'Content here, content here'</span><span class="token punctuation">,</span> making it look like          readable English<span class="token punctuation">.</span> Many desktop publishing packages and web page          editors now use Lorem Ipsum <span class="token keyword">as</span> their <span class="token keyword">default</span> model text<span class="token punctuation">,</span> and a search          <span class="token keyword">for</span> <span class="token string">'lorem ipsum'</span> will uncover many web sites still <span class="token keyword">in</span> their infancy<span class="token punctuation">.</span>          Various versions have evolved over the years<span class="token punctuation">,</span> sometimes by accident<span class="token punctuation">,</span>          sometimes on purpose <span class="token punctuation">(</span>injected humour and the like<span class="token punctuation">)</span><span class="token punctuation">.</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Scroll<span class="token punctuation">;</span></code></pre><p>这个例子在向上或向下滚动页面时打印出用户的滚动位置。我们在 <code>useEffect</code> 中返回的函数里清除掉事件监听。</p><blockquote><p>这里需要注意：<code>useEffect</code> 里返回函数这种解绑模式跟 <code>componentWillUnmount</code> 不一样。<code>componentWillUnmount</code> 只会在组件被销毁前执行一次，而 <code>useEffect</code> 里返回函数每次组件渲染后都会执行一遍，包括返回的清理函数也会重新执行一遍。</p></blockquote><p><strong>为什么要让副作用函数再每次组件更新的时候都执行一遍呢？</strong></p><p>我们看看以前的模式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>我们在 <code>componentDidMount</code> 里注册，再在 <code>componentWillUnmount</code> 清除注册。但假如这时候 <code>props.friend.id</code> 发生变化了怎么办？我们不得不再添加一个 <code>componentDidUpdate</code> 来处理这种情况：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token operator">...</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先把上一个friend.id解绑</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>      prevProps<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 再重新注册新但friend.id</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>很繁琐。因为 <code>useEffect</code> 在每个组件更新后都会重新执行一遍，所以我们用 <code>useEffect</code> 就没有这个问题。所以代码的执行顺序是这样的：</p><pre><code>1. 页面首次渲染2. 替 friend.id = 1 的朋友注册3. 突然 friend.id 变成了 24. 页面重新渲染5. 清除 friend.id = 1 的绑定6. 替 friend.id = 2 的朋友注册...</code></pre><p>按照上面的逻辑，组件每次重新渲染都要执行一遍这些副作用函数，这样会造成性能损耗，那怎么跳过这些不必要的副作用呢？</p><p><strong>跳过一些不必要的副作用函数</strong></p><p>前面有说到，<code>useEffect</code> 将可选的条件数组作为第二个参数。我们用第二个参数来告诉 <code>React</code> 只有当这个参数的值发生改变时，才执行我们传入的副作用函数 —— 也就是 <code>useEffect</code> 的第一个参数。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当我们把第二个参数传入一个空数组的时候，其实就相当于只有在首次渲染的时候才执行 —— 也就是  <code>componentDidMount</code> 加 <code>componentWillUnmount</code> 的模式。</p><h3 id="五、Context-Hook"><a href="#五、Context-Hook" class="headerlink" title="五、Context Hook"></a>五、Context Hook</h3><p>上面介绍了 <code>useState</code>、<code>useEffect</code> 这两个最基本的 <code>API</code>，下面我们看看 React 帮我们封装好的 <code>useContext</code> ，它被用来处理多层级数据的传递。</p><p>在兄弟组件间的通讯中，利用父组件做中转可以完成兄弟组件之间的通信，但是如果父组件结构很深，那么中间的每一层组件都要去传递 <code>props</code>，增加了复杂度，并且这些 <code>props</code> 并不是这些中间组件自己所需要的。我们可以用 <code>React Context API</code> 来帮我们做这件事，参考：<a href="https://togoblog.cn/react-component-communication/#toc-heading-7">https://togoblog.cn/react-component-communication/#toc-heading-7</a>，代码如下：</p><p><code>ThemeContext.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">{</span>  light<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">'#000000'</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">'#eeeeee'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  dark<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">'#ffffff'</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">'#222222'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>  themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>MainSection.js</code> : </p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./ThemeContext'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MainSection</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>theme <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>            <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span>              color<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>foreground<span class="token punctuation">,</span>              minHeight<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>          <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MainSection<span class="token punctuation">;</span></code></pre><p><code>Main.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MainSection <span class="token keyword">from</span> <span class="token string">'./MainSection'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext<span class="token punctuation">,</span> themes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./ThemeContext'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> themes<span class="token punctuation">.</span>light<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  toggleTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> state<span class="token punctuation">.</span>theme <span class="token operator">===</span> themes<span class="token punctuation">.</span>dark <span class="token operator">?</span> themes<span class="token punctuation">.</span>light <span class="token punctuation">:</span> themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Toggle Theme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainSection</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Main<span class="token punctuation">;</span></code></pre><p>而在 <code>React Hooks</code> 中，我们可以使用 <code>useContext</code> 进行改造：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MainSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span>        color<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>foreground<span class="token punctuation">,</span>        minHeight<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用 <code>useContext</code> 则变得十分简洁，在原来的基础上，不用再写 <code>Consumer</code> ，可读性更强且不会增加组件树深度。</p><h3 id="六、Reducer-Hook"><a href="#六、Reducer-Hook" class="headerlink" title="六、Reducer Hook"></a>六、Reducer Hook</h3><p><code>useReducer</code> 这个 <code>Hooks</code> 在使用上几乎 <code>Redux/React-Redux</code> 一模一样，唯一缺少的就是无法使用 <code>redux</code> 提供的中间件。我们使用 <code>useReducer</code> 编写一个计数器：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>  count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'increment'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">'decrement'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ReducerHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      Count<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'increment'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">+</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'decrement'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token operator">-</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ReducerHook<span class="token punctuation">;</span></code></pre><p>用法跟 <code>Redux</code> 基本上是一致的。</p><h3 id="七、更多"><a href="#七、更多" class="headerlink" title="七、更多"></a>七、更多</h3><p><a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">https://reactjs.org/docs/hooks-reference.html</a></p><p>本节内容代码可参考：<a href="https://github.com/IDeepspace/React-Workshop/tree/master/Hooks" target="_blank" rel="noopener">https://github.com/IDeepspace/React-Workshop/tree/master/Hooks</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React Hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 16 中的新特性</title>
      <link href="/react-new-api-in-16/"/>
      <url>/react-new-api-in-16/</url>
      
        <content type="html"><![CDATA[<!-- ## React 16 中的新特性 --><p>对于 <code>React v16</code> 之后版本中的一些新特性，挑选了以下几个常用的 <code>Api</code> 来讲解 :</p><ul><li>Render 方法优化</li><li>错误边界</li><li>Portals</li><li>Context API</li><li>新的生命周期</li></ul><p>后面会持续更新。</p><h3 id="一、Render-方法优化"><a href="#一、Render-方法优化" class="headerlink" title="一、Render 方法优化"></a>一、Render 方法优化</h3><p>为了符合 <code>React</code> 的 <code>component tree</code> 和 <code>diff</code> 结构设计，在组件的 <code>render</code>  方法中，顶层必须包裹为单节点，因此我们在实际组件的设计和使用中，需要注意尽量避免嵌套后的层级变深。<br><a id="more"></a><br>比如下面的内容结构就必须再嵌套一个 <code>div</code> 使其变成单节点再返回：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>React v16</code> 之后，这个问题得到了改进，<code>render</code> 方法支持返回数组和字符串了: </p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'One'</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">'1'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">'2'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token string">'3'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Don't forget the keys :)</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>支持返回数组之后，有时候我们的代码可能长成下面这个样子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">[</span>     <span class="token string">"Some text."</span><span class="token punctuation">,</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>     <span class="token string">"More text."</span><span class="token punctuation">,</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Another heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>     <span class="token string">"Even more text."</span>   <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然减少了一层嵌套，但是代码看上去不简洁：</p><ul><li>数组中的元素必须以逗号分隔；</li><li>数组中的子节点都必须添加一个 <code>key</code> 属性来避免 <code>React</code> 的警告；</li><li>字符串必须用引号括起来。</li></ul><p>所以，在 <code>React v16.2</code> 中，官方又推出了 <code>Fragment</code> 组件来代替直接 <code>render</code> 数组的方式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>      Some text<span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>A heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      More text<span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Another heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      Even more text<span class="token punctuation">.</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>Fragment</code> 虽然也是一个正常单节点写法，直接包裹里面的内容。但是 <code>Fragment</code> 本身并不会产生真实的 <code>DOM</code> 节点，因此也不会导致层级嵌套增加。<code>Fragment</code> 组件也提供了简写的方式：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      Some text<span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>A heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      More text<span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Another heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      Even more text<span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果需要给 <code>Fragment</code> 添加 <code>key</code> 属性，是不支持使用简写的。（这也是 <code>Fragment</code> 唯一会遇到需要添加 <code>props</code> 的情况：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Glossary</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// Without the `key`, React will fire a key warning</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>term<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二、错误边界"><a href="#二、错误边界" class="headerlink" title="二、错误边界"></a>二、错误边界</h3><p><code>UI</code> 部分的一个 <code>JavaScript</code> 错误不应该破坏整个程序。为了解决这个问题，<code>React v16</code> 引入了<strong>错误边界</strong>的新概念。</p><p>错误边界是<strong>用于捕获其子组件树 <code>JavaScript</code> 异常，记录错误并展示一个回退的 UI</strong> 的 <code>React</code> 组件，而不是整个组件树的异常。错误边界在渲染期间、生命周期方法内、以及整个组件树构造函数内捕获错误。</p><p>下面的例子是通过一个 <code>ErrorBoundary</code> 组件对其内的内容进行保护和错误捕捉，并在发生错误时进行回退的UI展示：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> errorInfo<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Catch errors in any components below and re-render with error message</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      error<span class="token punctuation">:</span> error<span class="token punctuation">,</span>      errorInfo<span class="token punctuation">:</span> errorInfo<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// You can also log error messages to an error reporting service here</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Error path</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Something went wrong<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>details</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> whiteSpace<span class="token punctuation">:</span> <span class="token string">'pre-wrap'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>            <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>errorInfo<span class="token punctuation">.</span>componentStack<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>details</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Normally, just render children</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们就可以像一个普通的组件一样使用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">BuggyCounter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> counter <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Simulate a JS error</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'I crashed!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorBoundary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          These two counters are inside the same error boundary<span class="token punctuation">.</span> If one crashes<span class="token punctuation">,</span>          the error boundary will replace both <span class="token keyword">of</span> them<span class="token punctuation">.</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BuggyCounter</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BuggyCounter</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ErrorBoundary</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        These two counters are each inside <span class="token keyword">of</span> their own error boundary<span class="token punctuation">.</span> So <span class="token keyword">if</span>        one crashes<span class="token punctuation">,</span> the other is not affected<span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorBoundary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BuggyCounter</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ErrorBoundary</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorBoundary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BuggyCounter</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ErrorBoundary</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>错误边界工作机制类似于 <code>JavaScript</code>  中的 <code>catch {}</code> 。注意：仅有类组件可以成为错误边界。</p><p>在实际开发中，大多数情况下，我们可以只定义一个错误边界组件，并将它贯穿整个应用。</p><blockquote><p>注意：错误边界<strong>无法</strong>捕获如下错误:</p><ul><li>事件处理 （<a href="https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers" target="_blank" rel="noopener">了解更多</a>）</li><li>异步代码 （例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 回调函数）</li><li>服务端渲染</li><li>错误边界自身抛出来的错误 （而不是其子组件）</li></ul></blockquote><h3 id="三、Portals"><a href="#三、Portals" class="headerlink" title="三、Portals"></a>三、Portals</h3><p><code>createPortal</code>  这个 <code>Api</code> 用于将子节点渲染到父组件以外的 <code>DOM</code> 节点上。<code>createPortal</code> 的出现为弹窗、对话框等脱离文档流的组件开发提供了很大的便利。</p><p>现在我们来想一下，如果需要显示一个对话框(<code>Dialog</code>)，该怎么做呢？</p><p>最直观的做法，就是直接在 <code>JSX</code> 中把 <code>Dialog</code> 画出来，像下面代码的样子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token operator">...</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token punctuation">{</span> needDialog <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span> <span class="token punctuation">/></span></span> <span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>那么这样就有一个问题：这样渲染的话，<code>Dialog</code> 最终渲染产生的 <code>HTML</code> 就和上面非 <code>Dialog</code> 内容的 <code>JSX</code> 产生的<code>HTML</code> 混在一起了，像下面这样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token operator">...</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Dialog Content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>而对于对话框，从用户的感知角度来说，它应该是一个独立的组件。</p><p>但是现在 <code>Dialog</code> 被包在其他组件中，那就要用 <code>CSS</code> 的 <code>position</code> 属性控制 <code>Dialog</code> 位置了，就要求从 <code>Dialog</code> 往上一直到 <code>body</code> ，没有其他 <code>position</code> 是 <code>relative</code> 的元素的干扰，显然这是比较麻烦的。同时， <code>Dialog</code> 的样式也会与其它组件混在一起。</p><p>解决这个问题，我们可以在 <code>React</code> 组件树的最顶层创建一个专属于 <code>Dialog</code> 的元素，然后通过 <code>Redux</code> 或者其他什么通讯方式给这个 <code>Dialog</code> 发送信号，来控制 <code>Dialog</code> 显示或者不显示。但是这样又会造成 “杀鸡焉用牛刀” 的问题：我们只是为了一个 <code>Dialog</code> 却引入了 <code>Redux</code> 。</p><p>在 <code>React 16</code> 之前，也有实现 “传送门” 的方式，但是官方一直并不鼓励使用，所以这里也不作深入讨论。<code>React 16</code> 后，使用 <code>createPortal Api</code> 创建 <code>Dialog</code> 组件就简单多了，不需要牵扯到 <code>componentDidMount</code>、<code>componentDidUpdate</code> 等生命周期问题，也不用调用 <code>API</code> 清理 <code>Portal</code>，关键代码在 <code>render</code> 中，我们看一下 <a href="https://codepen.io/gaearon/pen/yzMaBd" target="_blank" rel="noopener">官方给的 <code>demo</code> </a> :</p><p>首先在 <code>public/index.html</code> 中新建一个根节点：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>通过  <code>createPortal Api</code>  创建一个 “传送门”：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> modalRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modal-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create a div that we'll render the modal into. Because each</span>    <span class="token comment" spellcheck="true">// Modal component has its own element, we can render multiple</span>    <span class="token comment" spellcheck="true">// modal components into the modal container.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Append the element into the DOM on mount. We'll render</span>    <span class="token comment" spellcheck="true">// into the modal container element (see the HTML tab).</span>    modalRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Remove the element from the DOM when we unmount</span>    modalRoot<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Use a portal to render the children into the element</span>    <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// Any valid React child: JSX, strings, arrays, etc.</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// A DOM element</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Modal<span class="token punctuation">;</span></code></pre><p>使用 <code>Modal</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Modal <span class="token keyword">from</span> <span class="token string">'./Modal'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> showModal<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> clicks<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleShow <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showModal<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleHide <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showModal<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This will fire when the button in Child is clicked,</span>    <span class="token comment" spellcheck="true">// updating Parent's state, even though button</span>    <span class="token comment" spellcheck="true">// is not direct descendant in the DOM.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      clicks<span class="token punctuation">:</span> prevState<span class="token punctuation">.</span>clicks <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Show a Modal on click.</span>    <span class="token comment" spellcheck="true">// (In a real app, don't forget to use ARIA attributes</span>    <span class="token comment" spellcheck="true">// for accessibility!)</span>    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showModal <span class="token operator">?</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>modal<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleHide<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hide modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Modal</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Number <span class="token keyword">of</span> clicks<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>clicks<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        This div has overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">.</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleShow<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Show modal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>modal<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>上面的代码中，<code>App</code> 组件通过 <code>Portal</code> 把里面的内容渲染到了一个独立的节点上，在实际的 <code>DOM</code> 结构中，<code>modal</code> 里面的内容已经脱离了 <code>App</code> 组件本身的 <code>DOM</code> 树而存在于另一个独立节点。对于要通过 <code>createPortal()</code> “分离” 出去的内容，它的数据传递，生命周期，甚至事件冒泡，依然存在于原本的抽象组件树结构当中。这里实际依赖于 <code>React</code> 代理和重写了整套事件系统，让整个抽象组件树的逻辑得以保持同步。</p><p>运行上面的代码可以查看效果。</p><h3 id="四、Context-API"><a href="#四、Context-API" class="headerlink" title="四、Context API"></a>四、Context API</h3><p>参考：<a href="https://togoblog.cn/react-component-communication/#toc-heading-5">https://togoblog.cn/react-component-communication/#toc-heading-5</a></p><h3 id="五、新的生命周期"><a href="#五、新的生命周期" class="headerlink" title="五、新的生命周期"></a>五、新的生命周期</h3><h4 id="旧的生命周期"><a href="#旧的生命周期" class="headerlink" title="旧的生命周期"></a>旧的生命周期</h4><p>我们先看看 <code>React 16</code> 之前的生命周期图：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/react15-lifecycle.png" alt="Reactv15生命周期图"></p><p>如上图所示，可以把组件的生命周期大致分为三个阶段：</p><ul><li>挂载阶段 (Mount)</li><li>更新阶段 (Update)</li><li>卸载阶段 (Unmount)</li></ul><h5 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h5><p><strong>constructor()</strong></p><pre><code>挂载之前调用一次，可以初始化state</code></pre><p><strong>getDefaultProps()</strong></p><pre><code>设置默认的 props ，也可以用 dufaultProps 设置组件的默认属性。</code></pre><p><strong>getInitialState()</strong></p><pre><code>初始化 state，可以直接在 constructor 中定义 this.state</code></pre><p><strong>componentWillMount()</strong></p><pre><code>componentWillMount 会在组件 render 之前执行，并且永远都只执行一次。componentWillMount 和挂载是同步执行的，意味着执行完这个钩子，立即挂载。由于这个方法始终只执行一次，所以如果在这里定义了 setState 方法之后，页面永远都只会在加载前更新一次。</code></pre><p><strong>render()</strong></p><pre><code>react 最重要的步骤，创建虚拟 dom，进行 diff 算法，更新 dom 树都在此进行</code></pre><p><strong>componentDidMount()</strong></p><pre><code>这个方法会在组件加载完毕之后立即执行。在这个时候之后组件已经生成了对应的 DOM 结构，可以通过 this.getDOMNode() 来进行访问。如果你想和其他 JavaScript 框架一起使用，可以在这个方法中执行 setTimeout, setInterval 或者发送 AJAX 请求等操作(防止异部操作阻塞UI)。</code></pre><h5 id="更新阶段"><a href="#更新阶段" class="headerlink" title="更新阶段"></a>更新阶段</h5><p><strong>componentWillReceivePorps(nextProps)</strong></p><pre><code>在组件接收到一个新的 prop 时被执行。这个方法在初始化 render 时不会被调用。</code></pre><p><strong>shouldComponentUpdate(nextProps, nextState)</strong></p><pre><code>组件接收到新的 props 或者 state 时调用，在初始化时或者使用 forceUpdate 时不被执行。return true 就会更新 dom（使用diff算法更新），return false 能阻止更新（不调用render）。可以在你确认不需要更新组件时使用，提升性能。</code></pre><p><strong>componentWillUpdata(nextProps, nextState)</strong></p><pre><code>组件挂载时不调用，只有在组件将要更新时才调用。shouldComponentUpdate 生命周期钩子返回 true，或者调用 this.forceUpdate 之后，会立即执行该生命周期钩子。要特别注意，componentWillUpdate 生命周期钩子每次更新前都会执行，所以在这里调用 this.setState 非常危险，有可能会没完没了。</code></pre><p><strong>render()</strong></p><pre><code>react 最重要的步骤，创建虚拟 dom，进行 diff 算法，更新 dom 树都在此进行</code></pre><p><strong>componentDidUpdate(nextProps, nextState, snapshot)</strong></p><pre><code>这是组件更新之后触发的生命周期钩子。componentDidUpdate 生命周期钩子每次更新后都会执行，所以在这里调用 this.setState 也非常危险，有可能会没完没了。搭配 getSnapshotBeforeUpdate 生命周期钩子(React 16 中的新生命周期)使用的时候，第三个参数是 getSnapshotBeforeUpdate 的返回值。</code></pre><h5 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h5><p><strong>componentWillUnmount()</strong></p><pre><code>组件渲染之后，卸载之前的生命周期钩子，只调用一次。React的最佳实践是，组件中用到的事件监听器、订阅器、定时器都要在这里销毁。事件监听指的是下面这种情况：componentDidMount() {    document.addEventListener(&#39;click&#39;, () =&gt; {});}下面这种 React 会自动销毁render(    return (        &lt;button onClick={this.handleClick}&gt;click&lt;/button&gt;    );)</code></pre><h4 id="新的生命周期"><a href="#新的生命周期" class="headerlink" title="新的生命周期"></a>新的生命周期</h4><p>再来看下 <code>React v16.4</code> 的生命周期图：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/reactv16.4-lifecycle.jpg" alt="Reactv16.4生命周期图"></p><p><code>React16</code> 废弃的三个生命周期函数：</p><ul><li><p>componentWillMount</p></li><li><p>componentWillReceiveProps</p></li><li><p>componentWillUpdate</p><p>目前在 <code>React 16</code> 版本中，官方并未完全删除这三个函数，而且新增了<code>UNSAFE_componentWillMount</code>， <code>UNSAFE_componentWillReceiveProps</code>，<code>UNSAFE_componentWillUpdate</code>三个函数，计划在 <code>React 17</code> 的版本中移除掉这三个函数，目的是为了做向下兼容，为什么会移除这三个生命周期函数呢？</p></li></ul><p><strong>componentWillMount</strong></p><pre><code>很多人会有一个误区：这个钩子是请求数据然后将数据插入元素一同挂载的最佳时机。其实 componentWillMount 和挂载是同步执行的，意味着执行完这个钩子，立即挂载。而向服务器请求数据是异步执行的。所以无论请求多么快，都要排在同步任务之后再处理。也就是说，永远不可能在这里将数据插入元素一同挂载。并不是说不能在这里请求数据，而是达不到你臆想的效果。它被废弃的原因主要有：- 。- 如果它声明了定时器或者订阅器，在服务端渲染中，componentWillUnmount 生命周期钩子中的清除代码不会生效。因为如果组件没有挂载成功，componentWillUnmount 是不会执行的。没有挂载就没有卸载。- 在异步渲染中，它的表现不稳定。初始化 this.state 应该在 constructor 生命周期钩子中完成，请求数据应该在 componentDidMount 生命周期钩子中完成，所以本来它就没什么用。可能当初创造它是为了成双成对吧，所以才被完全废弃了。</code></pre><p><strong>componentWillReceiveProps</strong></p><pre><code>componentWillReceiveProps 生命周期钩子只有一个参数，更新后的 props。该声明周期函数可能在两种情况下被触发：- 组件接收到了新的属性。- 组件没有收到新的属性，但是由于父组件重新渲染导致当前组件也被重新渲染。初始化时并不会触发该生命周期钩子。因为 Fiber 机制的引入，这个生命周期钩子有可能会多次触发。</code></pre><p><strong>componentWillUpdate</strong></p><pre><code>shouldComponentUpdate 生命周期钩子返回 true，或者调用 this.forceUpdate 之后，会立即执行该生命周期钩子。要特别注意，componentWillUpdate 生命周期钩子每次更新前都会执行，所以在这里调用 this.setState 非常危险，有可能会没完没了。同样，因为Fiber机制的引入，这个生命周期钩子有可能会多次调用。</code></pre><p>新增加了两个新的生命周期函数</p><ul><li>static getDerivedStateFromProps</li><li>getSnapshotBeforeUpdate</li></ul><h5 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h5><pre><code>static getDerivedStateFromProps(nextProps, prevState)，它是一个静态方法，所以不能再这个函数里面使用 this；这个函数有两个参数： props 和 state，分别指接收到的新参数和当前的 state 对象；该函数会返回一个对象用来更新当前的 state 对象，如果不需要更新状态可以返回 null 来表明不需要更新任何状态；该函数会在挂载时，接收到新的 props，调用了 setState 和 forceUpdate 时被调用，简单点说就是：getDerivedStateFromProps 无论是在挂载阶段还是更新阶段，也无论是什么引起的更新，统统都会被调用，在首次渲染的时候也会被触发 (注意：v16.3 中，setState 时、forceUpdate 时不会执行这个方法，v16.4 修复了这个问题)。和 componentWillReceiveProps 不同，componentWillReceiveProps 只在父组件引起的更新时才会触发。</code></pre><p>一个简单的例子：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// componentWillReceiveProps(nextProps) {</span>  <span class="token comment" spellcheck="true">//   console.log('Running A.componentWillReceiveProps()');</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Being called'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>name <span class="token operator">!==</span> prevState<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Running A.getDerivedStateFromProps()'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> counter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> counter<span class="token operator">++</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A.render()'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hello <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> counter<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>World<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> B<span class="token punctuation">;</span></code></pre><p><code>getDerivedStateFromProps</code> 是用来替代 <code>componentWillReceiveProps</code> 的，应对 <code>state</code> 需要关联 <code>props</code> 变化的场景。它的作用就是让组件根据父组件传来的 <code>props</code>，判断是否需要更新自己的 <code>state</code> ，这种state叫做衍生state。返回的对象就是要增量更新的state。</p><p>将 <code>getDerivedStateFromProps</code> 设计成静态函数，目的是保持该方法的纯粹，它就是用来定义衍生state的，能做的操作局限在根据 <code>props</code> 和 <code>state</code> 决定新的 <code>state</code>，除此之外不应该在里面执行任何操作。</p><p>一般使用场景如下：</p><ol><li>无条件的根据 <code>props</code> 更新 <code>state</code></li><li>当 <code>props</code> 和 <code>state</code> 的不匹配情况更新 <code>state</code></li></ol><h5 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h5><pre><code>顾名思义，保存状态快照用的。它会在组件即将挂载时调用，注意，是即将挂载。它甚至调用的比 render 还晚，由此可见 render 并没有完成挂载操作，而是进行构建抽象 UI 的工作。getSnapshotBeforeUpdate 执行完就会立即调用 componentDidUpdate 生命周期钩子。它是做什么用的呢？有一些状态，比如网页滚动位置，不需要它持久化，只需要在组件更新以后能够恢复原来的位置即可。getSnapshotBeforeUpdate 生命周期钩子返回的值会被 componentDidUpdate 的第三个参数接收，我们可以利用这个通道保存一些不需要持久化的状态，用完即可舍弃。很显然，它是用来取代 componentWillUpdate 生命周期钩子的。意思就是说呀，开发者一般用不到它。</code></pre><blockquote><p>本篇内容代码：<a href="https://github.com/IDeepspace/React-Workshop/tree/master/react-16-api" target="_blank" rel="noopener">https://github.com/IDeepspace/React-Workshop/tree/master/react-16-api</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Portals </tag>
            
            <tag> ErrorBoundary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些比较有用的 JS 技巧</title>
      <link href="/javascript-tricks/"/>
      <url>/javascript-tricks/</url>
      
        <content type="html"><![CDATA[<h4 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> j <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 1, 2, 3 ]</span></code></pre><h4 id="2、过滤错误值"><a href="#2、过滤错误值" class="headerlink" title="2、过滤错误值"></a>2、过滤错误值</h4><p>将 <code>0</code>， <code>undefined</code>，<code>null</code>， <code>false</code> 等错误值从数组中剔除：</p><pre class=" language-javascript"><code class="language-javascript">myArray  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Get rid of bad values</span>  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><a id="more"></a><h4 id="3、创建一个空对象"><a href="#3、创建一个空对象" class="headerlink" title="3、创建一个空对象"></a>3、创建一个空对象</h4><p>你当然可以使用 <code>{}</code> 来创建一个空对象，但是这个对象依旧有 <code>__proto__</code> 、 <code>hasOwnProperty</code> 和对象上的一些其它方法。可以这样创建一个纯的空对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> dict <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// dict.__proto__ === "undefined"</span><span class="token comment" spellcheck="true">// No object properties exist until you add them</span></code></pre><h4 id="4、合并对象"><a href="#4、合并对象" class="headerlink" title="4、合并对象"></a>4、合并对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'David Walsh'</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'Male'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> tools <span class="token operator">=</span> <span class="token punctuation">{</span> computer<span class="token punctuation">:</span> <span class="token string">'Mac'</span><span class="token punctuation">,</span> editor<span class="token punctuation">:</span> <span class="token string">'Atom'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> attributes <span class="token operator">=</span> <span class="token punctuation">{</span> handsomeness<span class="token punctuation">:</span> <span class="token string">'Extreme'</span><span class="token punctuation">,</span> hair<span class="token punctuation">:</span> <span class="token string">'Brown'</span><span class="token punctuation">,</span> eyes<span class="token punctuation">:</span> <span class="token string">'Blue'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> summary <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>person<span class="token punctuation">,</span> <span class="token operator">...</span>tools<span class="token punctuation">,</span> <span class="token operator">...</span>attributes<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Object {  "computer": "Mac",  "editor": "Atom",  "eyes": "Blue",  "gender": "Male",  "hair": "Brown",  "handsomeness": "Extreme",  "name": "David Walsh",}*/</span></code></pre><h4 id="5、Require-Function-Parameters"><a href="#5、Require-Function-Parameters" class="headerlink" title="5、Require Function Parameters"></a>5、Require Function Parameters</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isRequired <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'param is required'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token function">isRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This will throw an error because no name is provided</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This will also throw an error</span><span class="token function">hello</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// These are good!</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6、为解构赋值添加别名"><a href="#6、为解构赋值添加别名" class="headerlink" title="6、为解构赋值添加别名"></a>6、为解构赋值添加别名</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Grabs obj.x as { x }</span><span class="token keyword">const</span> <span class="token punctuation">{</span> x <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Grabs obj.x as { otherName }</span><span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> otherName <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span></code></pre><h4 id="7、获取查询字符串参数"><a href="#7、获取查询字符串参数" class="headerlink" title="7、获取查询字符串参数"></a>7、获取查询字符串参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Assuming "?post=1234&amp;action=edit"</span><span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "edit"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["edit"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "?post=1234&amp;action=edit"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'active'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "?post=1234&amp;action=edit&amp;active=1"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 计算属性与侦听器</title>
      <link href="/vue-computed-watch/"/>
      <url>/vue-computed-watch/</url>
      
        <content type="html"><![CDATA[<!-- ## Vue 计算属性与侦听器 --><p>这一节我们一起学习 <code>vue</code> 中的计算属性(<code>computed properties</code>)和侦听器(<code>watch</code>)。</p><p>在之前，我们学习过 <code>vue</code> 表达式插值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{ message.split('').reverse().join('') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>如果在模板中放入太多的逻辑会让模板过重且难以维护。我们可以把方法写在事件处理函数里面，并且在构造器内部通过 <code>this</code> 调用。<br><a id="more"></a><br><code>Html</code> 代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ this.reversedMessageMethod() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p><code>JS</code> 代码：</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">reversedMessageMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><blockquote><p>这里要提醒一下，我们不可以把事件处理函数写成箭头函数，因为这里的 <code>this</code> 需要指向 <code>vue</code> 实例。</p></blockquote><h3 id="一、过滤器"><a href="#一、过滤器" class="headerlink" title="一、过滤器"></a>一、过滤器</h3><p>其实，模板中的处理逻辑是不适合放在事件处理函数里的，即使可以这么做。事件处理函数应该专注于处理事件，我们应该让它变得纯粹。在 <code>vue</code> 中， 允许我们自定义过滤器(<code>filters</code>)，可被用于一些常见的文本格式化。</p><p>过滤器可以用在两个地方：<strong>双花括号插值和 <code>v-bind</code> 表达式</strong> (后者从 <code>2.1.0+</code> 开始支持)。过滤器应该被添加在 <code>JavaScript</code> 表达式的尾部，由 <code>|</code> 符号指示，我们看看怎么用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hello<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ message.split('').reverse().join('') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- add this --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ message | reverseString }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'Welcome to Your Vue.js App'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add this  </span>  filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">reverseString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>代码增多了，但是整体的语义化却更好。从 <code>filters</code> 的用法我们可以看出：</p><ul><li>它是一对一的，对<strong>单个数据</strong>进行过滤，可以进行传参</li><li>适用于同方法、不同参数的情况</li></ul><p>所以，<code>filters</code> 的缺点就很明显了：<strong>如果要计算结合多个数据不同变化的情况，过滤器就无法适用了</strong>。这就要用到我们下面提到的<strong>计算属性</strong>了。</p><h3 id="二、计算属性"><a href="#二、计算属性" class="headerlink" title="二、计算属性"></a>二、计算属性</h3><p>在 <code>vue</code> 中，也为我们提供了<code>computed</code> 这个选项来处理数据，我们称它为计算属性。当逻辑复杂的时候，我们就应当使用 <code>computed</code> 计算属性了。计算属性使用起来非常简单，我们还是用上面的例子，使用计算属性来修改模板中的逻辑：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hello<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ message.split('').reverse().join('') }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ message | reverseString }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ this.reversedMessageMethod() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- add this --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ reversedMessage }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'Welcome to Your Vue.js App'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">reverseString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>      value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add this</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">reversedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">reversedMessageMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>和 <code>method</code> 选项的使用非常相似。<strong>我们可以像绑定普通属性一样在模板中绑定计算属性。</strong></p><p>这两种方式的最终结果确实是完全相同的。然而，不同的是：<strong>计算属性是基于它们的依赖进行缓存的</strong>。什么意思呢？</p><p><strong>只在相关依赖发生改变时它们才会重新求值</strong>。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数；而当数据有变化时，只要有一个数据发生变化，则会重新计算，来更新视图的改变。相比之下，每当触发重新渲染时，调用 <code>methods</code> 中的方法将<strong>总会</strong>再次执行函数。</p><blockquote><p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong> 。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 <code>getter</code>！</p></blockquote><p>我们来看看计算属性的具体应用场景：</p><p><strong>1、微博发文</strong></p><p>发微博的时候，有字数限制。在我们输入文字的时候，输入框会计算我们还可以输入多少字：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>content<span class="token punctuation">'</span></span> <span class="token attr-name">:maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>totalcount<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>你还可以输入{{reduceCount}}字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      totalcount<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 总共只给输入200字</span>      content<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalcount <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>通过一直监听输入的字符的长度来触发 <code>computed</code> 里的 <code>reduceCount</code> 方法，重新计算，然后返回给视图，让视图作出相应的变化。接下来我们再看一个例子。</p><p><strong>2、足球比赛</strong></p><p>这个例子是一个足球比赛的结果播报板，我们先看看最终的效果，再看代码：</p><p><strong>效果 ：</strong></p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-computed.gif" alt="match"></p><p><strong>代码：</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>比赛时间：{{time}}s<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>直播播报：{{result}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>team<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>中国队进球数：{{team.china}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>team.china++<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击中国队进一球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>韩国队进球数：{{team.korea}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>team.korea++<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>点击韩国队进一球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">===</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      time<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      team<span class="token punctuation">:</span> <span class="token punctuation">{</span>        china<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        korea<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">'中国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">'韩国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">'双方僵持'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'中国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'韩国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token string">'平局'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.team</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#27ae60</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1</span>rem<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>通过上面的例子，我们就可以很清楚 <code>computed</code> 的作用了：观察一个或者多个数据，只要依赖的数据发生变化的时，这个函数就会重新计算。这样我们就可以通过观察所有数据来维护一个状态，也就是所谓的返回一个状态值。</p><h3 id="三、侦听器"><a href="#三、侦听器" class="headerlink" title="三、侦听器"></a>三、侦听器</h3><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。<code>vue</code> 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。</p><p><code>computed</code> 和 <code>watch</code> 都可以做同一件事，两个选项都是对数据进行时时监听。但是它们也有不同：</p><ul><li><code>computed</code> 对<strong>多数据</strong>变动进行监听，<strong>返回一个状态</strong>，维护一个状态</li><li><code>watch</code> 是对<strong>一个数据</strong>监听，在数据变化时，会<strong>返回两个值</strong>，一个是 <code>value</code>(当前值)，二是 <code>oldvalue</code> 是变化前的值</li></ul><p>我们也可以用 <code>watch</code> 选项来改造上面的足球比赛的例子，添加一个 <code>watch</code> 选项：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">===</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      time<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      team<span class="token punctuation">:</span> <span class="token punctuation">{</span>        china<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        korea<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add this  </span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">time</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldval<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'中国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'韩国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'双方僵持'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'中国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>team<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'韩国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'平局'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">team</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldval<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">&lt;</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>china <span class="token operator">></span> value<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'中国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'韩国队领先'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'双方僵持'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>china <span class="token operator">></span> value<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'中国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>china <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>korea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'韩国队赢'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token string">'平局'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>可以看出跟使用 <code>computed</code> 选项是差不多一致的。那 <code>watch</code> 有什么应用场景呢？</p><p>有一个很常见的场景：图片的预加载。当图片数量比较大的时候，为了保证页面图片都加载出来的时候，才把主页面给显示出来，然后再进行一些 <code>ajax</code> 请求，或者逻辑操作，这个时候用 <code>computed</code> 就无法实现了，只能用 <code>watch</code> ，看看代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>show<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://img.alicdn.com/simba/img/TB14sYVQXXXXXc1XXXXSutbFXXX.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>//img.alicdn.com/tfs/TB1iZ6EQXXXXXcsXFXXXXXXXXXX-520-280.jpg_q90_.webp<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://img.alicdn.com/simba/img/TB1C0dOPXXXXXarapXXSutbFXXX.jpg<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>//img.alicdn.com/tfs/TB1iZ6EQXXXXXcsXFXXXXXXXXXX-520-280.jpg_q90_.webp<span class="token punctuation">'</span></span> <span class="token attr-name">alt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      show<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      img<span class="token punctuation">.</span>src <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">count</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> oldval<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'加载完毕'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>        <span class="token comment" spellcheck="true">// 然后可以对后台发送一些ajax操作</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们可以发现等四张图片都加载完毕的时候页面才显示出来。所以当我们想要在数据变化响应时，执行异步操作或开销较大的操作，就需要使用 <code>watch</code> 了。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>过滤器 <code>filter</code> :</p><ul><li>一对一，对单个数据进行过滤，可以进行传参</li><li>适用于同方法、不同参数的情况</li><li>不适用于结合多个数据变化的情况</li></ul><p>计算属性 <code>computed</code> :</p><ul><li>监听一个或者多个数据来维护返回一个状态值 </li><li>只在相关依赖发生改变时它们才会重新求值</li></ul><p>侦听器 <code>watch</code> :</p><ul><li>对一个数据监听</li><li>在数据变化时，会返回两个值，一个是 <code>value</code>(当前值)，二是 <code>oldvalue</code> 是变化前的值</li></ul><blockquote><p>注：本节内容的 <code>demo</code> 均来自 <a href="https://juejin.im/post/58d8806bac502e0058d778a1" target="_blank" rel="noopener">混元霹雳手</a>，感谢作者！</p></blockquote><blockquote><p>本节内容代码：<a href="https://github.com/IDeepspace/Hello-Vue/tree/master/vue-computed-watch" target="_blank" rel="noopener">https://github.com/IDeepspace/Hello-Vue/tree/master/vue-computed-watch</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue 计算属性 </tag>
            
            <tag> vue 侦听器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 实例的生命周期</title>
      <link href="/vue-lifecycle/"/>
      <url>/vue-lifecycle/</url>
      
        <content type="html"><![CDATA[<!-- ## Vue 实例的生命周期 --><p>在 <code>Vue</code> 中，每个实例都有自己的一个完整的生命周期，包括开始创建 —— 初始化数据 —— 编译模板 —— 将实例挂载到 <code>DOM</code> —— 渲染 —— 更新 —— 渲染 —— 卸载等一系列过程。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这样我们就可以在实例生命周期的不同阶段做一些需要做的事情。</p><h3 id="一、vue-实例和组件的区别"><a href="#一、vue-实例和组件的区别" class="headerlink" title="一、vue 实例和组件的区别"></a>一、vue 实例和组件的区别</h3><p>这里可能会有个小疑惑，怎么突然又说是 <code>Vue</code> 实例呢？实例和组件有什么区别吗？</p><p>在 <code>SPA（Single Page Application）</code> 应用中，我们只会创建一个 <code>Vue</code> 根实例，整个应用都是通过这个根实例启动的。在通过 <code>vue-cli</code> 脚手架生成的项目中， <code>main.js</code> 里创建了 <code>Vue</code> 根实例：<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>new Vue()</code>创建一个 <code>Vue</code> 实例。在实例化 <code>Vue</code> 时，需要传入一个选项对象，它可以包含挂载元素 <code>el</code>、路由<code>router</code>、模板 <code>template</code>、数据 <code>data</code>、方法 <code>methods</code>、生命周期钩子等选项。</p><p><strong><code>Vue</code> 组件是被扩展的 <code>Vue</code> 实例。</strong>同 <code>Vue</code> 实例类似，它也需要传入一个选项对象，包含数据、模板、生命周期钩子函数等等。在前面我们只介绍了<strong>单文件组件</strong>的方式来创建组件，也可以这样来创建一个组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义一个名为 button-counter 的新组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button v-on:click="count++">You clicked me {{ count }} times.&lt;/button>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>可以发现，和创建 <code>Vue</code> 实例非常的类似，<strong>所有的 <code>Vue</code> 组件同时都是 <code>Vue</code> 的实例</strong>。所以我们说：<strong>实例的生命周期也叫做组件的生命周期。</strong> </p><h3 id="二、Vue-实例的生命周期"><a href="#二、Vue-实例的生命周期" class="headerlink" title="二、Vue 实例的生命周期"></a>二、Vue 实例的生命周期</h3><p><code>Vue</code> 实例从创建到销毁的过程，就是生命周期。文章的开头我们提到了<strong>生命周期钩子函数</strong>，它是框架提供的函数，能够让开发人员的代码参与到组件的生命周期中。也就是说，通过钩子函数，可以控制组件的行为。这里有两个点需要记住：</p><ul><li>在 <code>Vue</code> 实例的的生命周期中，会自动调用这些生命周期函数，我们只需要提供这些钩子函数即可；</li><li>生命周期钩子函数的名字是固定的，不可更改，不可以自定义或者添加钩子函数。</li></ul><p><strong>生命周期图示：</strong></p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-lifecycle.png" alt="lifecycle"></p><p>图中，红色矩形框代表着在生命周期对应阶段的钩子函数。</p><h3 id="三、生命周期函数"><a href="#三、生命周期函数" class="headerlink" title="三、生命周期函数"></a>三、生命周期函数</h3><p>我们通过三种案例来学习生命周期函数：</p><ul><li>单组件的生命周期</li><li>父子组件的生命周期</li><li>兄弟组件的生命周期</li></ul><p>案例中，通过打开控制台查看钩子函数打印的内容来学习。</p><h4 id="1、单组件的生命周期"><a href="#1、单组件的生命周期" class="headerlink" title="1、单组件的生命周期"></a>1、单组件的生命周期</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>单组件的生命周期（打开控制台查看）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>更新 {{dataVar}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleDestroy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>销毁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">const</span> compName <span class="token operator">=</span> <span class="token string">'single'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'SingleComLifecycle'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dataVar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeCreate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--created`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeMount`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--mounted`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeUpdate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--updated`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeDestroy`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--destroyed`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#35b880</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>初始化组件时打印：</p><pre><code>--single--beforeCreate--single--created--single--beforeMount--single--mounted</code></pre><p><code>data</code> 中的数据变化时打印：</p><pre><code>--single--beforeUpdate--single--updated</code></pre><p>组件销毁时打印：</p><pre><code>--single--beforeDestroy--single--destroyed</code></pre><p>所以我们可以得出以下结论：</p><ul><li><p>初始化组件时，仅执行了 <code>beforeCreate/Created/beforeMount/mounted</code> 四个钩子函数</p></li><li><p>当改变 <code>data</code> 中定义的变量（响应式变量）时，会执行 <code>beforeUpdate/updated</code> 钩子函数</p></li><li><p>当切换组件（当前组件未缓存）时，会执行 <code>beforeDestory/destroyed</code> 钩子函数</p></li><li><p>初始化和销毁时的生命钩子函数均只会执行一次，<code>beforeUpdate/updated</code> 可多次执行</p></li></ul><h4 id="2、父子组件的生命周期"><a href="#2、父子组件的生命周期" class="headerlink" title="2、父子组件的生命周期"></a>2、父子组件的生命周期</h4><p>创建一个父组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>父子组件的生命周期（打开控制台查看）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-com</span> <span class="token attr-name">:compName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar.toString()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-com</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>父组件更新 {{dataVar}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleDestroy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>父组件销毁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> ChildCom <span class="token keyword">from</span> <span class="token string">'./ChildCom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> COMPONENT_NAME <span class="token operator">=</span> <span class="token string">'parent'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dataVar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'child-com'</span><span class="token punctuation">:</span> ChildCom<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeCreate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--created`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeMount`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--mounted`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeUpdate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--updated`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeDestroy`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--destroyed`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#2196f3</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>创建一个子组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>父组件传递的props：{{compName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>子组件更新 {{dataVar}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleDestroy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>子组件销毁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dataVar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    compName<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">` --此时data未初始化--child--beforeCreate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--created`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--beforeMount`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--mounted`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--beforeUpdate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--updated`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--beforeDestroy`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--child--destroyed`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#35b880</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>初始化组件时打印：</p><pre><code>--parent--beforeCreate--parent--created--parent--beforeMount--此时data未初始化--child--beforeCreate--1--child--created--1--child--beforeMount--1--child--mounted--parent--mounted</code></pre><p>当子组件 <code>data</code> 中的值变化时打印：</p><pre><code>--1--child--beforeUpdate--1--child--updated</code></pre><p>当父组件 <code>data</code> 中的值变化时打印（子组件接受了父组件传递的 <code>props</code>）：</p><pre><code>--parent--beforeUpdate--2--child--beforeUpdate--2--child--updated--parent--updated</code></pre><p>当子组件销毁时打印：</p><pre><code>--1--child--beforeDestroy--1--child--destroyed</code></pre><p>当父组件销毁时打印：</p><pre><code>--parent--beforeDestroy--1--child--beforeDestroy--1--child--destroyed--parent--destroyed</code></pre><p>结论：</p><ul><li>仅当子组件完成挂载后，父组件才会挂载</li><li>父子组件在 <code>data</code> 变化中是分别监控的，但是在更新 <code>props</code> 中的数据是关联的</li><li>销毁父组件时，先将子组件销毁后才会销毁父组件</li></ul><h4 id="3、兄弟组件的生命周期"><a href="#3、兄弟组件的生命周期" class="headerlink" title="3、兄弟组件的生命周期"></a>3、兄弟组件的生命周期</h4><p>创建一个单组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>更新 {{dataVar}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleDestroy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>销毁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dataVar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    compName<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'single'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--此时data未初始化--beforeCreate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--created`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeMount`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--mounted`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeUpdate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--updated`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeDestroy`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>compName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--destroyed`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#35b880</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>引入两个单组件，构建兄弟组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>兄弟组件的生命周期（打开控制台查看）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>兄弟1      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>single</span> <span class="token attr-name">compName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>cihld1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>single</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>兄弟2      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>single</span> <span class="token attr-name">compName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>child2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>single</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>兄弟两个的父亲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dataVar +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>更新 {{dataVar}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>handleDestroy<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>销毁<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> Single <span class="token keyword">from</span> <span class="token string">'./Single'</span><span class="token punctuation">;</span><span class="token keyword">const</span> COMPONENT_NAME <span class="token operator">=</span> <span class="token string">'parent'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      dataVar<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    single<span class="token punctuation">:</span> Single<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeCreate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--created`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeMount`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--mounted`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeUpdate`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--updated`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--beforeDestroy`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>COMPONENT_NAME<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--destroyed`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#2196f3</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>初始化组件时打印：</p><pre><code>--parent--beforeCreate--parent--created--parent--beforeMount--此时data未初始化--beforeCreate--cihld1--created--cihld1--beforeMount--此时data未初始化--beforeCreate--child2--created--child2--beforeMount--cihld1--mounted--child2--mounted--parent--mounted</code></pre><p>当 <code>child1</code> 更新和销毁时，打印：</p><pre><code>--cihld1--beforeUpdate--cihld1--updated--cihld1--beforeDestroy--cihld1--destroyed</code></pre><p>当 <code>child2</code> 更新和销毁时，打印：</p><pre><code>--cihld2--beforeUpdate--cihld2--updated--cihld2--beforeDestroy--cihld2--destroyed</code></pre><p>当父组件销毁时，打印：</p><pre><code>--parent--beforeDestroy--cihld1--beforeDestroy--cihld1--destroyed--child2--beforeDestroy--child2--destroyed--parent--destroyed</code></pre><p>结论：</p><ul><li>组件的初始化（mounted之前）分开进行，挂载是从上到下依次进行</li><li>当没有数据关联时，兄弟组件之间的更新和销毁是互不关联的</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 组件间的通讯</title>
      <link href="/vue-pass-data-in-components/"/>
      <url>/vue-pass-data-in-components/</url>
      
        <content type="html"><![CDATA[<!-- ## Vue 组件间的通讯 --><p>这一节我们一起看看 <code>vue</code> 中组件间的数据是如何传递的。</p><p>前面，我们已经初步建立了 <code>vue</code> 组件化的思想，知道如何创建组件、引入组件以及如何在组件里的一些功能。接下来，我们来学习怎么建立组件之间的连接，也就是组件的通讯。直白一点说就是：在一个组件中做的操作如何更新到应用程序中的其他组件。</p><p>这篇文章会从两个方便介绍 <code>vue</code> 组件间的通讯：</p><pre class=" language-htm"><code class="language-htm">- 父子组件之间的通讯- 兄弟组件之间的通讯</code></pre><a id="more"></a><h3 id="一、父子组件之间的通讯"><a href="#一、父子组件之间的通讯" class="headerlink" title="一、父子组件之间的通讯"></a>一、父子组件之间的通讯</h3><h4 id="1、父组件向子组件通讯"><a href="#1、父组件向子组件通讯" class="headerlink" title="1、父组件向子组件通讯"></a>1、父组件向子组件通讯</h4><p>在 <code>vue</code> 中，将数据从父组件传递到子组件，可以用 <code>props</code> 来实现(这一点，在 <code>React</code> 中也是如此)。</p><p><code>props</code> 指的是从外部（父组件）设置的属性。同时，为了告诉 <code>vue</code> 子组件需要从自已的外部（父组件）接收数据，需要在子组件的 <code>vue</code> 对象中设置 <code>props</code> 属性。这个属性是一个 <code>String</code> 数组，每个字符串表示一个可以从父组件接收的属性。</p><p><strong>我们需要做两件事情：父组件使用属性绑定、子组件使用 props 对象接收。</strong> 看个例子：</p><ul><li>父组件使用属性绑定 ：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span> <span class="token attr-name">:run</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span> <span class="token attr-name">:home</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>this<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildCom</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> ChildCom <span class="token keyword">from</span> <span class="token string">'./ChildCom'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'我是父组件里面的数据'</span><span class="token punctuation">,</span> <span class="token string">'我来自父组件'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ChildCom<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是父组件里面的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们在父组件 <code>ParentCom</code> 里面引入了子组件 <code>ChildCom</code> 。为了将数据从父组件传到子组件，我们在子组件 <code>ChildCom</code> 上绑定了几个属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childCom</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span> <span class="token attr-name">:run</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span> <span class="token attr-name">:home</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>this<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>childCom</span><span class="token punctuation">></span></span></code></pre><p>绑定属性的时候，属性名前需要加冒号。这里我们绑定了三个属性，父组件的 <code>data</code> 中的 <code>list</code> 、<code>methods</code> 中的 <code>run</code> 方法以及指向父组件的 <code>this</code>。</p><ul><li>子组件使用 props 对象接收 ：</li></ul><p>接下来，我们创建一个 <code>ChildCom</code> 组件，通过子组件的 <code>props</code> 选项来获得父组件传过来的数据：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item in list<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>buttons<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>执行父组件的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>getParent()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取父组件的数据和方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">,</span> <span class="token string">'home'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postcss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.list</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">6</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#35b880</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>子组件的 <code>props</code> 中接收了父组件传递下来的属性。<strong>需要注意的是，<code>props</code> 字符串数组中的值（<code>prop</code>）要和在父组件中为子组件绑定属性的属性名保持一致。</strong></p><p>这里我们加了一些样式，在 <code>App.vue</code> 中引入父组件 <code>ParentCom</code> ，打开浏览器会看到：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-1.png" alt="父组件向子组件传递"></p><p>这样，在子组件中就拿到了父组件传递下来的数据和方法以及父组件本身，点击按钮就可以查看到父组件传递给子组件的数据。</p><h4 id="2、子组件向父组件通讯"><a href="#2、子组件向父组件通讯" class="headerlink" title="2、子组件向父组件通讯"></a>2、子组件向父组件通讯</h4><p>前面我们知道了父组件如何向子组件通讯，那子组件如何向父组件通讯呢？这里介绍两种方式：</p><ul><li>子组件触发事件，父组件监听事件并作出数据改变</li><li>父组件将变更数据的方法以 <code>props</code> 的形式传给子组件（借鉴 react 的父子通讯方式）</li></ul><h5 id="2-1-监听事件"><a href="#2-1-监听事件" class="headerlink" title="2.1 监听事件"></a>2.1 监听事件</h5><p>首先在子组件 <code>ChildCom</code> 的 <code>&lt;template&gt;</code> 中添加一个新的标签 <code>button</code>。在这个 <code>button</code> 上添加一个<code>click</code>事件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>buttons<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- add this --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>submit(<span class="token punctuation">"</span>我是子组件传递给父组件的数据<span class="token punctuation">"</span>)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>子组件触发更改父组件的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>当我们点击这个按钮的时候，想要执行 <code>submit</code> 方法，我们在子组件的 <code>&lt;script&gt;</code> 中添加这个方法：</p><pre class=" language-javascript"><code class="language-javascript">methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>appendToList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add this</span>  <span class="token function">submit</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addItem'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>触发事件时发出（<code>$emit</code>）自定义的事件： <code>addItem</code>  ，这里我们也给 <code>addItem</code> 事件传递了一个 <code>text</code> 参数。这样就完成了<strong>子组件发出自定义事件</strong>的过程。</p><p>接下来需要在父组件中监听子组件传递的自定义事件 <code>addItem</code> 。怎么做呢？</p><p>在父组件中给子组件绑定监听子组件中自定义的事件的方法。这就意味着我们也需要在父组件中定义这个方法。看看代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span> <span class="token attr-name">:run</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span> <span class="token attr-name">:home</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>this<span class="token punctuation">'</span></span> <span class="token attr-name">@addItem</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addItem<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildCom</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> ChildCom <span class="token keyword">from</span> <span class="token string">'./ChildCom'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'我是父组件里面的数据'</span><span class="token punctuation">,</span> <span class="token string">'我来自父组件'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ChildCom<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是父组件里面的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在子组件上绑定监听子组件中自定义事件的方法需要使用 <code>@</code> 符号，在 <code>methods</code> 中添加了 <code>addItem</code> 方法。这时候，我们打开浏览器，点击第三个按钮，就会看到子组件向父组件传递的数据了。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-2.gif" alt="子组件向父组件传递"></p><h5 id="2-2-传递-props"><a href="#2-2-传递-props" class="headerlink" title="2.2 传递 props"></a>2.2 传递 props</h5><p>传递 <code>props</code> 的意思是说在父组件里面定义改变父组件数据的方法，然后通过 <code>props</code> 传递给子组件，这样子组件就可以触发执行从父组件传递下来的方法，达到更改父组件数据的目的。这种方法借鉴了 <code>React</code> 中组件通讯的方式。看看代码：</p><p>我们依旧使用上面的代码，在 <code>ParentCom</code> 组件中将 <code>addItem</code> 方法传递给子组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span> <span class="token attr-name">:run</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span> <span class="token attr-name">:home</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>this<span class="token punctuation">'</span></span> <span class="token attr-name">@addItem</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addItem<span class="token punctuation">'</span></span> <span class="token attr-name">:addItem</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addItem<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildCom</span><span class="token punctuation">></span></span></code></pre><p>在子组件 <code>ChildCom</code> 中添加一个 <code>button</code> ，在它的点击事件中执行父组件的 <code>addItem</code> 方法，所以，我们也需要在子组件的 <code>props</code> 选项中把 <code>addItem</code> 方法添加进去：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>list<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item in list<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>item<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>buttons<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>run<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>执行父组件的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>getParent()<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>获取父组件的数据和方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>submit(<span class="token punctuation">"</span>我是子组件传递给父组件的数据<span class="token punctuation">"</span>)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>子组件触发更改父组件的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- add this --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addItem(<span class="token punctuation">"</span>我是通过子组件props方式传递给父组件的数据<span class="token punctuation">"</span>)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>子组件触发更改父组件的数据-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>home<span class="token punctuation">.</span>appendToList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">submit</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'addItem'</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// add this</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'run'</span><span class="token punctuation">,</span> <span class="token string">'home'</span><span class="token punctuation">,</span> <span class="token string">'addItem'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，点击 <code>button</code> :</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-3.gif" alt="子组件向父组件传递"></p><h3 id="二、兄弟组件之间的通讯"><a href="#二、兄弟组件之间的通讯" class="headerlink" title="二、兄弟组件之间的通讯"></a>二、兄弟组件之间的通讯</h3><p>在 <code>vue</code> 中实现兄弟组件间的通讯主要有两种方法：<strong>通过父组件进行兄弟组件之间通讯、通过 <code>EventHub</code> 进行兄弟组件间通讯。</strong>为了不和上面讲述的父子组件之间通讯的代码混淆，这里我们重新新建组件来演示：</p><ul><li>父组件： <code>ParentCard</code> </li><li>两个兄弟组件：<code>BrotherCard</code> 和 <code>SisterCard</code></li></ul><h4 id="1、通过父组件进行兄弟组件之间通讯"><a href="#1、通过父组件进行兄弟组件之间通讯" class="headerlink" title="1、通过父组件进行兄弟组件之间通讯"></a>1、通过父组件进行兄弟组件之间通讯</h4><p>简单来说，就是让兄弟组件通过一个共同父组件进行通讯。</p><p>首先创建父组件 <code>ParentCard</code> ：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>stopCommunicate<span class="token punctuation">'</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>showButton<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>停止通讯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-body<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>brother-card</span> <span class="token attr-name">:messageSon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageson<span class="token punctuation">'</span></span> <span class="token attr-name">@brotherSaid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageDaughter<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-brother<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>brother-card</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sister-card</span> <span class="token attr-name">:messageDaughter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messagedaughter<span class="token punctuation">'</span></span> <span class="token attr-name">@sisterSaid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageSon<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-sister<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sister-card</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> BrotherCard <span class="token keyword">from</span> <span class="token string">'./BrotherCard'</span><span class="token punctuation">;</span><span class="token keyword">import</span> SisterCard <span class="token keyword">from</span> <span class="token string">'./SisterCard'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'ParentCard'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      messagedaughter<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      messageson<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> BrotherCard<span class="token punctuation">,</span> SisterCard <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">messageDaughter</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messagedaughter <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">messageSon</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageson <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">showButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messagedaughter <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageson<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">stopCommunicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messagedaughter <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>messageson <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">1</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">50</span>, <span class="token number">50</span>, <span class="token number">93</span>, <span class="token number">0.1</span><span class="token punctuation">)</span>,    <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">15</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.07</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.card-body</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.card-brother</span>,<span class="token class">.card-sister</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>创建 <code>BrotherCard</code> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是子组件：Brother<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageSister<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>给妹妹发消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageSon<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageSon<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'BrotherCard'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'messageSon'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">messageSister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'brotherSaid'</span><span class="token punctuation">,</span> <span class="token string">'Hi，妹妹'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>创建 <code>SisterCard</code> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是子组件：Sister<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageBrother<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>给哥哥发消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageDaughter<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageDaughter<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'SisterCard'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'messageDaughter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">messageBrother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sisterSaid'</span><span class="token punctuation">,</span> <span class="token string">'Hi，哥哥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-4.gif" alt="兄弟组件之间的通信"></p><p>在学习完父子组件之间的通讯方法之后，通过父组件进行兄弟组件的通讯就很简单了，其实就是把兄弟之间需要共享的数据提升至他们最近的父组件当中进行管理，将他们的父组件作为中间媒介（在 <code>React</code> 中把这种方式被称为状态提升）。</p><h4 id="2、通过EventHub进行兄弟间组件通讯"><a href="#2、通过EventHub进行兄弟间组件通讯" class="headerlink" title="2、通过EventHub进行兄弟间组件通讯"></a>2、通过EventHub进行兄弟间组件通讯</h4><p>在 <code>vue1.0</code> 中，组件之间的通信主要通过 <code>$dispatch</code> 沿着父链向上传播和通过 <code>$broadcast</code> 向下广播来实现。但是在 <code>vue2.0</code> 中 <code>$dispatch</code> 和 <code>$broadcast</code> 已经被<a href="https://cn.vuejs.org/v2/guide/migration.html#events-%E9%80%89%E9%A1%B9-%E7%A7%BB%E9%99%A4" target="_blank" rel="noopener">弃用</a>。</p><p><code>vue</code> 中也提供了类似 <code>Redux</code> 的组件通信和状态管理方案：<code>vuex</code>。对于中大型的项目来说，使用 <code>vuex</code> 是一个很好的选择。但是对于小型的项目来说，如果一开始就引入了 <code>vuex</code> ，是完全没必要的。</p><p><code>vue</code> 官方文档中也给出了<code>$dispatch</code>  和 <code>$broadcast</code> 最简单的升级方式就是：<strong>通过使用事件中心，允许组件自由交流，无论组件处于组件树的哪一层。</strong> <code>vue</code> 文档中把这个<strong>事件中心</strong>命名为 <code>eventHub</code>，也有很多其他教程中将其命名为 <code>eventBus</code> 。在本教程中，我们统一命名为 <code>eventHub</code> 。</p><p>我们同样基于上面的示例来做修改：<code>ParentCard</code> 组件包含了 <code>SisterCard</code> 和 <code>BrotherCard</code> 两个子组件，而且这两个子组件是兄弟组件。</p><p>首先在 <code>main.js</code> 文件中定义一个新的 <code>eventHub</code> 对象（<code>vue</code> 实例 ）:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// add this</span><span class="token keyword">export</span> <span class="token keyword">const</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// eslint-disable-line</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接着我们要做的是让  <code>eventHub</code> 实例成为 <code>BrotherCard</code> 组件中发出事件的实例，使用 <code>eventHub.$emit</code> 来替代上例中的 <code>this.$emit</code>（因为 <code>eventHub</code> 是一个 <code>vue</code> 实例，所以它可以使用 <code>$emit</code> 方法）。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是Brother组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageSister<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>给妹妹发消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fromSister<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fromSister<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> eventHub <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../main'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'BrotherCard'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    fromSister<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">messageSister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'brotherSaid'</span><span class="token punctuation">,</span> <span class="token string">'Hi，妹妹'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* eslint-disable */</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'sisterSaid'</span><span class="token punctuation">,</span> message <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fromSister <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>引入 <code>main.js</code>，并且将 <code>created()</code> 生命周期钩子添加到 <code>BrotherCard</code> 组件中。在 <code>created()</code> 钩子函数中添加 <code>eventHub</code> 启动自定义事件的监听器，监听 <code>sisterSaid</code> 这个动作。</p><p>接下来我们改造下 <code>SisterCard</code> 组件，和 <code>BrotherCard</code> 组件的改造是一样的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是Sister组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>messageBrother<span class="token punctuation">'</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btn<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>给哥哥发消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fromBrother<span class="token punctuation">'</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>fromBrother<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> eventHub <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../../main'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'SisterCard'</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    fromBrother<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">messageBrother</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sisterSaid'</span><span class="token punctuation">,</span> <span class="token string">'Hi，哥哥'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* eslint-disable */</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'brotherSaid'</span><span class="token punctuation">,</span> message <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fromBrother <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这时候，我们就不用在父组件 <code>ParentCard</code> 做任何操作了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>container<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-body<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>brother-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-brother<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>brother-card</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sister-card</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card-sister<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sister-card</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> BrotherCard <span class="token keyword">from</span> <span class="token string">'./BrotherCard'</span><span class="token punctuation">;</span><span class="token keyword">import</span> SisterCard <span class="token keyword">from</span> <span class="token string">'./SisterCard'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'ParentCard'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'brother-card'</span><span class="token punctuation">:</span> BrotherCard<span class="token punctuation">,</span>    <span class="token string">'sister-card'</span><span class="token punctuation">:</span> SisterCard<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，可以看到这样也实现了兄弟组件之间的通讯。</p><h3 id="三、全局模式"><a href="#三、全局模式" class="headerlink" title="三、全局模式"></a>三、全局模式</h3><p>这里的全局模式指的是<strong>创建全局变量和全局方法，让其他组件之间共享数据存储的模式</strong>。我们看看怎么操作：</p><p>先创建一个 <code>store.js</code> ，在这个 <code>JS</code> 文件里创建全局的变量和方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span> numbers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">addNumber</span><span class="token punctuation">(</span>newNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p>在 <code>store</code> 的 <code>state</code> 中存放了一个 <code>numbers</code> 数组和一个 <code>addNumber</code> 方法。接下来我们创建两个组件：</p><ul><li><code>NumberDisplay</code> 组件：用来显示来自 <code>store</code> 的 <code>numbers</code> 数组</li><li><code>NumberSubmit</code> 组件：允许用户向数据数组中添加一个新的数字</li></ul><p>创建 <code>NumberDisplay</code> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{ storeState.numbers }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'NumberDisplay'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      storeState<span class="token punctuation">:</span> store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>创建 <code>NumberSubmit</code> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>form<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>numberInput<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>number<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>addNumber(numberInput)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Add new number<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'NumberSubmit'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      numberInput<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addNumber</span><span class="token punctuation">(</span>numberInput<span class="token punctuation">)</span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">addNumber</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>numberInput<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>接着在 <code>GlobalMode.vue</code> 中引用刚才创建的组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberDisplay</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberSubmit</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> NumberDisplay <span class="token keyword">from</span> <span class="token string">'../components/pass-data-3/NumberDisplay'</span><span class="token punctuation">;</span><span class="token keyword">import</span> NumberSubmit <span class="token keyword">from</span> <span class="token string">'../components/pass-data-3/NumberSubmit'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'GlobalMode'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> NumberDisplay<span class="token punctuation">,</span> NumberSubmit <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>效果如下：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-5.gif" alt="全局模式"></p><p>可以看到，我们使用这种方式也可以实现组件间的通讯。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>最后，我们画个图总结一下 <code>Vue</code> 组件间的通讯：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-pass-data-in-components.png" alt="Vue组件间的通讯"></p><blockquote><p>本节内容代码地址：<a href="https://github.com/IDeepspace/Hello-Vue/tree/master/vue-component-communication" target="_blank" rel="noopener">https://github.com/IDeepspace/Hello-Vue/tree/master/vue-component-communication</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue 组件间通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础语法</title>
      <link href="/vue-basic/"/>
      <url>/vue-basic/</url>
      
        <content type="html"><![CDATA[<!-- ## Vue 基础语法 --><blockquote><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue 的官方文档</a>写的非常棒(另一个我觉得中文文档写的很好地是 <a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant-Design</a>)。</p></blockquote><p>这篇文章以使用 <code>vue-cli</code> 生成的项目为基础，以完整 <code>demo</code> 的形式讲解 <code>Vue</code> 的基础语法。关于 <code>vue-cli</code> 生成项目的讲解，可以参考：<a href="https://togoblog.cn/vue-cli-init-project-intro/">vue-cli 构建 vue 项目详解</a> 。</p><p>在  <code>vue-cli</code> 生成的项目中，我们打开 <code>src/components</code> 文件夹下 <code>HelloWorld.vue</code> 组件，为便于演示，删减了一部分内容（本文中的例子都将改造 <code>HelloWorld.vue</code> 组件来演示 <code>Vue</code> 语法）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>hello<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Essential Links<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'Welcome to Your Vue.js App'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Add "scoped" attribute to limit CSS to this component only --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">h1,h2 </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><a id="more"></a><h3 id="一、创建组件"><a href="#一、创建组件" class="headerlink" title="一、创建组件"></a>一、创建组件</h3><blockquote><p>在 <code>vue</code> 中，有好几种方式用来创建组件，后面会单独写一篇文章来介绍。</p></blockquote><p><code>HelloWord.vue</code> 文件中的内容分为三个部分：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token operator">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"> <span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>分别在这三类标签里面写入<strong>结构、脚本、样式</strong>。 这个文件以 <code>.vue</code> 结尾（注意：其他创建组件方式是以 <code>.js</code> 结尾），这是 <code>vue</code> 中创建组件的一种方式：<strong>单文件组件</strong>。换句话说就是每个 <code>.vue</code> 文件就是一个组件。</p><p><strong>有一点需要注意：<code>template</code> 只能允许一个子元素。</strong> </p><h3 id="二、导入组件"><a href="#二、导入组件" class="headerlink" title="二、导入组件"></a>二、导入组件</h3><p>现在的文件中，是在路由 <code>router/index.js</code> 中引入的 <code>HelloWorld</code> 组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>引入的方式一目了然，不再赘述。那如何在组件中引入组件呢？下面我们在 <code>App</code> 组件中直接引入 <code>Helloworld</code> 看看：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./assets/logo.png<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> HelloWorld <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token id">#app</span> </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2c3e50</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>在 <code>script</code> 标签中，<code>HelloWorld</code> 组件被引入并添加到 <code>components</code> 属性中。这样，就在 <code>App</code> 组件中引入了 <code>HelloWorld</code> 组件。启动项目在浏览器中打开，会看到 <code>App</code> 组件中的内容：<code>Vue</code> 的 <code>Logo</code> 、 <code>HelloWorld</code> 组件里的内容。</p><p>那如果要引入多个组件该怎么写呢？假设我们再有个 <code>Demo</code> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>app<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>./assets/logo.png<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'./components/HelloWorld'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Demo <span class="token keyword">from</span> <span class="token string">'./components/Demo'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'hello-world'</span><span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    demo<span class="token punctuation">:</span> Demo<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在 <code>components</code> 对象中定义多个属性，指向引入的组件即可。</p><h3 id="三、插值和指令"><a href="#三、插值和指令" class="headerlink" title="三、插值和指令"></a>三、插值和指令</h3><h4 id="1、插值-Interpolation"><a href="#1、插值-Interpolation" class="headerlink" title="1、插值(Interpolation)"></a>1、插值(Interpolation)</h4><h5 id="文本插值："><a href="#文本插值：" class="headerlink" title="文本插值："></a>文本插值：</h5><p><code>Vue</code> 插值最常见的形式就是使用双大括号 <code>{{ }} </code> 的文本插值。在文章开头中的 <code>HelloWorld</code> 组件中就使用了插值的方式实现数据绑定。这里我们详细介绍一下：</p><p>在 <code>Vue</code> 组件中，都有一个 <code>data</code> 属性，<code>data</code> 必须是一个函数，该函数的返回值是一个对象。我们可以在 <code>template</code> 中通过双大括号来读取 <code>data</code> 中的属性值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>这个将不会改变: {{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'Welcome to Your Vue.js App'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里也通过使用 <a href="https://cn.vuejs.org/v2/api/#v-once" target="_blank" rel="noopener">v-once 指令</a>（下面我们要说），执行一次性地插值：当数据改变时，插值处的内容不会更新。但是要注意<strong>一次性插值会影响到该节点上的其它数据绑定。</strong></p><h5 id="属性插值："><a href="#属性插值：" class="headerlink" title="属性插值："></a>属性插值：</h5><p>如何在 <code>template</code> 中包裹的标签的属性上插值呢？假设我们有一个 <code>&lt;button&gt;</code>，想通过插值的方式设置它的 <code>disable</code> 属性，需要这样做：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        // ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btnState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>      btnState<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Add this</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        </code></pre><p>在属性中插值，需要通过字符串的形式读取 <code>data</code> 中的值，不可以使用双大括号。现在，这个 <code>button</code> 就被 <code>disable</code> 掉了。</p><h5 id="表达式插值："><a href="#表达式插值：" class="headerlink" title="表达式插值："></a>表达式插值：</h5><p><code>vue</code> 中也支持表达式插值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Add this --></span>        {{ btnState ? 'The button is disabled' : 'The button is active'}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>btnState<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>用双大括号将表达式括起来。此时页面上会显示：<code>The button is disabled</code>。当然，你可以表达式中添加更加复杂的逻辑。</p><h4 id="2、指令-Directives"><a href="#2、指令-Directives" class="headerlink" title="2、指令(Directives)"></a>2、指令(Directives)</h4><p>指令 (<code>Directives</code>) 是带有 <code>v-</code> 前缀的特殊特性。它的作用是什么呢？就是当表达式的值改变时，将其产生的连带影响，响应式地作用于 <code>DOM</code>。我们看看几个例子：</p><ul><li><code>v-for</code> :</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tamplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo in todos<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo.key<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ todo.text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tamplate</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      todos<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 JavaScript'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 Vue'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'学习 前端'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><pre class=" language-javascript"><code class="language-javascript">· 学习 JavaScript· 学习 Vue· 学习 前端</code></pre><ul><li><code>v-if</code> 和 <code>v-else</code> :</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tamplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo in todos<span class="token punctuation">'</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo.key<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ todo.text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        // add this        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todos.length <span class="token punctuation">></span><span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>You have more than 1 todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>You have no todos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tamplate</span><span class="token punctuation">></span></span></code></pre><p>这里，<code>v-if</code> 指令将根据表达式的值的真假来插入/移除 <code>&lt;p&gt;</code> 元素。 </p><p>关于更多 <code>vue</code> 指令，可以查看 <a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">vue 指令 api</a>，这里不再一一讲述。</p><h3 id="四、事件处理"><a href="#四、事件处理" class="headerlink" title="四、事件处理"></a>四、事件处理</h3><p><code>vue</code> 中可以用 <code>v-on</code> 指令监听 <code>DOM</code> 事件，并在触发时运行相关 <code>JavaScript</code> 代码。我们通过几个例子来看看 <code>vue</code> 中的事件处理。</p><h4 id="1、计数器"><a href="#1、计数器" class="headerlink" title="1、计数器"></a>1、计数器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>counter +<span class="token punctuation">=</span> 1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+ 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>点击 <code>button</code> , 计数器递增 <code>+1</code>。<code>+1</code> 的逻辑写在了 <code>v-on</code> 指令里面，显然这是不可取的，许多事件处理逻辑会更为复杂。</p><p>在 <code>Vue</code> 组件中，都有一个 <code>data</code> 属性，也有一个 <code>methods</code> 属性。该属性是一个对象，我们可以在对象中定义方法。对于上面的例子，我们可以把点击 <code>button</code> 之后的处理逻辑放在  <code>methods</code> 中，<code>click</code> 事件调用 <code>methods</code> 中的方法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>add<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>+ 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      counter<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="2、事件修饰符"><a href="#2、事件修饰符" class="headerlink" title="2、事件修饰符"></a>2、事件修饰符</h4><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。虽然我们可以在事件的响应函数里面来做这些事情，但是 <code>vue</code> 提供了一个更优雅的方式来实现它 —— <strong>事件修饰符</strong>，保证了事件处理函数的干净纯粹：只关注数据处理逻辑。</p><p>修饰符是由点开头的指令后缀来表示的，我们把相应的修饰符添加在事件名称后面就好了，如：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 阻止单击事件继续传播 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 提交事件不再重载页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onSubmit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 修饰符可以串联 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只有修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">v-on:</span>submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加事件监听器时使用事件捕获模式 --></span><span class="token comment" spellcheck="true">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.capture</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --></span><span class="token comment" spellcheck="true">&lt;!-- 即事件不是从内部元素触发的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.self</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><ul><li><code>.stop</code></li><li><code>.prevent</code></li><li><code>.capture</code></li><li><code>.self</code></li><li><code>.once</code></li><li><code>.passive</code></li></ul><blockquote><p>注意：使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。注意这一点对我们定位 <code>bug</code> 时很关键。</p></blockquote><h3 id="五、处理用户输入"><a href="#五、处理用户输入" class="headerlink" title="五、处理用户输入"></a>五、处理用户输入</h3><p>我们可以用 <code>v-model</code> 指令来处理用户输入。 <code>v-model</code> 指令可以在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定，它会根据控件类型自动选取正确的方法来更新元素。<code>v-model</code> 本质上是语法糖，它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p>看看如何使用：</p><h4 id="1、文本"><a href="#1、文本" class="headerlink" title="1、文本"></a>1、文本</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Enter a todo..<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{ todo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      todo<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="2、多行文本域"><a href="#2、多行文本域" class="headerlink" title="2、多行文本域"></a>2、多行文本域</h4><p>这里需要注意，在 <code>&lt;textarea&gt;</code> 中使用文本插值并不会生效，应用 <code>v-model</code> 来代替。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    // ...    <span class="token comment" spellcheck="true">&lt;!-- &lt;textarea placeholder='add multiple lines'>{{ todo }}&lt;/textarea> // 不生效 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>todo<span class="token punctuation">'</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>add multiple lines<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="3、单选按钮"><a href="#3、单选按钮" class="headerlink" title="3、单选按钮"></a>3、单选按钮</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>radio<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>one<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>One<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>picked<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>one<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>radio<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>two<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Two<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>picked<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>two<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Picked: {{ picked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      picked<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4、复选按钮"><a href="#4、复选按钮" class="headerlink" title="4、复选按钮"></a>4、复选按钮</h4><h5 id="单个复选框"><a href="#单个复选框" class="headerlink" title="单个复选框"></a>单个复选框</h5><p>绑定到布尔值：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checked<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{ checked }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      checked<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="多个复选框"><a href="#多个复选框" class="headerlink" title="多个复选框"></a>多个复选框</h5><p>绑定到同一个数组：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>jack<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Jack<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkedNames<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>jack<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>john<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>John<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkedNames<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>john<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mike<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Mike<span class="token punctuation">'</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>checkedNames<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>mike<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>Mike<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Checked names: {{ checkedNames }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      checkedNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="5、选择框"><a href="#5、选择框" class="headerlink" title="5、选择框"></a>5、选择框</h4><h5 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>selected<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      selected<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h5 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>selected<span class="token punctuation">'</span></span> <span class="token attr-name">multiple</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span></span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      selected<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="6、动态选项"><a href="#6、动态选项" class="headerlink" title="6、动态选项"></a>6、动态选项</h4><p>非常常见的一个场景是，用 <code>v-for</code> 渲染的动态选项：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>selected<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span>        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>option in options<span class="token punctuation">'</span></span>        <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>option.value<span class="token punctuation">'</span></span>        <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>option.value<span class="token punctuation">'</span></span>      <span class="token punctuation">></span></span>{{ option.text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Selected: {{ selected }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      selected<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>      options<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'One'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'A'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Two'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'B'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Three'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="六、样式"><a href="#六、样式" class="headerlink" title="六、样式"></a>六、样式</h3><p>在 <code>HelloWorld</code> 组件中，有一组 <code>style</code> 标签：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Add "scoped" attribute to limit CSS to this component only --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">// <span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>这就意味着我们可以在这个组件中定义任何样式。默认 <code>style</code> 标签上加了一个 <code>scoped</code> 属性，表示样式只在本组件内部生效，不用担心会影响其他组件。</p><h4 id="1、链接到外部样式表"><a href="#1、链接到外部样式表" class="headerlink" title="1、链接到外部样式表"></a>1、链接到外部样式表</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./style.css<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css">// <span class="token number">...</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="2、class-绑定"><a href="#2、class-绑定" class="headerlink" title="2、class 绑定"></a>2、class 绑定</h4><p>在 <code>vue</code> 中 <code>class</code> 绑定和 <code>style</code> 绑定都是用 <code>v-bind</code> 指令。 <code>v-bind</code> 指令允许我们动态控制何时以及是否应用 <code>CSS</code> 类和样式，以及 <code>CSS</code> 属性和值。看看怎么使用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{ banner: showBanner}<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      showBanner<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.banner</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>打开浏览器，我们会看到一个紫色的长方形。如果想在 <code>showBanner</code> 为 <code>false</code> 的时候显示长方形，只需要对 <code>showBanner</code> 取反即可：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{ banner: !showBanner}<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>那如果需要绑定多个 <code>class</code> ，要怎么办呢？</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ banner: showBanner, <span class="token punctuation">'</span>another-class<span class="token punctuation">'</span>: showClass }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>用逗号分隔，然后在组件的 <code>data</code> 中定义另一个布尔属性，并在样式中定义 <code>.another-class</code> 即可。</p><p>但是如果 <code>calss</code> 继续增多，这种方式会让 <code>template</code> 变得很不干净，我们可以这样修改：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>classObject<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      classObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>        banner<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        bannerBorder<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// More classes here if you want..</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector"><span class="token class">.banner</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.bannerBorder</span> </span><span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px solid yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p> <code>class</code> 绑定的数据对象不必内联定义在模板里，抽离出来放在 <code>data</code> 函数的返回值里面。</p><h4 id="3、style-绑定"><a href="#3、style-绑定" class="headerlink" title="3、style 绑定"></a>3、style 绑定</h4><p>和 <code>class</code> 绑定一样，<code>vue</code> 也使用 <code>v-bind</code> 指令来绑定 <code>style</code> :</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">backgroundColor</span><span class="token punctuation">:</span> bgColor, <span class="token property">width</span><span class="token punctuation">:</span> bgWidth, <span class="token property">height</span><span class="token punctuation">:</span> bgHeight <span class="token punctuation">}</span></span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      bgColor<span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>      bgWidth<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>      bgHeight<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>为了让模板更加干净，我们也可以像下面这样调整：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value">styleObject</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      styleObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">'yellow'</span><span class="token punctuation">,</span>        width<span class="token punctuation">:</span> <span class="token string">'100%'</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token string">'30px'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意：<code>css</code> 属性名可以用驼峰式 (<code>camelCase</code>) 或短横线分隔 (<code>kebab-case</code>) 来命名。使用短横线分割时，需要用单引号把属性名括起来。</p></blockquote><h3 id="七、-Todolist"><a href="#七、-Todolist" class="headerlink" title="七、 Todolist"></a>七、 Todolist</h3><p>学习完 <code>Vue</code> 的基础语法，我们可以写一个 <code>Todolist</code> 来检验一下自己：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-todolist.png" alt="vue-todolist"></p><blockquote><p>代码可参考：<a href="https://github.com/IDeepspace/Hello-Vue/tree/master/vue-todolist" target="_blank" rel="noopener">https://github.com/IDeepspace/Hello-Vue/tree/master/vue-todolist</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli 构建 vue 项目详解</title>
      <link href="/vue-cli-init-project-intro/"/>
      <url>/vue-cli-init-project-intro/</url>
      
        <content type="html"><![CDATA[<!-- ## vue-cli 构建 vue 项目详解 --><p>构建一个 <code>vue</code> 项目最简单的方式就是使用脚手架工具 <code>vue-cli</code> 。前端的三大框架都有自己的脚手架工具，其作用就是用配置好的模板迅速搭建起一个项目工程来，省去自己配置 <code>webpack</code> 配置文件的基本内容，大大降低了初学者构建项目的难度。这节我们看看如何使用 <code>vue-cli</code> 构建 <code>vue</code> 项目以及对构建项目的具体分析。</p><h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><p><code>node</code> 和 <code>npm</code> 是必不可少的，这里不再介绍。</p><h4 id="1、安装-vue-cli"><a href="#1、安装-vue-cli" class="headerlink" title="1、安装 vue-cli"></a>1、安装 vue-cli</h4><pre class=" language-shell"><code class="language-shell">$ npm install -g vue-cli</code></pre><p>检查是否安装成功：</p><pre class=" language-shell"><code class="language-shell">$ vue --version3.3.0</code></pre><a id="more"></a><h4 id="2、构建项目"><a href="#2、构建项目" class="headerlink" title="2、构建项目"></a>2、构建项目</h4><pre class=" language-shell"><code class="language-shell">$ vue init webpack hello-vue</code></pre><p>初始化的过程中，会有一个交互式的选项让你选择项目的一些配置，根据项目需求选择即可。为了方便后面几篇教程的演示，可以统一选择以下选项：</p><pre class=" language-shell"><code class="language-shell">? Project name hello-vue # 项目名称? Project description A Vue.js project # 项目描述? Author Deepspace <cxin1427@gmail.com> # 作者? Vue build standalone # 运行+编译时? Install vue-router? Yes # 安装 vue-router? Use ESLint to lint your code? Yes # 使用 ESLint 作为代码规范? Pick an ESLint preset Airbnb # 选择 Airbnb 的代码规范? Set up unit tests Yes # 安装单元测试? Pick a test runner karma # 测试模块? Setup e2e tests with Nightwatch? Yes # 安装 e2e 测试? Should we run `npm install` for you after the project has been created? (recommended) npm # 包管理器，npm</code></pre><p>构建完成之后，会提示构建成功信息：</p><pre class=" language-shell"><code class="language-shell"># Project initialization finished!# ========================To get started:  cd hello-vue  npm run devDocumentation can be found at https://vuejs-templates.github.io/webpack</code></pre><h4 id="3、启动项目"><a href="#3、启动项目" class="headerlink" title="3、启动项目"></a>3、启动项目</h4><pre class=" language-shell"><code class="language-shell">$ cd hello-vue$ npm run dev</code></pre><p>项目默认会在 8080 端口启动，如果端口有占用，会自动调整端口。打开浏览器输入：<code>http://localhost:8080</code>，会看到构建的项目的主页：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-init-project.png" alt="vue-init-project"></p><h4 id="4、目录结构"><a href="#4、目录结构" class="headerlink" title="4、目录结构"></a>4、目录结构</h4><p>使用编辑器打开(推荐使用 <code>VSCode</code>)，下面具体看看目录结构：</p><p><strong><code>package.json</code> :</strong></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js"</span><span class="token punctuation">,</span>        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm run dev"</span><span class="token punctuation">,</span>        <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run"</span><span class="token punctuation">,</span>        <span class="token property">"e2e"</span><span class="token operator">:</span> <span class="token string">"node test/e2e/runner.js"</span><span class="token punctuation">,</span>        <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"npm run unit &amp;&amp; npm run e2e"</span><span class="token punctuation">,</span>        <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ext .js,.vue src test/unit test/e2e/specs"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node build/build.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 <code>package.json</code> 中，根据我们在构建项目的时候的选项，有以下几个命令。</p><ul><li><code>npm run dev</code> ：项目开发阶段，项目启动的命令；</li><li><code>npm run lint</code> ：使用 <code>eslint</code> 检查代码格式；</li><li><code>npm run test</code>：单元测试和 <code>e2e</code> 测试；</li><li><code>npm run e2e</code> : <code>e2e</code> 测试；</li><li><code>npm run build</code>：开发完成后执行，会把我们的源代码编译成最终的发布代码，生成在项目根目录中的 <code>dist</code> 文件夹下（初始化项目时不会生成）。</li></ul><p><strong><code>config</code>：</strong> 保存一些项目初始化配置。</p><p><strong><code>build</code> ：</strong>里面保存一些 <code>webpack</code> 的初始化配置。</p><p><strong><code>index.html</code> :  </strong>是我们的首页。<code>index</code> 很多时候都被预设为首页，像 <code>index.htm</code>，<code>index.php</code> 等。</p><p><strong><code>src</code> : </strong> 保存项目源代码的地方，我们下面会详细分析该文件夹里的文件。</p><h3 id="二、代码分析"><a href="#二、代码分析" class="headerlink" title="二、代码分析"></a>二、代码分析</h3><p><code>Vue</code> 的核心架构分为两个部分：<strong>路由和组件</strong>，其实 <code>React</code> 也是一样的。我们在切入一个项目的时候，都是从这两个点出发。下面我们具体看看 <code>src</code> 文件夹。</p><h4 id="1、入口文件"><a href="#1、入口文件" class="headerlink" title="1、入口文件"></a>1、入口文件</h4><p>如果我们打开项目根目录下 <code>build</code> 目录中的 <code>webpack.base.conf.js</code>，会看到这样的代码(第22行)：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>    </code></pre><p>说明我们的入口文件就是 <code>src</code> 目录下的 <code>main.js</code> 文件。看看代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// The Vue build version to load with the `import` command</span><span class="token comment" spellcheck="true">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看看这里面做了什么事情：</p><ul><li>引入 <code>vue</code> 并起名叫作 <code>Vue</code></li><li>引入 根目录下的 <code>App.vue</code> 文件(后缀名可不要)</li><li>引入 <code>router</code> 文件下的 <code>index.js</code> 文件(文件夹后没有具体的文件，默认引入的就是 <code>index.js</code> 文件)</li><li>通过 <code>new</code> 实例化 <code>Vue</code> 实例 ，实例化的时候声明了几个属性：<ul><li><code>el：&#39;#app&#39;</code>：意思是将所有视图放在 <code>id</code> 值为 <code>app</code> 这个 <code>dom</code> 元素中，也就是项目根目录下的 <code>index.html</code> 中的那个 <code>div</code> : <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>；</li><li><code>components: { App }</code>：意思是将上面引入的 <code>App.vue</code> 文件的内容将以 <code>&lt;App/&gt;</code> 这样的标签写进 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code> 中；</li></ul></li></ul><p>在开始的时候，我们并没有介绍说 <strong><code>Vue</code> 使用的是虚拟 <code>DOM</code></strong> ，那么，从这里我们看出，<code>Vue</code> 使用的也是虚拟 <code>DOM</code> (和<code>React</code>是一样的)。</p><blockquote><p>这里对<strong>虚拟 <code>DOM</code></strong> 作下简单介绍：当我们修改应用程序时，不会对 <code>DOM</code> 进行更改，而是创建以 <code>JavaScript</code> 数据结构形式存在的 <code>DOM</code> 副本，然后插到文档当中。无论何时进行任何更改，都将对 <code>JavaScript</code> 数据结构进行更改，并将后者与原始数据结构进行比较（<code>diff</code>算法），然后将最终更改更新为真实 <code>DOM</code>。我们都知道 <code>DOM</code> 是非常重的，所以<strong>虚拟 <code>DOM</code></strong> 是非常省性能的。</p></blockquote><h4 id="2、App-vue"><a href="#2、App-vue" class="headerlink" title="2、App.vue"></a>2、App.vue</h4><p>通过入口文件中做的事情，我们其实已经知道 <code>App.vue</code> 的作用了：<strong>单页面应用的主组件</strong>。所有页面都是在 <code>App.vue</code> 下通过路由进行切换的。所以，我们可以理解为所有的路由（<code>route</code>）也是 <code>App.vue</code> 的子组件。我们看看代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"./assets/logo.png"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>#app <span class="token punctuation">{</span>  font<span class="token operator">-</span>family<span class="token punctuation">:</span> <span class="token string">'Avenir'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans<span class="token operator">-</span>serif<span class="token punctuation">;</span>  <span class="token operator">-</span>webkit<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token operator">-</span>moz<span class="token operator">-</span>osx<span class="token operator">-</span>font<span class="token operator">-</span>smoothing<span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  color<span class="token punctuation">:</span> #2c3e50<span class="token punctuation">;</span>  margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><blockquote><p>这里需要提一下：<code>node</code> 之所以可以识别出 <code>*·vue</code> 格式的文件，是因为 <code>webpack</code> 在编译时将 <code>*.vue</code> 文件中的 <code>html</code> 、<code>js</code> 、<code>css</code> 都抽出来形成新的单独文件。可通过 <code>npm run build</code> 命令编译源代码，查看 <code>dist</code> 文件下的文件来验证。</p></blockquote><p><code>App.vue</code> 的内容分为三个部分：<code>&lt;template&gt;...&lt;/template&gt;</code>、<code>&lt;script&gt;...&lt;/script&gt;</code>、<code>&lt;style&gt;...&lt;/style&gt;</code> ，分别在这三类标签里面写入<strong>结构、脚本、样式</strong>。</p><p>我们先从 <code>&lt;template&gt;</code> 看起：里面一个 <code>div</code> 包裹着 <code>img</code> 标签和 <code>router-view</code> 标签。前面提到过： <strong><code>App.vue</code> 是单页面应用的主组件</strong>。对照着前面在浏览器中打开的应用主页面，<code>img</code> 标签就是页面上方的 <code>Vue</code> 的 <code>logo</code>。那下面的内容去哪了呢？和 <code>&lt;router-view/&gt;</code> 有关系吗？这就要去看路由了。</p><h4 id="3、router-index-js"><a href="#3、router-index-js" class="headerlink" title="3、router/index.js"></a>3、router/index.js</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>前面先引入了路由插件 <code>vue-router</code>，然后显式声明要用路由 <code>Vue.use(Router)</code> 。路由的配置非常地明了：给不同 <code>path</code> 分配不同的组件（或者页面），参数 <code>name</code> 只是用来识别。</p><p>当我访问根路由 <code>http://localhost:8080/#/</code> 时，<code>App.vue</code> 中的 <code>&lt;router-view/&gt;</code> 就会把引入的 <code>HelloWorld</code> 组件分配给我，放在了 <code>img</code> 标签的下面，打开 <code>components</code> 目录下的 <code>HelloWorld.vue</code> 就可以看到具体内容了。</p><blockquote><p>我们在看到浏览器中的 <code>url</code>  的时候会觉得奇怪，为什么在后面加了一个 <code>#</code> 号呢？这是因为 <code>vue-router</code> 默认 <code>hash</code> 模式 —— 使用 <code>URL</code> 的 <code>hash</code> 来模拟一个完整的 <code>URL</code>，当 URL 改变时，页面不会重新加载。详见：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" target="_blank" rel="noopener">https://router.vuejs.org/zh/guide/essentials/history-mode.html</a> 。这里可先跳过这点内容。</p></blockquote><p>现在，我们在浏览器访问 <code>http://localhost:8080/#/vue</code> 这个地址，会发现只出现了  <code>Vue</code> 的 <code>logo</code>。这是因为我们并没有配置 <code>/vue</code> 这个路由，找不到路由，那<code>&lt;router-view/&gt;</code> 这个标签就不会加载出来。</p><p>到这里，我们就知道路由是如何根据 <code>url</code> 来分配不同的组件了。配置多个路由就很简单了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/vue'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Vue    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>那如果要访问 <code>http://localhost:8080/#/vue/demo</code> 怎么办呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'about'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/vue'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'vue'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Vue<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/demo'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> demo<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          path<span class="token punctuation">:</span> <span class="token string">'/project'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> project<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>给路由加多一个子路由配置即可。</p><h4 id="4、assets"><a href="#4、assets" class="headerlink" title="4、assets"></a>4、assets</h4><p>用来存放一些图片、样式等静态文件。</p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Vue/vue-core-structure.png" alt="vue-core-structure"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode插件及配置</title>
      <link href="/vscode-plugins-and-configurations/"/>
      <url>/vscode-plugins-and-configurations/</url>
      
        <content type="html"><![CDATA[<!-- ## VSCode插件及配置 --><blockquote><p>一直把 <code>VSCode</code> 作为前端开发编辑器，非常好用。因为装的插件和自定义配置较多，这里做个备份备忘。</p></blockquote><h4 id="一、插件"><a href="#一、插件" class="headerlink" title="一、插件"></a>一、插件</h4><pre><code>- advanced-new-file- Docker- ESLint- HTML Snippets- JavaScript（ES6）code snippets- Markdown All in One- Material Theme- Path Intellisense- React Standard Style code snippets- Vetur</code></pre><a id="more"></a><h4 id="二、VSCode-配置-React"><a href="#二、VSCode-配置-React" class="headerlink" title="二、VSCode 配置 React"></a>二、VSCode 配置 React</h4><p><code>VSCode</code> 自带了 <code>Emmet</code>，可以自动补全 <code>HTML</code> 文件中的标签，想要补全 <code>react</code> 文件中 <code>JSX</code> 里面的标签，需要在用户设置中增加 <code>Emmet</code> 的设置：</p><h5 id="1、配置emmet"><a href="#1、配置emmet" class="headerlink" title="1、配置emmet"></a>1、配置emmet</h5><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"emmet.triggerExpansionOnTab"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h5 id="2、代码片段生成插件："><a href="#2、代码片段生成插件：" class="headerlink" title="2、代码片段生成插件："></a>2、代码片段生成插件：</h5><p>安装插件： <code>React Standard Style code snippets</code></p><h4 id="三、VSCode-配置-Vue"><a href="#三、VSCode-配置-Vue" class="headerlink" title="三、VSCode 配置 Vue"></a>三、VSCode 配置 Vue</h4><h5 id="1、vue-文件的基本语法高亮"><a href="#1、vue-文件的基本语法高亮" class="headerlink" title="1、vue 文件的基本语法高亮"></a>1、vue 文件的基本语法高亮</h5><p>安装插件：<code>vetur</code> .</p><p>安装完  <code>vetur</code>  后还需要在自定义配置文件中加上如下配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"css"</span><span class="token punctuation">,</span>            <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token string">"less"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"prettyhtml"</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span><span class="token punctuation">,</span>        <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-expand-multiline"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"wrapAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"sortAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置的过程中遇到一个问题：<code>VScode</code> 快捷键格式化 <code>vue</code> 文件后，会自动把单引号转为双引号。</p><ul><li>原因：<code>vetur</code> 使用的默认格式化方式是 <code>prettier</code></li><li>解决办法：将 <code>&quot;vetur.format.defaultFormatter.ts&quot;: &quot;prettier&quot;</code> 改为： <code>&quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;</code></li></ul><h5 id="2、-vue-文件的-ESLint"><a href="#2、-vue-文件的-ESLint" class="headerlink" title="2、 vue 文件的 ESLint"></a>2、 vue 文件的 ESLint</h5><p>安装插件：<code>ESLint</code> ，<code>ESLint</code> 不是安装后就可以用的，还需要其他的一些环境和配置：</p><ul><li><p>全局安装 <code>ESLint</code> :</p><pre class=" language-shell"><code class="language-shell">$ npm install -g eslint</code></pre></li><li><p><code>vue</code> 文件是类 <code>HTML</code> 的文件，为了支持对 <code>vue</code> 文件的 <code>ESLint</code> ，需要 <code>eslint-plugin-html</code> 这个插件：</p><pre class=" language-shell"><code class="language-shell">$ npm install -g eslint-plugin-html</code></pre><p>安装好之后，在自定义配置文件中加上如下配置：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"eslint.options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"html"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>            <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>此时，<code>eslint</code> 会根据项目根目录下的 <code>.eslintrc.json</code>  文件（没有需要创建）进行代码检查。</p></li></ul><h4 id="四、用户自定义配置文件"><a href="#四、用户自定义配置文件" class="headerlink" title="四、用户自定义配置文件"></a>四、用户自定义配置文件</h4><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>  <span class="token property">"terminal.external.osxExec"</span><span class="token operator">:</span> <span class="token string">"iTerm.app"</span><span class="token punctuation">,</span>  <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"terminal.integrated.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Source Code Pro for Powerline"</span><span class="token punctuation">,</span>  <span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"500"</span><span class="token punctuation">,</span>  <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Source Code Pro for Powerline, 'Courier New', monospace"</span><span class="token punctuation">,</span>  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"editor.multiCursorModifier"</span><span class="token operator">:</span> <span class="token string">"ctrlCmd"</span><span class="token punctuation">,</span>  <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"css"</span><span class="token punctuation">,</span>      <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token string">"less"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"*.vue"</span><span class="token operator">:</span> <span class="token string">"vue"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"files.trimFinalNewlines"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"files.insertFinalNewline"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span>  <span class="token property">"eslint.options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    // <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"javascript"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"prettyhtml"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatter.css"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span><span class="token punctuation">,</span>    <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-expand-multiline"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>      <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"wrapAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"sortAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceAfterCommaDelimiter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"javascript.updateImportsOnFileMove.enabled"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>  <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"first"</span><span class="token punctuation">,</span>  <span class="token property">"eslint.alwaysShowStatus"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Material Theme"</span><span class="token punctuation">,</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React 组件间的通讯</title>
      <link href="/react-component-communication/"/>
      <url>/react-component-communication/</url>
      
        <content type="html"><![CDATA[<!-- ## React 组件间的通讯 --><p>在使用 <code>React</code> 的过程中，不可避免的需要组件间进行消息传递（通信），组件间通信大体上有下面几种情况：</p><ul><li>父组件向子组件通信</li><li>子组件向父组件通信</li><li>兄弟组件间通信</li><li>不在同一父级中的非兄弟组件间通信</li></ul><p>下面细说这四种不同情况的组件之间是如何通信的。<br><a id="more"></a></p><h3 id="一、父组件向子组件通信"><a href="#一、父组件向子组件通信" class="headerlink" title="一、父组件向子组件通信"></a>一、父组件向子组件通信</h3><p><code>React</code> 是单向数据流。父组件通过向子组件传递 <code>props</code> （数据或者方法），子组件得到 <code>props</code> 后进行相应的处理。演示 <code>demo</code> 如下：</p><p><strong>父组件  :</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是Parent        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传递<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Parent<span class="token punctuation">;</span></code></pre><p><strong>子组件：</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>我是Child，得到父组件传下来的值：<span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Child<span class="token punctuation">;</span></code></pre><p>父组件中定义好 <code>state</code> ，<code>input</code> 的事件函数 <code>onChange</code> 中，缓存 <code>value</code> 值，然后点击 <code>button</code> 的时候，改变 <code>state</code> , 子组件只负责展示 <code>value</code> 。</p><h3 id="二、子组件向父组件通信"><a href="#二、子组件向父组件通信" class="headerlink" title="二、子组件向父组件通信"></a>二、子组件向父组件通信</h3><p>利用回调函数，实现子组件向父组件通信：父组件将处理函数作为 <code>props</code> 传递给子组件，子组件调用该回调函数。</p><h4 id="1、State-定义在父组件"><a href="#1、State-定义在父组件" class="headerlink" title="1、State 定义在父组件"></a>1、State 定义在父组件</h4><p><strong>父组件：</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ChildCom <span class="token keyword">from</span> <span class="token string">'./ChildCom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FatherCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'我是父组件里面的数据'</span><span class="token punctuation">,</span> <span class="token string">'我来自父组件'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  addItem <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> item<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是父组件里面的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>list<span class="token punctuation">}</span></span> <span class="token attr-name">method</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">}</span></span> <span class="token attr-name">addItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>addItem<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> FatherCom<span class="token punctuation">;</span></code></pre><p><strong>子组件：</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ChildCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> method <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  submit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> addItem <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token string">'我是通过子组件props方式传递给父组件的数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>执行父组件的方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>submit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>子组件改变父组件的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ChildCom<span class="token punctuation">;</span></code></pre><h4 id="2、State-定义在子组件"><a href="#2、State-定义在子组件" class="headerlink" title="2、State 定义在子组件"></a>2、State 定义在子组件</h4><p>有的时候，<code>state</code> 也需要定义在子组件里面，比如对于弹出框、<code>checkBox</code> 这类具有开关性质的状态。这个时候，把 <code>state</code> 定义在子组件内部会更容易维护，但是子组件也需要将这个状态通知到父组件。处理逻辑也是一样的，同样执行从父组件传递下来的处理函数。在上面的 <code>demo</code> 中作出以下修改：</p><p><strong>父组件：</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">FatherCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  onChange <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'来自 child 的 value 变化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildCom</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>子组件：</strong></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ChildCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      childValue<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  childValChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> onChange <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">onChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          state 定义在 child          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>childValChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、兄弟组件间通信"><a href="#三、兄弟组件间通信" class="headerlink" title="三、兄弟组件间通信"></a>三、兄弟组件间通信</h3><h4 id="1、通过父组件做中转"><a href="#1、通过父组件做中转" class="headerlink" title="1、通过父组件做中转"></a>1、通过父组件做中转</h4><p><code>Father</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> BrotherCom <span class="token keyword">from</span> <span class="token string">'./BrotherCom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> SisterCom <span class="token keyword">from</span> <span class="token string">'./SisterCom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FatherCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'start'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Parent update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  transferMsg <span class="token operator">=</span> msg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      msg<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BrotherCom</span> <span class="token attr-name">transferMsg</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>transferMsg<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SisterCom</span> <span class="token attr-name">msg</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>msg<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> FatherCom<span class="token punctuation">;</span></code></pre><p><code>Brother</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BrotherCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Brother update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> transferMsg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">transferMsg</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          Brother Component          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>与兄弟组件通信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> BrotherCom<span class="token punctuation">;</span></code></pre><p><code>Sister</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SisterCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Siser update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Sister Component<span class="token punctuation">:</span> <span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> SisterCom<span class="token punctuation">;</span></code></pre><p>这个方法有一个问题，<strong>由于父组件的 <code>state</code> 发生变化，会触发父组件及从属于父组件的子组件的生命周期。</strong>所以我们在控制台中可以看到，各个组件中的 <code>componentDidUpdate</code> 方法均被触发。那怎么解决呢？<code>react</code> 生命周期中的 <code>shouldComponentUpdate</code> 函数就派上用场了。</p><blockquote><p><code>shouldComponentUpdate</code> 函数会在组件重新渲染之前调用，函数的返回值确定了组件是否需要重新渲染。函数默认的返回值是 <code>true</code>，就是说只要组件的 <code>props</code> 或者 <code>state</code> 发生了变化，就会重新构建 <code>virtual DOM</code>，然后使用 <code>diff</code> 算法进行比较，再接着根据比较结果决定是否重新渲染整个组件。函数的返回值为 <code>false</code> 表示不需要重新渲染。 </p></blockquote><p>所以，我们在 <code>Brother</code> 组件中使用 <code>shouldComponentUpdate</code> 函数，来决定是否需要重新渲染：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">BrotherCom</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Brother update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>transferMsg <span class="token operator">!==</span> nextProps<span class="token punctuation">.</span>transferMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> transferMsg <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token function">transferMsg</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>          Brother Component          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>与兄弟组件通信<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2、利用Context"><a href="#2、利用Context" class="headerlink" title="2、利用Context"></a>2、利用Context</h4><p>利用父组件做中转可以完成兄弟组件之间的通信，但是如果父组件结构很深，那么中间的每一层组件都要去传递 <code>props</code>，增加了复杂度，并且这些 <code>props</code> 并不是这些中间组件自己所需要的。可以使用 <code>Context</code> 来解决这个问题。</p><p><code>Context</code> 设计目的是为共享那些被认为对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。</p><p> 在 <code>React v16.3.0</code> 之前，<code>Context</code> 作为一个实验性质的 <code>Api</code>，一直不被官方提倡使用。原因是在子组件中使用 <code>Context</code>  会破坏 <code>React</code> 应用的分形架构。</p><blockquote><p>分形结构是指是从理想的 <code>React</code> 应用的根组件树中抽取的任意一部分，抽取的部分仍是一个可以直接运行的子组件树。在这个子组件树之上再包一层，这样就可以将它无缝地移植到任意一个其他的根组件树中。</p><p>如果根组件树中有任意一个组件使用了支持 <code>props</code>  透传的 <code>Context API</code>，那么把包含了这个组件的子组件树单独拿出来，因为缺少了提供 <code>Context</code> 值的根组件树，这个时候这个子组件树是无法直接运行的。</p></blockquote><h5 id="React-v16-3-0-之前："><a href="#React-v16-3-0-之前：" class="headerlink" title="- React v16.3.0 之前："></a>- React v16.3.0 之前：</h5><p>下面我们看看在 <code>React v16.3.0</code> 之前，如果使用 <code>Context</code> 进行信息传递该怎么做：</p><p>使用 <code>Context</code> ，需要用到两种组件：</p><ul><li>一个是 <code>Context</code> 生产者(<code>Provider</code>)，通常是一个父节点；</li><li>另一个是 <code>Context</code> 的消费者(<code>Consumer</code>)，通常是一个或者多个子节点。</li></ul><p>所以 <code>Context</code> 的使用基于<strong>生产者消费者模式</strong>。</p><p>对于父组件，也就是 <code>Context</code> 生产者，需要通过一个静态属性 <code>childContextTypes</code> 声明提供给子组件的<code>Context</code>对象的属性，并实现一个实例 <code>getChildContext</code> 方法，返回一个代表 <code>Context</code> 的纯对象 (<code>plain object</code>) 。</p><p>我们假设 <code>AParent</code> 的子组件 <code>A</code> 需要和 <code>BParent</code> 的子组件 <code>B</code> 进行通信。</p><p>首先，我们需要创建一个顶级公共组件 <code>Context</code> ：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">import</span> AParent <span class="token keyword">from</span> <span class="token string">'./AParent'</span><span class="token punctuation">;</span><span class="token keyword">import</span> BParent <span class="token keyword">from</span> <span class="token string">'./BParent'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  setValue <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回Context对象，方法名是约定好的</span>  <span class="token function">getChildContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      setValue<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setValue<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AParent</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BParent</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明Context对象属性</span>Context<span class="token punctuation">.</span>childContextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>  setValue<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Context<span class="token punctuation">;</span></code></pre><p>而对于 <code>Context</code> 的消费者，子组件需要通过一个静态属性 <code>contextTypes</code> 声明后，才能访问父组件 <code>Context</code>对象的属性。否则，即使属性名没写错，拿到的对象也是 <code>undefined</code>。</p><p>创建 <code>AParent</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> setValue <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是 parentA 的子组件 A <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>传递<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AParent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明需要使用的Context属性</span>A<span class="token punctuation">.</span>contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  setValue<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> AParent<span class="token punctuation">;</span></code></pre><p>创建 <code>BParent</code> 组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">'prop-types'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是 parentB 的子组件 B<span class="token punctuation">,</span> A传递给我的值是：        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>value<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BParent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明需要使用的Context属性</span>B<span class="token punctuation">.</span>contextTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> BParent<span class="token punctuation">;</span></code></pre><p>这种方式除了会破坏 <code>React</code> 应用的分形架构之外，还有另外一个问题：如果现在新增一个组件 <code>C</code>，数据流向为 ：顶级公共组件 <code>Context</code>  ——&gt; <code>A</code> ——&gt; <code>B</code> ——&gt; <code>C</code> (接收 <code>context</code>)。当数据改变时，组件 <code>A</code> 和组件 <code>B</code> 都重新 <code>render</code> 了， <code>C</code> 组件才能拿到更新后的 <code>Context</code>。</p><p> 如果中间组件 <code>B</code> 使用了<code>shouldComponentUpdate</code> 来拦截重新渲染，或者 <code>B</code> 组件是 <code>PureComponent</code>，那么它的下方组件 <code>C</code> 就拿不到更新后的 <code>Context</code>，这个时候 <code>React</code> 将认为整个子树都没有发生改变，那么组件 <code>C</code> 就不会重新渲染。</p><p><strong>也就是说：<code>Context</code> 的更改将不会在 <code>shouldComponentUpdate</code> 返回为 <code>false</code> 上的组件上传播。</strong> 这篇文章提供了一个解决方案：<a href="https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076" target="_blank" rel="noopener">How to safely use React context</a> ，可以参考。</p><h5 id="React-v16-3-0-之后："><a href="#React-v16-3-0-之后：" class="headerlink" title="- React v16.3.0 之后："></a>- React v16.3.0 之后：</h5><p>新的 <code>Context Api</code> 采用声明式的写法，并且可以透过 <code>shouldComponentUpdate</code> 返回 <code>false</code> 的组件继续向下传播，以保证目标组件可以接受到顶层组件中 <code>Context</code> 的更新，更加明确了生产者消费者模式的使用方式。在 <code>React v16.3.0</code> 中得到官方推荐支持。</p><p>下面看个 <code>Demo</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">{</span>  light<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">'#000000'</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">'#eeeeee'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  dark<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">'#ffffff'</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">'#222222'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>  themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// default value</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过静态方法 <code>React.createContext()</code> 创建一个<code>Context</code>对象。这个 <code>Context</code> 对象包含两个组件，<code>&lt;Provider /&gt;</code> 和 <code>&lt;Consumer /&gt;</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MainSection <span class="token keyword">from</span> <span class="token string">'./MainSection'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext<span class="token punctuation">,</span> themes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./ThemeContext'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> themes<span class="token punctuation">.</span>light<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  toggleTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> state<span class="token punctuation">.</span>theme <span class="token operator">===</span> themes<span class="token punctuation">.</span>dark <span class="token operator">?</span> themes<span class="token punctuation">.</span>light <span class="token punctuation">:</span> themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Toggle Theme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MainSection</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p><code>&lt;Provider /&gt;</code> 的 <code>value</code> 相当于老版本 <code>Context api</code> 中的 <code>getChildContext()</code>。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./ThemeContext'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MainSection</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span>theme <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>            <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>              backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span>              color<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>foreground<span class="token punctuation">,</span>              minHeight<span class="token punctuation">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></span>          <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MainSection<span class="token punctuation">;</span></code></pre><p>可以看到，即使 <code>MainSection</code> 组件中 <code>shouldComponentUpdate</code> 返回值为 <code>false</code> ，<code>Context</code> 依旧可以穿透它。 </p><blockquote><p>PS：如果你觉得有了新 <code>Context api</code> 就能不用 <code>Redux</code> 的话，说明你也许根本就不需要 <code>Redux</code> ，你只是需要一个全局<code>Store</code> 就好了。</p></blockquote><h4 id="3、发布订阅模式"><a href="#3、发布订阅模式" class="headerlink" title="3、发布订阅模式"></a>3、发布订阅模式</h4><p>这种模式是通过使用事件中心的方式，允许组件自由交流，一个地方发送消息，另一个地方接收做出变化的需求，无论组件处于组件树的哪一层。实现的方式有很多，下面是淘宝前端团队的实现方式：</p><p>创建一个发布订阅类 <code>eventEmitter</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> eventEmitter <span class="token operator">=</span> <span class="token punctuation">{</span>  onObj<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  oneObj<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  on<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  one<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  off<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  trigger<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> key<span class="token punctuation">,</span> args<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    key <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>oneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> eventEmitter<span class="token punctuation">;</span></code></pre><p>公共父类 <code>Container</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> A <span class="token keyword">from</span> <span class="token string">'./A'</span><span class="token punctuation">;</span><span class="token keyword">import</span> B <span class="token keyword">from</span> <span class="token string">'./B'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Container <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Container<span class="token punctuation">;</span></code></pre><p>子组件 <code>A</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> eventEmitter <span class="token keyword">from</span> <span class="token string">'./eventEmitter'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'dispatch'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        我是Brother A<span class="token punctuation">,</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>发送<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> A<span class="token punctuation">;</span></code></pre><p>子组件 <code>B</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> eventEmitter <span class="token keyword">from</span> <span class="token string">'./eventEmitter'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'dispatch'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valueChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    eventEmitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'dispatch'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>valueChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  valueChange <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      value<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>card<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        我是Brother B<span class="token punctuation">,</span> 我从A接受到的value是：        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> B<span class="token punctuation">;</span></code></pre><ul><li><p>组件 <code>A</code> 用于分发消息，组件 <code>B</code> 接收消息。这里的中间者其实就是 <code>event</code> 对象。</p></li><li><p>组件 <code>A</code> 在内部的表单被点击的时候发布事件，将 <code>value</code> 传递出去。</p></li><li><p>需要接收消息的 <code>B</code> 在 <code>componentDidMount</code>  中去订阅 <code>dispatch</code> 事件，并把回调函数 <code>valueChange</code> 传入。另外， <code>B</code> 定义了自己的 <code>state</code>，方便得到 <code>value</code> 值的时候自动渲染。</p></li></ul><h3 id="四、Redux"><a href="#四、Redux" class="headerlink" title="四、Redux"></a>四、Redux</h3><p><code>React</code> 中自上而下的单向数据流，和 <code>state</code> 的特性，除去发布订阅和 <code>Redux</code> 等方式，其他的都是通过 <code>props</code> 自上而下传递数据，子组件需要的数据总是通过父组件传递下来的。如果你的项目的状态更加复杂，那就需要用上 <code>Redux</code> 了，参考：<a href="https://togoblog.cn/redux-basic/">https://togoblog.cn/redux-basic/</a> 。</p><blockquote><p>本篇文章中的代码示例可参考：<a href="https://github.com/IDeepspace/React-Workshop/tree/master/examples" target="_blank" rel="noopener">https://github.com/IDeepspace/React-Workshop/tree/master/examples</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> React 组件通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 中的对象拷贝</title>
      <link href="/javascript-copy-object/"/>
      <url>/javascript-copy-object/</url>
      
        <content type="html"><![CDATA[<!-- ## JavaScript 中的对象拷贝--><blockquote><p>翻译自：原文链接：<a href="https://smalldata.tech/blog/2018/11/01/copying-objects-in-javascript" target="_blank" rel="noopener">copying-objects-in-javascript</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章我们将会说说  <code>Javascript</code>  中对象拷贝的几种方式，我们会仔细探究深拷贝（<code>deep coping</code>）和浅拷贝（<code>shallow coping</code>）。</p><p>在文章开始之前，先提一下一些基础知识：在 <code>Javascript</code>  中，对象只是指向内存中某个位置的指针。这些指针是可变的，也就是说，它们可以重新被赋值。因此，如果我们单单简单地复制这个指针，<strong>那就可能造成有两个指针指向内存中的同一块地址的结果。</strong><br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token string">'abc'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// abc</span>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'yo foo'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// yo foo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// yo foo</span>bar<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'whatup bar?'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// whatup bar?</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// whatup bar?</span></code></pre><p>从上面的例子可以看出，<code>foo</code> 和 <code>bar</code> 这两个对象都能根据对方的变化而变化。因此，在拷贝 <code>Javascript</code> 中的对象的时候，我们要根据实际使用情况选择拷贝方式。</p><h3 id="一、浅拷贝"><a href="#一、浅拷贝" class="headerlink" title="一、浅拷贝"></a>一、浅拷贝</h3><p>如果要操作的对象拥有的属性都是值类型，那么我们可以用 <code>ES6</code> 中的扩展运算符或者 <code>Object.assign(...)</code> :</p><p><strong>1、扩展运算符：</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p><strong>2、<code>Object.assign(...)</code> :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p>可以看到，上面的两个方法都可以把多个不同来源对象中的属性拷贝到一个目标对象中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> bar<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copySpread <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2 <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span><span class="token keyword">var</span> copyAssign <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Object { foo: "foo", bar: "bar" }</span></code></pre><p>但是，上面的两种方法也存在一些问题：如果对象的属性本身也是对象，那么实际被拷贝的还只是那些指针。也就是说，这跟执行 <code>var bar = foo;</code>  的效果是一样的，跟前言中的代码的做法效果是一样的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>foo <span class="token punctuation">}</span><span class="token punctuation">;</span>copy<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>copy<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 0, b: { c: 2 } }</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 1, b: { c: 2 } }</span></code></pre><h3 id="二、深拷贝（有缺陷）"><a href="#二、深拷贝（有缺陷）" class="headerlink" title="二、深拷贝（有缺陷）"></a>二、深拷贝（有缺陷）</h3><p>如果想要深拷贝一个对象，一个可用的解决方法是：<strong>先把对象序列化成字符串，然后再把它反序列化回来。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> copy <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不幸的是，这个方法只在对象包含可序列化值，并且没有循环引用的时候有用。其中一个不可序列化的类型的就是<strong>日期对象</strong>。尽管它显示出来是字符串化的 <code>ISO</code> 格式，但是 <code>JSON.parse</code> 只会把它解析成为一个字符串，而不是日期类型。</p><h3 id="三、深拷贝-缺陷少一些"><a href="#三、深拷贝-缺陷少一些" class="headerlink" title="三、深拷贝 (缺陷少一些)"></a>三、深拷贝 (缺陷少一些)</h3><p>对于一些更复杂的情景，我们可以使用 <code>HTML5</code> 的一个新算法，叫做<a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification" target="_blank" rel="noopener">结构化克隆</a>。不过，截至本篇文章发表为止，有些内置类型还是无法支持，但相比 <code>JSON.parse</code> ，它支持的类型要多的多：<strong>日期类型，正则表达式，Map，集合，二进制大对象，文件集合，图像数据，sparse函数和数组</strong>。 它还维护克隆对象的引用，使得他可以支持循环引用结构的拷贝，而这些在上面的序列化例子中是不支持的。</p><p>目前，没有直接调用结构化克隆的方法，但是有些新的浏览器特性，底层使用了这个算法。因此，深拷贝对象可能需要一系列的环境才能实现。</p><p>通过 <code>MessageChannels</code>:  这样做的原理是，借用通讯的一个特性中使用到的序列化算法。由于那个特性是基于事件的，所以这里的克隆也是一个异步操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">StructuredCloner</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>nextKey_ <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inPort_ <span class="token operator">=</span> channel<span class="token punctuation">.</span>port1<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_ <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>outPort_<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">cloneAsync</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextKey_<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pendingClones_<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>inPort_<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> structuredCloneAsync <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>structuredCloneAsync <span class="token operator">=</span> StructuredCloner<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cloneAsync<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>  <span class="token keyword">new</span> <span class="token class-name">StructuredCloner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> main <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  original<span class="token punctuation">.</span>self <span class="token operator">=</span> original<span class="token punctuation">;</span>  <span class="token keyword">const</span> clone <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">structuredCloneAsync</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// different objects:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original <span class="token operator">!==</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>date <span class="token operator">!==</span> clone<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cyclical:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>self <span class="token operator">===</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>self <span class="token operator">===</span> clone<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// equivalent values:</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>number <span class="token operator">===</span> clone<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>date<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Number</span><span class="token punctuation">(</span>clone<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Assertions complete.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 <code>history</code> 对象 <code>API</code> ：<code>history.pushState()</code> 和 <code>history.replaceState()</code>  都会给它们的第一个参数做一个结构化克隆！要注意的是，这个方法是同步的，操作浏览器历史这个操作速度不是非常快，如果频繁调用这个方法，会导致浏览器卡死。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> structuredClone <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> oldState <span class="token operator">=</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clonedObj <span class="token operator">=</span> history<span class="token punctuation">.</span>state<span class="token punctuation">;</span>  history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clonedObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification" target="_blank" rel="noopener">notification API</a>: 当创建一个 <code>notification</code> 实例的时候，构造器为它相关的数据做了结构化克隆。需要注意的是，它会尝试向用户展示浏览器通知，但是，除非它接收到用户允许展示通知的请求，否则，它什么也不会做。一旦用户点击同意的话，<code>notification</code>  会立刻被关闭。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> structuredClone <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> obj<span class="token punctuation">,</span> silent<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  n<span class="token punctuation">.</span>onshow <span class="token operator">=</span> n<span class="token punctuation">.</span>close<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="四、使用Node-js进行深拷贝"><a href="#四、使用Node-js进行深拷贝" class="headerlink" title="四、使用Node.js进行深拷贝"></a>四、使用Node.js进行深拷贝</h3><p><code>Node.js</code> 的 8.0.0 版本提供了一个 <a href="https://nodejs.org/api/v8.html#v8_serialization_api" target="_blank" rel="noopener">序列化 api</a> 可以跟结构化克隆媲美。不过这个 <code>API</code> 在本文发布的时候，还只是被认为是试验性的:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> v8 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'v8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> buf <span class="token operator">=</span> v8<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cloned <span class="token operator">=</span> v8<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>cloned<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>8.0.0 版本以下的话，比较稳定的方法，可以考虑用<a href="https://lodash.com/docs/4.17.11" target="_blank" rel="noopener"> <code>lodash</code></a> 的 <a href="https://lodash.com/docs/4.17.11#cloneDeep" target="_blank" rel="noopener"><code>cloneDeep</code></a> 函数，它的思想也多少有点基于结构化克隆算法。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>总结一下，<code>Javascript</code> 中最好的对象拷贝的算法，很大程度上取决于使用环境，以及你需要拷贝的对象的类型。虽然 <code>lodash</code> 是最安全的泛型深拷贝函数，但是，如果你自己封装的话，可能可以得到效率更高的实现方法，以下就是一个简单的深拷贝，也同样适用于<code>Date</code>日期对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> copy<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle the 3 simple types, and null or undefined</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> obj <span class="token operator">||</span> <span class="token string">'object'</span> <span class="token operator">!=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle Date</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    copy<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Array</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      copy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Function</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle Object</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> copy<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> copy<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>    <span class="token string">"Unable to copy obj as type isn't supported "</span> <span class="token operator">+</span> obj<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>就个人来说，我很期待可以随便使用结构克隆的那一天，让对象拷贝不再令人头疼。</p><p><a href="https://www.zcfy.cc/article/tag/JavaScript" target="_blank" rel="noopener">JAVASCRIPT </a><a href="https://www.zcfy.cc/article/tag/%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">算法 </a><a href="https://www.zcfy.cc/article/tag/%E6%B5%8F%E8%A7%88%E5%99%A8" target="_blank" rel="noopener">浏览器 </a><a href="https://www.zcfy.cc/article/tag/API" target="_blank" rel="noopener">API </a><a href="https://www.zcfy.cc/article/tag/HTML" target="_blank" rel="noopener">HTML</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— async 和 await</title>
      <link href="/es6-async-await/"/>
      <url>/es6-async-await/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><code>async</code> 函数是 <code>Generator</code> 函数的语法糖。</p><p>下面是一个 <code>Generator</code> 函数，依次读取两个文件：    </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">ascReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> g <span class="token operator">=</span> <span class="token function">ascReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码的函数 <code>gen</code> 可以写成 <code>async</code> 函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncReadFile <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./c.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">asyncReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>比较一下就会发现，<code>async</code> 函数就是将 <code>Generator</code> 函数的星号（<code>*</code>）替换成 <code>async</code>，将 <code>yield</code> 替换成 <code>await</code>。比起星号和 <code>yield</code>，<code>async</code> 和 <code>await</code>，语义上更清楚了。</p><p><strong>语法：</strong></p><p><code>await</code> 只能出现在 <code>async</code> 函数中，<code>async</code> 用于申明一个 <code>function</code> 是异步的，而 <code>await</code> 用于等待一个异步方法执行完成。下面我们单独对 <code>async</code> 和 <code>await</code> 做一些介绍，帮助理解。<br><a id="more"></a></p><h3 id="二、async"><a href="#二、async" class="headerlink" title="二、async"></a>二、async</h3><p><code>async</code> 函数是怎么处理它的返回值的呢？我们先写段代码来试试，看它到底会返回什么：</p><p><code>index.js</code> :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello async"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>打印结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">></span> node index<span class="token punctuation">.</span>jsPromise <span class="token punctuation">{</span> <span class="token string">'hello async'</span> <span class="token punctuation">}</span></code></pre><p>输出的是一个 <code>Promise</code> 对象。<code>async</code> 函数（包含函数语句、函数表达式、<code>Lambda</code> 表达式）会返回一个 <code>Promise</code> 对象，如果在函数中 <code>return</code> 一个直接量，<code>async</code> 会把这个直接量通过  <code>Promise.resolve()</code> 封装成 <code>Promise</code> 对象。</p><p>由于 <code>async</code> 函数返回的是一个 <code>Promise</code> 对象，所以在最外层不能用 <code>await</code> 获取其返回值的情况下，我们可以用原来的方式：<code>then()</code> 链来处理这个 <code>Promise</code> 对象，像下面这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello async"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// hello async</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那如果 <code>async</code> 函数没有返回值，会怎么样呢？很容易想到，它会返回 <code>Promise.resolve(undefined)</code>。</p><p>联想一下 <code>Promise</code> 的特点——无等待，所以在没有 <code>await</code> 的情况下执行 <code>async</code> 函数，它会立即执行，返回一个  <code>Promise</code>  对象，并且不会阻塞后面的语句。这和普通返回 <code>Promise</code> 对象的函数是一样的。</p><h3 id="三、await"><a href="#三、await" class="headerlink" title="三、await"></a>三、await</h3><p><code>await</code>  操作符用于等待一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 对象。它只能在异步函数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener"><code>async function</code></a> 中使用。</p><p>因为 <code>async</code> 函数返回一个 <code>Promise</code> 对象，所以 <code>await</code> 可以用于等待一个 <code>async</code> 函数的返回值——这也可以说是 <code>await</code> 在等 <code>async</code> 函数。</p><p>但要清楚，<code>await</code> 等的实际是一个返回值 —— 一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> 对象或者任何要等待的值， <code>await</code> 不仅仅用于等 <code>Promise</code> 对象，它可以等任意表达式的结果，所以，<code>await</code> 后面实际是可以接普通函数调用或者直接量的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"something"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"hello async"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>await</code> 等到了它要等的东西 —— 一个 <code>Promise</code> 对象，或者其它值，然后呢？首先我们需要明确的是：<strong><code>await</code> 是个运算符，用于组成表达式，<code>await</code> 表达式的运算结果取决于它等的东西。</strong></p><ul><li><p>如果 <code>await</code> 等到的不是一个 <code>Promise</code> 对象，那 <code>await</code> 表达式的运算结果就是它等到的东西。</p></li><li><p>如果它等到的是一个 <code>Promise</code> 对象，<code>await</code> 就忙起来了，它会阻塞后面的代码，等着 <code>Promise</code> 对象 <code>resolve</code>，然后得到 <code>resolve</code> 的值，作为 <code>await</code> 表达式的运算结果。这就是 <code>await</code> 必须用在 <code>async</code> 函数中的原因，<code>async</code> 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 <code>Promise</code> 对象中异步执行。</p></li></ul><h3 id="四、async-await-的优势"><a href="#四、async-await-的优势" class="headerlink" title="四、async/await 的优势"></a>四、async/await 的优势</h3><h4 id="1、简洁"><a href="#1、简洁" class="headerlink" title="1、简洁"></a>1、简洁</h4><p>使用 <code>async/await</code> 明显节约了不少代码。我们：</p><ul><li>不需要写 <code>.then</code>；</li><li>不需要写匿名函数处理 <code>Promise</code> 的 <code>resolve</code> 值；</li><li>不需要定义多余的 <code>data</code> 变量；</li><li>避免了嵌套代码。</li></ul><h4 id="2、错误处理"><a href="#2、错误处理" class="headerlink" title="2、错误处理"></a>2、错误处理</h4><p><code>async/await</code> 使得最终可以使用相同的代码结构来处理同步和异步错误。</p><p>在下面带有 <code>promises</code> 的示例中，如果 <code>JSON.parse</code> 失败，则 <code>try/catch</code> 将无法处理，因为它发生在 <code>promise</code> 中。我们需要在 <code>promise</code> 上调用 <code>.catch</code> 并复制我们的错误处理代码，这会让代码变得非常冗杂。在实际生产中，会更加复杂。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// JSON.parse可能会出错</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取消注释，处理异步代码的错误</span>    <span class="token comment" spellcheck="true">// .catch((err) => {</span>    <span class="token comment" spellcheck="true">//   console.log(err)</span>    <span class="token comment" spellcheck="true">// })</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>如果我们使用 <code>async/await</code> 的话，<code>catch</code>  就能很好地处理 <code>JSON.parse</code> 错误：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// JSON.parse可能会出错</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3、条件语句"><a href="#3、条件语句" class="headerlink" title="3、条件语句"></a>3、条件语句</h4><p>下面的代码示例当中，异步请求 <code>getJSON</code> 获取数据，然后根据返回的数据来判断决定是直接返回还是继续获取更多的数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>needsAnotherRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">makeAnotherRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>moreData <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> moreData<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面的代码看着就会觉得很头疼，嵌套了 6 层。<code>return</code> 语句很容易让人感到迷茫，而它们只是需要将最终结果传递到最外层的 <code>Promise</code>。如果我们使用 <code>async/await</code> 来改写代码，代码的可读性会大大提高：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>needsAnotherRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> moreData <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">makeAnotherRequest</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moreData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> moreData<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="4、中间值"><a href="#4、中间值" class="headerlink" title="4、中间值"></a>4、中间值</h4><p>开发中我们经常会遇到这样一个场景：调用 <code>promise1</code>，使用 <code>promise1</code> 返回的结果去调用 <code>promise2</code>，然后使用两者的结果去调用 <code>promise3</code>。你的代码很可能是这样的:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something</span>      <span class="token keyword">return</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value2 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// do something          </span>          <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们可以做些改变，减少嵌套：将 <code>value1</code> 和 <code>value2</code> 放进 <code>Promise.all</code> 来避免深层嵌套：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value1<span class="token punctuation">,</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// do something          </span>      <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>代码看起来减少了嵌套，但是为了可读性却牺牲了语义。除了避免嵌套，并没有其他理由将 <code>value1</code> 和 <code>value2</code>  放在一个数组中。</p><p>如果我们使用 <code>async/await</code> 的话，代码会变得非常简单、直观：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise2</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">promise3</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="5、错误栈"><a href="#5、错误栈" class="headerlink" title="5、错误栈"></a>5、错误栈</h4><p>假设有一段代码在一个链中调用多个 <code>promise</code>，而在链的某个地方会抛出一个错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"oops"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// output</span>    <span class="token comment" spellcheck="true">// Error: oops at callAPromise.then.then.then.then.then (index.js:8:13)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>Promise</code> 链中返回的错误栈不会给出错误发生位置的详细原因。更糟糕的是，它会误导我们：错误栈中唯一的函数名为 <code>callAPromise</code>，然而它和错误没有关系。(当然文件名和行号还是有用的)。</p><p>然而，<code>async/await</code> 中的错误栈会指向错误所在的函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"oops"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">makeRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// output</span>    <span class="token comment" spellcheck="true">// Error: oops at makeRequest (index.js:7:9)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在开发环境中，这一点优势可能并不大。但是，当我们分析生产环境的错误日志时，它将非常有用。</p><h4 id="6、调试"><a href="#6、调试" class="headerlink" title="6、调试"></a>6、调试</h4><p><code>async/await</code> 能够使得代码调试更简单。</p><p>由于我们不能在返回表达式的箭头函数中设置断点，所以如果使用 <code>Promise</code> 的话，就无法进行断点调试：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"oops"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>并且，如果我们在 <code>.then</code>  代码块中设置断点，使用 <code>Step Over</code> 快捷键时，调试器不会跳到下一个 <code>.then</code>，它会跳过异步代码。</p><p>如果使用 <code>await/async</code>，我们就不再需要那么多箭头函数了，这样就可以像调试同步代码一样跳过 <code>await</code> 语句：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> makeRequest <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">callAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><ul><li><code>async/await</code> 是写异步代码的新方式，以前的方法有<strong>回调函数</strong>和 <code>Promise</code>。</li><li><code>async/await</code> 是基于 <code>Promise</code> 实现的，它不能用于普通的回调函数。</li><li><code>async/await</code> 与 <code>Promise</code> 一样，是非阻塞的。</li><li><code>async/await</code> 使得异步代码看起来像同步代码，这正是它的魔力所在。</li><li><code>async/await</code> 相比于 <code>Promise</code> ，更加有优势。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— Promise</title>
      <link href="/es6-promise/"/>
      <url>/es6-promise/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><!-- ### 一、Promise 是什么？ --><p>阮一峰老师的 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">ES6 Promise</a> 文章里，把 <code>Promise</code> 介绍地很详细。这里再整理一下，加深理解。</p><p>学习一个东西，得先知道它是什么。我们先在浏览器中使用 <code>console.dir(Promise)</code> 打印出 <code>Promise</code> 对象的所的属性和方法。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/JavaScript/promise.png" alt="Promise"></p><p>从打印结果可以看出，<code>Promise</code> 是一个构造函数，它自己本身有 <code>all</code>、<code>reject</code>、<code>resolve</code> 等方法，原型上有 <code>catch</code>、<code>finally</code>、<code>then</code> 等方法。所以 <code>new</code> 出来的 <code>Promise</code> 对象也就自然拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法。从上图中可以看到，<code>then</code> 方法返回的是一个新的 <code>Promise</code> 实例（注意，不是原来那个 <code>Promise</code> 实例）。因此可以采用链式写法，即 <code>then</code> 方法后面再调用另一个 <code>then</code> 方法。</p><p><code>Promise</code> 的中文意思是承诺，这种<strong>“承诺将来会执行”</strong>的对象在 <code>JavaScript</code> 中称为 <code>Promise</code> 对象。简单说就是一个容器，里面保存着某个未来才会执行的事件（通常是一个异步操作）的结果。<br><a id="more"></a></p><blockquote><p><code>Promise</code>对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。<code>Promise</code> 对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和 <code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 <code>Promise</code> 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code> 对象的状态改变，只有两种可能：从 <code>pending</code> 变为 <code>fulfilled</code> 和从 <code>pending</code> 变为 <code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 <code>resolved</code>（已定型）。如果改变已经发生了，你再对<code>Promise</code> 对象添加回调函数，也会立即得到这个结果。这与事件（<code>Event</code>）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p><p><code>Promise</code> 也有一些缺点。首先，无法取消 <code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code> 内部抛出的错误，不会反应到外部。第三，当处于 <code>pending</code> 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><p>—— 摘自 <a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/promise</a></p></blockquote><h3 id="二、Promise的使用"><a href="#二、Promise的使用" class="headerlink" title="二、Promise的使用"></a>二、Promise的使用</h3><h4 id="1、创建Promise"><a href="#1、创建Promise" class="headerlink" title="1、创建Promise"></a>1、创建Promise</h4><p>那如何创建一个 <code>Promise</code> 呢，下面看一个简单的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Do some Async</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 构造函数接受一个函数作为参数，该函数的两个参数分别是 <code>resolve</code> 和 <code>reject</code>，这两个参数也是函数，由 <code>JavaScript</code> 引擎提供，不用自己实现。</p><ul><li><code>resolve</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“成功”（即从 <code>pending</code> 变为 <code>resolved</code>），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</li><li><code>reject</code> 函数的作用是，将 <code>Promise</code> 对象的状态从“未完成”变为“失败”（即从 <code>pending</code> 变为 <code>rejected</code>），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li></ul><p>在上面的代码中，我们执行了一个异步操作，也就是 <code>setTimeout</code>，2秒后，输出“执行完成”，并且调用 <code>resolve</code>方法。运行代码的时候我们发现，我们只是 <code>new</code> 了一个 <code>Promise</code> 对象，并没有调用它，我们传进去的函数就已经执行了。<strong>所以，我们使用 <code>Promise</code> 的时候一般是包在一个函数中，在需要的时候去运行这个函数 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数会 <code>return</code> 出 <code>Promise</code> 对象，也就是说，执行这个函数我们得到了一个 <code>Promise</code> 对象。在文章开始的时候，我们知道 <code>Promise</code> 对象拥有 <code>catch</code>、<code>finally</code>、<code>then</code> 这些方法，现在我们看看怎么使用它们。继续使用上面的 <code>runAsync</code> 函数 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// success</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`成功拿到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后面可以用传过来的数据做些其他操作</span>    <span class="token comment" spellcheck="true">// ......</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// failure</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Promise</code> 实例生成以后，可以用 <code>then</code> 方法分别指定 <code>resolved</code> 状态和 <code>rejected</code> 状态的回调函数。<code>Promise</code>实例的状态变为 <code>resolved</code> 或 <code>rejected</code>，就会触发 <code>then</code> 方法绑定的回调函数。</p><pre class=" language-javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// success</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// failure</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>then</code> 方法可以接受两个回调函数作为参数。第一个回调函数是 <code>Promise</code> 对象的状态变为 <code>resolved</code> 时调用，第二个回调函数是 <code>Promise</code> 对象的状态变为 <code>rejected</code> 时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受 <code>Promise</code> 对象传出的值作为参数。</p><p>结论：所以这个时候我们就会发现：原来 <code>then</code> 里面的函数和我们平时的回调函数一个意思，能够在 <code>runAsync</code> 这个异步任务执行完成之后被执行。</p><p>这里我们就可以清楚的知道 <code>Promise</code> 的作用了：<strong>异步执行的流程中，把原来的回调写法（执行代码和处理结果的代码）分离出来，在异步操作执行完后，用链式调用的方式执行回调函数。</strong></p><p>下面我们再具体看看 <code>Promise</code> 相比于回调嵌套的写法的好处。</p><h4 id="2、回调嵌套与Promise"><a href="#2、回调嵌套与Promise" class="headerlink" title="2、回调嵌套与Promise"></a>2、回调嵌套与Promise</h4><p>从表面上看，<code>Promise</code> 只是能够简化层层回调的写法，而实质上，<code>Promise</code> 的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递 <code>callback</code> 函数要简单、灵活的多。我们来看看这种简化解决了什么问题：</p><p>以往使用回调嵌套的方式来处理异步的代码是怎么实现的呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">doA</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doC</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">doD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">doE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行顺序：</span><span class="token comment" spellcheck="true">//doA</span><span class="token comment" spellcheck="true">//doF</span><span class="token comment" spellcheck="true">//doB</span><span class="token comment" spellcheck="true">//doC</span><span class="token comment" spellcheck="true">//doE</span><span class="token comment" spellcheck="true">//doD</span></code></pre><p>这样组织的代码就会遇到一个问题：当项目的代码变得复杂，加上了各种逻辑判断，不断的在函数之间跳转，那排查问题的难度就会大大增加。就比如在上面这个例子中，<code>doD()</code> 必须在 <code>doC()</code> 完成后才能完成，如果 <code>doC()</code> 执行失败了呢？我们是要重试 <code>doC()</code> 吗？还是直接转到其他错误处理函数中？当我们将这些判断都加入到这个流程中，很快代码就会变得非常复杂，难以定位问题。</p><p>回调嵌套：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> res<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 之后:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">writeFileAsynv</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 <code>Promise</code> 的好处就非常明显了。</p><h4 id="3、catch-方法"><a href="#3、catch-方法" class="headerlink" title="3、catch 方法"></a>3、catch 方法</h4><p> <code>Promise</code> 对象也拥有 <code>catch</code> 方法。它的用途是什么呢？其实它和 <code>then</code> 方法的第二个参数是一样的，用来指定<code>reject</code> 的回调，和写在 <code>then</code> 里第二个参数里面的效果是一样。用法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>catch</code> 还有另外一个作用：在执行 <code>resolve</code> 的回调（也就是上面 <code>then</code> 中的第一个参数）时，如果抛出异常了（代码出错了），那么并不会程序报错卡死，而是会进到这个 <code>catch</code> 方法中，看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'resolved'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>somedata<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处的somedata未定义</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rejected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成</span><span class="token comment" spellcheck="true">// resolved</span><span class="token comment" spellcheck="true">// 数据</span><span class="token comment" spellcheck="true">// rejected</span><span class="token comment" spellcheck="true">// ReferenceError: somedata is not defined</span></code></pre><p>在 <code>resolve</code> 的回调中，<code>somedata</code> 这个变量是没有被定义的。如果我们不用 <code>catch</code>，代码运行到这里就直接报错了，不往下运行了。但是在这里，会得到这样的结果。也就是说，程序执行到 <code>catch</code> 方法里面去了，而且把错误原因传到了 <code>error</code> 参数中。即便是有错误的代码也不会报错了，这与 <code>try/catch</code> 语句有相同的功能。<strong>所以，如果想捕获错误，就可以使用 <code>catch</code> 方法。</strong></p><h4 id="4、Promise-all"><a href="#4、Promise-all" class="headerlink" title="4、Promise.all()"></a>4、Promise.all()</h4><p><code>Promise.all</code> 方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Do some Async</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完成3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'数据3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span><span class="token comment" spellcheck="true">// [ '数据1', '数据2', '数据3' ]</span></code></pre><p>用 <code>Promise.all</code> 来执行，接收一个数组参数，里面的值最终都返回 <code>Promise</code> 对象。这样，三个异步操作的就是并行执行的，等到它们都执行完后才会进到 <code>then</code> 里面。那么，三个异步操作返回的数据哪里去了呢？都在 <code>then</code> 里面呢，<code>Promise.all</code> 会把所有异步操作的结果放进一个数组中传给 <code>then</code> ，就是上面的 <code>results</code> 。</p><p><strong>应用场景：</strong></p><p><code>Promise.all</code> 方法有一个非常常用的应用场景：打开网页时，预先加载需要用到的各种资源如图片及各种静态文件，所有的都加载完后，再进行页面的初始化。 </p><h4 id="5、Promise-race"><a href="#5、Promise-race" class="headerlink" title="5、Promise.race()"></a>5、Promise.race()</h4><p><code>race</code> 是竞赛、赛跑的意思。它的用法也就是它的字面意思：<strong>谁跑的快，就以谁为准，执行回调</strong>。其实再看看<code>Promise.all</code> 方法，和 <code>race</code> 方法恰恰相反。还是用 <code>Promise.all</code> 的例子，但是把 <code>runAsync1</code> 的方法 <code>timeout</code> 时间调成 <code>1000ms</code>。 </p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">runAsync1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">runAsync3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行完成1</span><span class="token comment" spellcheck="true">// 数据1</span><span class="token comment" spellcheck="true">// 执行完成2</span><span class="token comment" spellcheck="true">// 执行完成3</span></code></pre><p>这三个异步操作同样是并行执行的。结果很可以猜到，1秒后 <code>runAsync1</code> 已经执行完了，此时 <code>then</code> 里面的方法就会立即执行了。但是，在 <code>then</code> 里面的回调函数开始执行时，<code>runAsync2()</code> 和 <code>runAsync3()</code> 并没有停止，仍然继续执行。所以再过1秒后，输出了他们结束的标志。这个点需要注意。</p><p>上面的这些方法就是 <code>Promise</code> 比较常用的几个方法了。</p><h3 id="三、红绿灯问题"><a href="#三、红绿灯问题" class="headerlink" title="三、红绿灯问题"></a>三、红绿灯问题</h3><p>题目：红灯三秒亮一次，绿灯一秒亮一次，黄灯2秒亮一次；如何让三个灯不断交替重复亮灯？（用 <code>Promse</code> 实现）</p><p>三个亮灯函数已经存在：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>利用 <code>then</code> 和递归实现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'yellow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> light <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>timmer<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> timmer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">,</span> green<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">light</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Docker-Compose 部署 WordPress</title>
      <link href="/docker-wordpress/"/>
      <url>/docker-wordpress/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何使用 Docker-Compose 部署 WordPress --><blockquote><p>准备：腾讯云服务器：centos 7.5</p></blockquote><p>部署工具：</p><ul><li><code>Docker</code></li><li><code>Docker Compose</code></li><li><code>WordPress</code> 和 <code>MySql5.7</code> (运行在 Docker 容器中)</li></ul><h3 id="一、安装-Docker"><a href="#一、安装-Docker" class="headerlink" title="一、安装 Docker"></a>一、安装 Docker</h3><h4 id="1、卸载旧版本（重装的新系统可跳过）"><a href="#1、卸载旧版本（重装的新系统可跳过）" class="headerlink" title="1、卸载旧版本（重装的新系统可跳过）"></a>1、卸载旧版本（重装的新系统可跳过）</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-selinux \                  docker-engine-selinux \                  docker-engine</code></pre><a id="more"></a><h4 id="2、安装-Docker-所需要的包"><a href="#2、安装-Docker-所需要的包" class="headerlink" title="2、安装 Docker 所需要的包"></a>2、安装 Docker 所需要的包</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum install -y yum-utils \  device-mapper-persistent-data \  lvm2</code></pre><h4 id="3、配置到稳定的-Docker-CE-安装库"><a href="#3、配置到稳定的-Docker-CE-安装库" class="headerlink" title="3、配置到稳定的 Docker CE 安装库"></a>3、配置到稳定的 Docker CE 安装库</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><h4 id="4、安装-Docker-CE"><a href="#4、安装-Docker-CE" class="headerlink" title="4、安装 Docker CE"></a>4、安装 Docker CE</h4><pre class=" language-shell"><code class="language-shell">$ sudo yum install docker-ce</code></pre><h4 id="5、启动-Docker-service"><a href="#5、启动-Docker-service" class="headerlink" title="5、启动 Docker service"></a>5、启动 Docker service</h4><pre class=" language-shell"><code class="language-shell">$ sudo systemctl start docker</code></pre><h4 id="6、验证安装"><a href="#6、验证安装" class="headerlink" title="6、验证安装"></a>6、验证安装</h4><pre class=" language-shell"><code class="language-shell">// 可以通过查看版本的形式确认安装是否成功：$ docker --version// Docker version 18.06.1-ce, build e68fc7a// 也可以通过直接运行hello-world容器来确认安装是否成功：$ docker run hello-world</code></pre><h3 id="二、安装-Docker-Compose"><a href="#二、安装-Docker-Compose" class="headerlink" title="二、安装 Docker Compose"></a>二、安装 Docker Compose</h3><h4 id="1、下载安装文件"><a href="#1、下载安装文件" class="headerlink" title="1、下载安装文件"></a>1、下载安装文件</h4><pre class=" language-shell"><code class="language-shell">$ sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</code></pre><h4 id="2、给已下载的安装文件添加执行权限"><a href="#2、给已下载的安装文件添加执行权限" class="headerlink" title="2、给已下载的安装文件添加执行权限"></a>2、给已下载的安装文件添加执行权限</h4><pre class=" language-shell"><code class="language-shell">$ sudo chmod +x /usr/local/bin/docker-compose</code></pre><h4 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h4><pre class=" language-shell"><code class="language-shell">$ docker-compose --version// docker-compose version 1.22.0, build f46880fe</code></pre><h3 id="三、部署-WordPress-和-MySql-容器"><a href="#三、部署-WordPress-和-MySql-容器" class="headerlink" title="三、部署 WordPress 和 MySql 容器"></a>三、部署 WordPress 和 MySql 容器</h3><p>创建一个文件夹（<code>WordPress-Blog</code>），并在该目录下创建名为 <code>docker-compose.yml</code> 的文件：</p><pre class=" language-shell"><code class="language-shell">$ sudo mkdir WordPress-Blog && cd WordPress-Blog$ sudo touch docker-compose.yml</code></pre><p>编辑 <code>docker-compose.yml</code> ，将如下内容保存在里面：</p><pre class=" language-yml"><code class="language-yml">version: '3'services:   db:     image: mysql:5.7     volumes:       - db_data:/var/lib/mysql     restart: always     environment:       MYSQL_ROOT_PASSWORD: your-mysql-root-password       MYSQL_DATABASE: wordpress       MYSQL_USER: wordpress       MYSQL_PASSWORD: wordpress   wordpress:     depends_on:       - db     image: wordpress:latest     volumes:        - wp_site:/var/www/html     ports:       - "80:80"       - "443:443"     restart: always     environment:       WORDPRESS_DB_HOST: db:3306       WORDPRESS_DB_USER: wordpress       WORDPRESS_DB_PASSWORD: wordpressvolumes:    db_data:    wp_site:</code></pre><p>使用 <code>docker-compose</code> 命令启动容器：</p><pre class=" language-shell"><code class="language-shell">$ docker-compose up -d</code></pre><h3 id="四、完成"><a href="#四、完成" class="headerlink" title="四、完成"></a>四、完成</h3><p>浏览器访问 IP 地址，安装 WordPress！</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker-Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何提问？</title>
      <link href="/how-to-ask-a-question/"/>
      <url>/how-to-ask-a-question/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何提问？ --><p>How to ask a question?<br><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Tools/howtoask.png" alt="如何提问"><br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/linux-frequently-used-commands/"/>
      <url>/linux-frequently-used-commands/</url>
      
        <content type="html"><![CDATA[<h4 id="1、pwd-—-打印出当前工作目录名"><a href="#1、pwd-—-打印出当前工作目录名" class="headerlink" title="1、pwd — 打印出当前工作目录名"></a>1、pwd — 打印出当前工作目录名</h4><pre class=" language-shell"><code class="language-shell"> $ ~/Documents: pwd/Users/cxin/Documents</code></pre><h4 id="2、cd-—-更改目录"><a href="#2、cd-—-更改目录" class="headerlink" title="2、cd — 更改目录"></a>2、cd — 更改目录</h4><pre class=" language-shell"><code class="language-shell"> $ ~/Documents: cd Workspace $ Documents/Workspace: </code></pre><h4 id="3、ls-—-列出目录内容"><a href="#3、ls-—-列出目录内容" class="headerlink" title="3、ls — 列出目录内容"></a>3、ls — 列出目录内容</h4><ul><li><p>除了当前工作目录以外，也可以指定别的目录：<code>$ ls /usr</code></p></li><li><p>也可以指定多个目录，用空格隔开即可：<code>$ ls ~ /usr</code></p></li><li><p>改变输出格式，来得到更多的细节：<code>$ ls -l</code></p></li></ul><h4 id="4、file-—-确定文件类型"><a href="#4、file-—-确定文件类型" class="headerlink" title="4、file — 确定文件类型"></a>4、file — 确定文件类型</h4><pre class=" language-shell"><code class="language-shell">$ ~/Desktop: file a.pnga.png: PNG image data, 1920 x 6154, 8-bit/color RGBA, non-interlaced$ ~/Desktop:</code></pre><h4 id="5、less-—-浏览文件内容"><a href="#5、less-—-浏览文件内容" class="headerlink" title="5、less — 浏览文件内容"></a>5、less — 浏览文件内容</h4><pre class=" language-shell"><code class="language-shell">$ less filename</code></pre><a id="more"></a><h4 id="6、mkdir-—-创建目录"><a href="#6、mkdir-—-创建目录" class="headerlink" title="6、mkdir — 创建目录"></a>6、mkdir — 创建目录</h4><pre class=" language-shell"><code class="language-shell">$ mkdir directoryName</code></pre><h4 id="7、rm-—-删除文件和目录"><a href="#7、rm-—-删除文件和目录" class="headerlink" title="7、rm — 删除文件和目录"></a>7、rm — 删除文件和目录</h4><p>删除文件：</p><pre class=" language-shell"><code class="language-shell">$ rm filename</code></pre><p>删除目录：</p><pre class=" language-shell"><code class="language-shell">$ rm -rf directoryName</code></pre><h4 id="8、cp-—-复制文件和目录"><a href="#8、cp-—-复制文件和目录" class="headerlink" title="8、cp — 复制文件和目录"></a>8、cp — 复制文件和目录</h4><p><strong>复制文件：</strong></p><pre class=" language-shell"><code class="language-shell">$ cp Source Directory</code></pre><ul><li><p><code>Source</code>：要复制的源文件</p></li><li><p><code>Directory</code>：复制文件的新位置。如果此参数是一个新目录名，则将文件复制到新位置时重命名文件</p></li></ul><p><strong>复制目录：</strong></p><p>将目录 <code>test</code> 复制到目录 <code>file</code> 中</p><pre class=" language-shell"><code class="language-shell">$ cp -R test file/</code></pre><p>如果要复制的源目录中还存在子目录，可能会发生错误，此时使用选项R递归地复制子目录。</p><h4 id="9、mv-—-移动-重命名文件和目录"><a href="#9、mv-—-移动-重命名文件和目录" class="headerlink" title="9、mv — 移动/重命名文件和目录"></a>9、mv — 移动/重命名文件和目录</h4><p><code>mv</code> 命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名。</p><h4 id="10、cat-—-输出文件内容"><a href="#10、cat-—-输出文件内容" class="headerlink" title="10、cat — 输出文件内容"></a>10、cat — 输出文件内容</h4><p><code>cat</code> 用于在标准输出（监控器或屏幕）上查看文件内容。</p><h4 id="11、tail-—-输出"><a href="#11、tail-—-输出" class="headerlink" title="11、tail — 输出"></a>11、tail — 输出</h4><p>默认在标准输出上显示给定文件的最后10行内容，可以使用 <code>$ tail -n N</code>  命令来指定在标准输出上显示文件的最后 <code>N</code> 行内容。</p><h4 id="12、less-—-按页或按窗口打印文件内容"><a href="#12、less-—-按页或按窗口打印文件内容" class="headerlink" title="12、less — 按页或按窗口打印文件内容"></a>12、less — 按页或按窗口打印文件内容</h4><p><code>less</code> 按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。可以使用 <code>Ctrl+F</code> 向前翻页，<code>Ctrl+B</code> 向后翻页。</p><h4 id="13、grep-—-在给定的文件中搜寻指定的字符串"><a href="#13、grep-—-在给定的文件中搜寻指定的字符串" class="headerlink" title="13、grep — 在给定的文件中搜寻指定的字符串"></a>13、grep — 在给定的文件中搜寻指定的字符串</h4><pre class=" language-shell"><code class="language-shell">~ Desktop/demo: grep module data.jsmodule.exports = data;~ Desktop/demo:</code></pre><h4 id="14、find-—-搜索文件"><a href="#14、find-—-搜索文件" class="headerlink" title="14、find — 搜索文件"></a>14、find — 搜索文件</h4><p><code>find</code> 用于在给定位置搜寻与条件匹配的文件。</p><pre class=" language-shell"><code class="language-shell">~ Desktop/demo: find data.jsdata.js~ Desktop/demo: find data1.jsfind: data1.js: No such file or directory</code></pre><p><code>find -iname</code> 来进行不区分大小写的搜寻：</p><pre class=" language-shell"><code class="language-shell">~ Desktop/demo: find . -iname data.js./data.js~ Desktop/demo:</code></pre><h4 id="15、tar"><a href="#15、tar" class="headerlink" title="15、tar"></a>15、tar</h4><p><code>tar</code> 命令能创建、查看和提取 <code>tar</code> 压缩文件</p><ul><li><p><code>tar -cvf</code> 是创建对应压缩文件</p><pre class=" language-shell"><code class="language-shell"> ~/Desktop: lsdemo ~/Desktop: tar -cvf demo.tar demoa demoa demo/result.jsona demo/test.jsa demo/index.jsa demo/data.jsa demo/periods.js ~/Desktop:</code></pre></li><li><p><code>tar -tvf</code> 来查看对应压缩文件</p><pre class=" language-shell"><code class="language-shell"> ~/Desktop: tar -tvf demo.tardrwxr-xr-x  0 cxin   staff       0 May  7 14:11 demo/-rw-r--r--  0 cxin   staff 1497545 May  5 10:35 demo/result.json-rw-r--r--  0 cxin   staff     313 May  6 22:58 demo/test.js-rw-r--r--  0 cxin   staff    4443 Apr 25 15:47 demo/index.js-rw-r--r--  0 cxin   staff     210 Apr 29 09:44 demo/._data.js-rw-r--r--  0 cxin   staff  111200 Apr 29 09:44 demo/data.js-rw-r--r--  0 cxin   staff     578 Apr 24 09:12 demo/periods.js</code></pre></li><li><p><code>tar -xvf</code> 来提取对应压缩文件</p><pre class=" language-shell"><code class="language-shell">~/Desktop: lsdemo.tar~/Desktop: tar -xvf demo.tarx demo/x demo/result.jsonx demo/test.jsx demo/index.jsx demo/._data.jsx demo/data.jsx demo/periods.js~/Desktop: lsdemo     demo.tar~/Desktop: cd demoDesktop/demo: lsdata.js     index.js    periods.js  result.json test.js</code></pre></li></ul><h4 id="16、gzip"><a href="#16、gzip" class="headerlink" title="16、gzip"></a>16、gzip</h4><p><code>gzip</code> 命令创建和提取 <code>gzip</code> 压缩文件，还可以用 <code>gzip -d</code> 来提取压缩文件。</p><h4 id="17、unzip"><a href="#17、unzip" class="headerlink" title="17、unzip"></a>17、unzip</h4><p><code>unzip</code> 对 <code>gzip</code> 文档进行解压。在解压之前，可以使用 <code>unzip -l</code> 命令查看文件内容。</p><h4 id="18、whatis-—-What-is-this-command"><a href="#18、whatis-—-What-is-this-command" class="headerlink" title="18、whatis — What is this command"></a>18、whatis — What is this command</h4><p><code>whatis</code> 会用单行来描述给定的命令，就是解释当前命令。</p><h4 id="19、who-—-Who-Is-logged-in"><a href="#19、who-—-Who-Is-logged-in" class="headerlink" title="19、who — Who Is logged in"></a>19、who — Who Is logged in</h4><p><code>who</code> 能列出当前登录的用户名。</p><h4 id="20、uname"><a href="#20、uname" class="headerlink" title="20、uname"></a>20、uname</h4><p><code>uname</code> 会显示出关于系统的重要信息，如内核名称、主机名、内核版本、处理机类型等等，使用 <code>uname -a</code> 可以查看所有信息。</p><h4 id="21、ps-—-ProcesseS"><a href="#21、ps-—-ProcesseS" class="headerlink" title="21、ps — ProcesseS"></a>21、ps — ProcesseS</h4><p>显示系统的运行进程。</p><h4 id="22、top-—-Top-processes"><a href="#22、top-—-Top-processes" class="headerlink" title="22、top — Top processes"></a>22、top — Top processes</h4><p><code>top</code> 命令会默认按照 <code>CPU</code> 的占用情况，显示占用量较大的进程。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux 基础知识</title>
      <link href="/redux-basic/"/>
      <url>/redux-basic/</url>
      
        <content type="html"><![CDATA[<!-- ## Redux 基础知识 --><p>核心思想：</p><pre><code>(1)Web 应用是一个状态机，视图与状态是一一对应的。(2)Redux 专注于状态管理，把所有的状态都存在一个对象中。</code></pre><p>核心概念包括：<code>store</code>、<code>state</code>、<code>action</code>、<code>reducer</code>。</p><a id="more"></a><h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-store"><a href="#1-store" class="headerlink" title="1. store"></a>1. store</h4><p><code>store</code> 就是存放数据的地方，可以把它看作是一个容器。 <code>Redux</code> 应用只有一个单一的 <code>store</code>。<code>redux</code> 提供<code>createStore</code>函数来生成 <code>store</code>，函数参数是 <code>reducer</code>(后面介绍)。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-state"><a href="#2-state" class="headerlink" title="2. state"></a>2. state</h4><p>state 是 store 的某个时刻的快照，可以通过 <code>store.getState()</code> 取得当前时刻的 <code>state</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-action"><a href="#3-action" class="headerlink" title="3. action"></a>3. action</h4><p><code>action</code> 用来改变 <code>state</code>。<code>action</code> 是一个对象，其中的 <code>type</code> 属性是必须的，其他的属性一般用来设置改变 <code>state</code> 需要的数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>store.dispatch()</code> 是发出 <code>action</code> 的唯一方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-reducer"><a href="#4-reducer" class="headerlink" title="4. reducer"></a>4. reducer</h4><p><code>store</code> 收到 <code>action</code> 以后，必须给出一个新的 <code>state</code>，这样 <code>view</code> 才会发生变化。这种 <code>state</code> 的计算过程就叫做 <code>reducer</code>。它接受 <code>action</code> 和当前 <code>state</code> 作为参数，返回一个新的 <code>state</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'ADD_ONE'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>当 <code>store.dispatch</code> 发送过来一个新的 <code>action</code> ，<code>store</code> 就会自动调用 <code>reducer</code>，得到新的 <code>state</code> 。</p><h3 id="二、简单实例"><a href="#二、简单实例" class="headerlink" title="二、简单实例"></a>二、简单实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一步，创建action</span><span class="token keyword">const</span> addOne <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> addTwo <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'ADD'</span><span class="token punctuation">,</span>  num<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'SQUARE'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二步，创建reducer</span><span class="token keyword">let</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三步，创建store</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第四步，测试，通过dispatch发出action，并通过getState()取得当前state值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认值为10</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>addOne<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+1'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为10+1=11</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'乘方'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为11*11=121</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>addTwo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+2'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为121+2=123</span></code></pre><h3 id="三、Redux-工作流"><a href="#三、Redux-工作流" class="headerlink" title="三、Redux 工作流"></a>三、Redux 工作流</h3><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/redux-flow.jpg" alt="Redux工作流"></p><h3 id="四、代码组织目录结构"><a href="#四、代码组织目录结构" class="headerlink" title="四、代码组织目录结构"></a>四、代码组织目录结构</h3><p>下面对目录结构进行划分</p><p>1、一般地，将 <code>action.type</code> 设置为常量，这样有个好处：在书写错误时，会得到报错提示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span></code></pre><p>2、可以将 <code>addOne</code> 对象和 <code>addTwo</code> 对象整合成 <code>add</code> 函数的形式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>3、根据 <code>action.type</code> 的分类来拆分 <code>reducer</code> ，最终通过 <code>combineReducers</code> 方法将拆分的 <code>reducer</code> 合并起来。上例中的 <code>action</code> 类型都是数字运算，无需拆分，只需进行如下变化:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reducer/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> math<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reducer/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> math <span class="token keyword">from</span> <span class="token string">'./math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  math<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> rootReducer<span class="token punctuation">;</span></code></pre><p>4、将 <code>store</code> 存储到 <code>store/index.js</code> 文件中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// store/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">'../reducer'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>5、最终，根路径下的 <code>index.js</code> 内容如下所示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认值为10</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+1'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为10+1=11</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'乘方'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为11*11=121</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发起'+2'的action</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前值为121+2=123</span></code></pre><p>最终的目录结构：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/redux-directory-structure.png" alt="目录结构"></p><h3 id="四、UI-层"><a href="#四、UI-层" class="headerlink" title="四、UI 层"></a>四、UI 层</h3><p>前面的示例中，只是 <code>redux</code> 的状态改变，下面利用 <code>UI</code> 层来建立 <code>view</code> 和 <code>state</code> 的联系，将根目录下的<code>index.js</code> 的内容更改如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"乘方"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>虽然可以显示数字，但是点击按钮时，却不能重新渲染页面。</p><h4 id="1-store-subscribe"><a href="#1-store-subscribe" class="headerlink" title="1. store.subscribe()"></a>1. store.subscribe()</h4><p>接下来介绍 <code>store.subscribe()</code> 方法了，该方法用来设置监听函数，一旦 <code>state</code> 发生变化，就自动执行这个函数。该方法的返回值是一个函数，调用这个函数可以解除监听。</p><p>下面将示例代码更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、异步"><a href="#五、异步" class="headerlink" title="五、异步"></a>五、异步</h3><p><code>redux</code> 默认只处理同步，对于 <code>API</code> 请求这样的异步任务则无能为力，接下来尝试使用<code>axios</code>的<code>get</code>方法来请求下面这个<code>API</code>。</p><pre><code>https://jsonplaceholder.typicode.com/posts/2</code></pre><p>获取的数据如下:</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"qui est esse"</span><span class="token punctuation">,</span>  <span class="token property">"body"</span><span class="token operator">:</span> <span class="token string">"est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"</span><span class="token punctuation">}</span></code></pre><p>然后，将其 <code>id</code> 值设置为 <code>state.math</code> 的值，代码修改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET <span class="token operator">=</span> <span class="token string">'SET'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// reduce/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> math <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> ADD<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">case</span> SQUARE<span class="token punctuation">:</span>      <span class="token keyword">return</span> state <span class="token operator">*</span> state<span class="token punctuation">;</span>    <span class="token keyword">case</span> SET<span class="token punctuation">:</span>      <span class="token keyword">return</span> action<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> math<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是，虽然 <code>API</code> 是异步操作，但 <code>store.dispatch</code> 并不是异步，而 <code>axios</code> 通过 <code>get</code> 方法请求回来数据后，<code>store.dispatch</code> 在 <code>axios</code> 中的 <code>then</code> 方法中同步取得数据。</p><p>如果要使用真正的异步操作，即把 <code>axios</code> 方法封装到 <code>store.dispatch</code> 中，需要使用 <code>redux-thunk</code> 中间件。</p><h4 id="1-redux-thunk"><a href="#1-redux-thunk" class="headerlink" title="1. redux-thunk"></a>1. redux-thunk</h4><p>首先，使用 <code>npm</code> 进行安装：</p><pre class=" language-shell"><code class="language-shell">$ npm install --save redux-thunk</code></pre><p>然后，使用 <code>applyMiddleware</code> 来使用 <code>thunk</code> 中间件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span><span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">'../reducer'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>rootReducer<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接着来定义 <code>setNum</code> 这个 <code>action creator</code> ，然后在 <code>index.js</code> 文件的 <code>DOM</code> 加载完成后就发出 <code>setNum</code></p><p><strong>[注意]: </strong>如果 <code>action</code> 是一个对象，则它就是一个 <code>action</code> ，如果 <code>action</code> 是一个函数，则它是一个<code>action creator</code> ，即 <code>action</code> 制造器，修改的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span>      num<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>【提示信息】</p><p>如果做的更完备一点，应该把异步请求时的提示信息也加上。增加一个 <code>fetch</code> 的 <code>action</code>，用于控制<code>fetch</code> 过程的提示信息及显示隐藏情况，代码更改如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/fetch.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  SET_FETCH_MESSAGE<span class="token punctuation">,</span>  HIDE_FETCH_MESSAGE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> startFetch <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span>  message<span class="token punctuation">:</span> <span class="token string">'开始发送异步请求'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> successFetch <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span>  message<span class="token punctuation">:</span> <span class="token string">'成功接收数据'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> failFetch <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET_FETCH_MESSAGE<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'接收数据失败'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> hideFetchMessage <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> HIDE_FETCH_MESSAGE <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// action/math.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ADD<span class="token punctuation">,</span> SQUARE<span class="token punctuation">,</span> SET <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> startFetch<span class="token punctuation">,</span> successFetch<span class="token punctuation">,</span> failFetch<span class="token punctuation">,</span> hideFetchMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./fetch'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> uri <span class="token operator">=</span> <span class="token string">'https://jsonplaceholder.typicode.com/posts/2'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span> num <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> SQUARE <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setNum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">dispatch</span><span class="token punctuation">(</span>startFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> axios    <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>successFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> SET<span class="token punctuation">,</span> num<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span>failFetch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>hideFetchMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// constants/ActionTypes.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SQUARE <span class="token operator">=</span> <span class="token string">'SQUARE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET <span class="token operator">=</span> <span class="token string">'SET'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET_FETCH_MESSAGE <span class="token operator">=</span> <span class="token string">'SET_FETCH_MESSAGE'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> HIDE_FETCH_MESSAGE <span class="token operator">=</span> <span class="token string">'HIDE_FETCH_MESSAGE'</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// reduce/fetch.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  SET_FETCH_MESSAGE<span class="token punctuation">,</span>  HIDE_FETCH_MESSAGE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../constants/ActionTypes'</span><span class="token punctuation">;</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">{</span>  message<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>  isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> SET_FETCH_MESSAGE<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> isShow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> action<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> HIDE_FETCH_MESSAGE<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> fetch<span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> square<span class="token punctuation">,</span> setNum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./action/math'</span><span class="token punctuation">;</span><span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>math<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"设置Num"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+1"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> value<span class="token operator">=</span><span class="token string">"+2"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input        type<span class="token operator">=</span><span class="token string">"button"</span>        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span><span class="token punctuation">}</span>        value<span class="token operator">=</span><span class="token string">"乘方"</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>isShow <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fetch<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="六、React-Redux-基础知识点"><a href="#六、React-Redux-基础知识点" class="headerlink" title="六、React-Redux 基础知识点"></a>六、React-Redux 基础知识点</h3><p>前面的代码中，我们是通过 <code>store.subscribe()</code> 方法监控 <code>state</code> 状态的变化来更新 <code>UI</code> 层的。而使用 <code>react-redux</code>，可以让组件动态订阅状态树。状态树一旦被修改，组件能自动刷新显示最新数据。</p><p><code>react-redux</code> 将所有组件分成两大类：展示组件和容器组件。展示组件只负责 <code>UI</code> 呈现，所有数据由参数 <code>props</code> 提供；容器组件则负责管理数据和业务逻辑，带有内部状态，可使用 <code>redux</code> 的 <code>API</code> 。要使用 <code>react-redux</code>，就要遵守它的组件拆分规范。</p><h4 id="1-provider"><a href="#1-provider" class="headerlink" title="1. provider"></a>1. provider</h4><p><code>react-redux</code> 提供 <code>Provider</code> 组件，可以让容器组件默认可以拿到 <code>state</code>，而不用当容器组件层级很深时，一级级将 <code>state</code> 传下去。</p><p>将 <code>index.js</code> 文件更改如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> MathContainer <span class="token keyword">from</span> <span class="token string">'./container/MathContainer'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>MathContainer <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>按照组件拆分规范，将原来 <code>index.js</code> 中相关代码，分拆到 <code>container/MathContainer</code> 和 <code>component/Math</code> 这两个组件中。</p><h4 id="2-connect"><a href="#2-connect" class="headerlink" title="2. connect"></a>2. connect</h4><p><code>react-redux</code> 提供 <code>connect</code> 方法，用于从展示组件生成容器组件。<code>connect</code> 的意思就是将这两种组件(容器组件和展示组件)连接起来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MathContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Math</code> 是展示组件，<code>MathContainer</code> 就是由 <code>React-redux</code> 通过 <code>connect</code> 方法自动生成的容器组件.</p><p>为了定义业务逻辑，需要给出下面两方面的信息：</p><ul><li><p>输入逻辑：外部的数据(即<code>state</code>对象)如何转换为展示组件的参数</p></li><li><p>输出逻辑：用户发出的动作如何变为 <code>Action</code> 对象，从展示组件传出去</p></li></ul><p>因此，<code>connect</code> 方法的完整 <code>API</code> 如下:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">const</span> MathContainer <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span>  mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>connect</code> 方法接受两个参数：<code>mapStateToProps</code> 和 <code>mapDispatchToProps</code>。它们定义了展示组件的业务逻辑。前者负责输入逻辑，即将 <code>state</code> 映射到 <code>UI</code> 组件的参数(<code>props</code>)，后者负责输出逻辑，即将用户对展示组件的操作映射成 <code>Action</code>，下面分别介绍这两个参数。</p><h4 id="3-mapStateToProps"><a href="#3-mapStateToProps" class="headerlink" title="3. mapStateToProps()"></a>3. mapStateToProps()</h4><p><code>mapStateToProps</code> 建立一个从外部的 <code>state</code> 对象到展示组件的 <code>props</code> 对象的映射关系。作为参数，<code>mapStateToProps</code> 执行后应该返回一个对象，里面的每一个键值对就是一个映射。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapStateToProps</code> 的第一个参数总是 <code>state</code> 对象，还可以使用第二个参数，代表容器组件的 <code>props</code> 对象。使用 <code>ownProps</code> 作为参数后，如果容器组件的参数发生变化，也会引发展示组件重新渲染。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapStateToProps</code> 会订阅 <code>Store</code> ，每当 <code>state</code> 更新的时候，就会自动执行，重新计算展示组件的参数，从而触发展示组件的重新渲染。<code>connect</code> 方法可以省略 <code>mapStateToProps</code> 参数，那样，展示组件就不会订阅 <code>Store</code>，就是说 <code>Store</code> 的更新不会引起展示组件的更新。</p><h4 id="4-mapDispatchToProps"><a href="#4-mapDispatchToProps" class="headerlink" title="4. mapDispatchToProps"></a>4. mapDispatchToProps</h4><p><code>mapDispatchToProps</code> 是 <code>connect</code> 函数的第二个参数，用来建立展示组件的参数到 <code>store.dispatch</code> 方法的映射。也就是说，它定义了用户的哪些操作应该当作 <code>action</code> ，传给 <code>Store</code> 。它可以是一个函数，也可以是一个对象。</p><p>如果 <code>mapDispatchToProps</code> 是一个函数，会得到 <code>dispatch</code> 和 <code>ownProps</code> (容器组件的 <code>props</code> 对象)两个参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> ownProps<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    onSetNumClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>mapDispatchToProps</code> 作为函数，应该返回一个对象，该对象的每个键值对都是一个映射，定义了展示组件的参数怎样发出 <code>action</code>。</p><p>如果 <code>mapDispatchToProps</code> 是一个对象，它的每个键名也是对应展示组件的同名参数，键值应该是一个函数，会被当作 <code>action creator</code>，返回的 <code>action</code> 会由 <code>redux</code> 自动发出。</p><p>因此，上面的写法简写如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span>  onsetNumClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>所以，最终的目录结构就变成下面这个样子（你也可以把 <code>store.js</code> 放在单独的 <code>store</code> 文件夹里面）：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/redux-folder-structure.png" alt="目录结构"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 高阶组件</title>
      <link href="/react-high-order-component/"/>
      <url>/react-high-order-component/</url>
      
        <content type="html"><![CDATA[<!-- ## React 高阶组件 --><p>高阶组件 <code>（HOC）</code> 是 <code>react</code> 中对组件逻辑进行重用的高级技术。高阶组件本身并不是 React API，它只是一种模式，这种模式是由 react 自身的组合性质产生的。</p><p>具体而言， <strong>高阶组件就是一个函数（而不是组件），且该函数接受一个你传递给它的组件作为参数，并返回一个新的组件</strong> 。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> NewComponent <span class="token operator">=</span> <span class="token function">higherOrderComponent</span><span class="token punctuation">(</span>OldComponent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="一、定义高阶组件"><a href="#一、定义高阶组件" class="headerlink" title="一、定义高阶组件"></a>一、定义高阶组件</h3><p>我们来看一个很简单的高级组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> WrappedComponent <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do some things</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><a id="more"></a><p>看起来这个高级组件什么用都没有，它就是简单的构建了一个新的组件类 <code>NewComponent</code> ，然后把传进入去的 <code>WrappedComponent</code> 渲染出来。但是我们可以给 <code>NewCompoent</code> 做一些数据启动工作：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现在 <code>NewComponent</code> 会根据第二个参数 <code>name</code> 在组件挂载阶段从 <code>LocalStorage</code> 中加载数据，并且 <code>setState</code> 到自己的<code>state.data</code> 中，而渲染的时候将 <code>state.data</code> 通过 <code>props.data</code> 传给 <code>WrappedComponent</code>。</p><h3 id="二、使用高级组件"><a href="#二、使用高级组件" class="headerlink" title="二、使用高级组件"></a>二、使用高级组件</h3><p>假设上面的代码是在 <code>src/wrapWithLoadData.js</code> 文件中的，我们可以在别的地方这么用它：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithLoadData <span class="token keyword">from</span> <span class="token string">'./wrapWithLoadData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InputWithUserName</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>InputWithUserName <span class="token operator">=</span> <span class="token function">wrapWithLoadData</span><span class="token punctuation">(</span>InputWithUserName<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> InputWithUserName<span class="token punctuation">;</span></code></pre><p>假如 <code>InputWithUserName</code> 的功能需求是挂载的时候从 <code>LocalStorage</code> 里面加载<code>username</code>字段作为 <code>&lt;input /&gt;</code> 的<code>value</code> 值，现在有了 <code>wrapWithLoadData</code>，我们可以很容易地做到这件事情。</p><p>只需要定义一个非常简单的 <code>InputWithUserName</code>，它会把 <code>props.data</code> 作为 <code>&lt;input /&gt;</code> 的 <code>value</code> 值。然把这个组件和 <code>&#39;username&#39;</code> 传给 <code>wrapWithLoadData</code>，<code>wrapWithLoadData</code> 会返回一个新的组件，我们用这个新的组件覆盖原来的 <code>InputWithUserName</code>，然后再导出去模块。</p><p>这样，别人在使用 <code>InputWithUserName</code> 这个组件的时候，实际上是用了被加工的组件。根据 <code>wrapWithLoadData</code> 的代码我们可以知道，这个新的组件挂载的时候会先去 <code>LocalStorage</code> 加载数据，渲染的时候再通过 <code>props.data</code> 传给真正的 <code>InputWithUserName</code>。</p><p>然后，我又写了一个文本输入框组件，该组件遵循类似的模式：它也需要 LocalStorage 加载 <code>&#39;content&#39;</code> 字段的数据。我们只需要定义一个新的 <code>TextareaWithContent</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithLoadData <span class="token keyword">from</span> <span class="token string">'./wrapWithLoadData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TextareaWithContent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>TextareaWithContent <span class="token operator">=</span> <span class="token function">wrapWithLoadData</span><span class="token punctuation">(</span>TextareaWithContent<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> TextareaWithContent<span class="token punctuation">;</span></code></pre><p>我们根本不需要重复写从 <code>LocalStorage</code> 加载数据字段的逻辑，直接用 <code>wrapWithLoadData</code> 包装一下就可以了。</p><h3 id="三、高阶组件的灵活性"><a href="#三、高阶组件的灵活性" class="headerlink" title="三、高阶组件的灵活性"></a>三、高阶组件的灵活性</h3><p>高阶组件的这种方式其实就是设计模式里面的装饰者模式。它通过组合的方式达到很高的灵活程度。</p><p>假设现在我们需求变化了，现在要的是通过 <code>Ajax</code> 加载数据而不是从 <code>LocalStorage</code> 加载数据。我们只需要新建一个<code>wrapWithAjaxData</code> 高阶组件：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ajax<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/data/'</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WrappedComponent</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> NewComponent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>其实就是改了一下 <code>wrapWithLoadData</code> 的 <code>componentWillMount</code> 中的逻辑，改成了从服务器加载数据。现在只需要把<code>InputWithUserName</code> 稍微改一下：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> wrapWithAjaxData <span class="token keyword">from</span> <span class="token string">'./wrapWithAjaxData'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">InputWithUserName</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>InputWithUserName <span class="token operator">=</span> <span class="token function">wrapWithAjaxData</span><span class="token punctuation">(</span>InputWithUserName<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> InputWithUserName<span class="token punctuation">;</span></code></pre><p>只要改一下包装的高阶组件就可以达到需要的效果。而且我们并没有改动 <code>InputWithUserName</code> 组件内部的任何逻辑，也没有改动 <code>Index</code> 的任何逻辑，只是改动了中间的高阶组件函数。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 基础知识</title>
      <link href="/react-basic/"/>
      <url>/react-basic/</url>
      
        <content type="html"><![CDATA[<!-- ## React 基础知识点讲解 --><h3 id="零、介绍"><a href="#零、介绍" class="headerlink" title="零、介绍"></a>零、介绍</h3><p><code>React.js</code> 是一个帮助你构建页面 <code>UI</code> 的库。如果你熟悉 <code>MVC</code> 概念的话，那么 <code>React</code> 的组件就相当于 <code>MVC</code> 里面的 <code>View</code>。如果你不熟悉也没关系，你可以简单地理解为，<code>React.js</code>将帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。</p><p>一个组件的显示形态和行为有可能是由某些数据决定的。而数据是可能发生改变的，这时候组件的显示形态就会发生相应的改变。而 <code>React.js</code> 也提供了一种非常高效的方式帮助我们做到了数据和组件显示形态之间的同步。</p><p>React.js 不是一个框架，它只是一个库。它只提供 <code>UI （view</code>）层面的解决方案。在实际的项目当中，它并不能解决我们所有的问题，需要结合其它的库，例如 <code>Redux</code>、<code>React-router</code> 等来协助提供完整的解决方法。</p><a id="more"></a><h3 id="一、Hello-World"><a href="#一、Hello-World" class="headerlink" title="一、Hello World"></a>一、Hello World</h3><p><code>create-react-app</code> 是来自于 <code>Facebook</code> 出品的零配置命令行工具，能够帮你自动创建基于<code>jpgack+ES6</code> 的最简易的 <code>React</code> 项目模板。</p><pre class=" language-shell"><code class="language-shell">npm install -g create-react-appcreate-react-app my-appcd my-app/npm start</code></pre><p>执行完上述命令之后，你可以直接打开 <a href="http://localhost:3000，即可以看到你" target="_blank" rel="noopener">http://localhost:3000，即可以看到你</a> <code>React APP</code> 的运行效果：</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/create-react-app.png" alt="create-react-app"></p><p><strong>目录结构：</strong></p><pre><code>my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   ├── favicon.ico│   ├── index.html│   └── manifest.json└── src    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── serviceWorker.js</code></pre><p>一个简单 <code>Hello World</code> 的例子：</p><pre class=" language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="二、JSX-简介"><a href="#二、JSX-简介" class="headerlink" title="二、JSX 简介"></a>二、JSX 简介</h3><p><code>JSX —— React.js</code> 描述页面 <code>UI</code> 的方式。看起来，<code>JSX</code> 有点像模板语言，其实它是由 <code>React</code> 内部实现的。浏览器中，看到的 JSX 内容转换成 <code>html</code> 显示了出来。</p><h4 id="1、在-JSX-中使用表达式"><a href="#1、在-JSX-中使用表达式" class="headerlink" title="1、在 JSX 中使用表达式"></a>1、在 JSX 中使用表达式</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> formatName <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>推荐在 JSX 代码的外面扩上一个小括号，这样可以防止 <a href="http://stackoverflow.com/q/2846283" target="_blank" rel="noopener">分号自动插入</a> 的 <code>bug</code>。</p><h4 id="2、JSX-本身其实也是一种表达式"><a href="#2、JSX-本身其实也是一种表达式" class="headerlink" title="2、JSX 本身其实也是一种表达式"></a>2、JSX 本身其实也是一种表达式</h4><p>在编译之后，<code>JSX</code> 其实会被转化为普通的 <code>JavaScript</code> 对象。那就可以在 <code>if</code> 或者 <code>for</code> 语句里使用 <code>JSX</code>，将它赋值给变量，当作参数传入，作为返回值也可以：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">'E2E'</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">'team'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> formatName <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> getGreeting <span class="token operator">=</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> Stranger<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">getGreeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3、JSX-嵌套"><a href="#3、JSX-嵌套" class="headerlink" title="3、JSX 嵌套"></a>3、JSX 嵌套</h4><p>如果 <code>JSX</code> 标签是闭合式的，那么你需要在结尾处用 <code>/&gt;</code>, 就好像 XML/HTML 一样：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>JSX 标签同样可以相互嵌套：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：多行的 jsx 要用小括号包裹，里面如果有多个 <code>DOM</code> 节点，也需要用一个 <code>DOM</code> 节点包裹起来，所以这里加了最外面的 <code>div</code> 。</p><h4 id="4、JSX-属性"><a href="#4、JSX-属性" class="headerlink" title="4、JSX 属性"></a>4、JSX 属性</h4><ul><li>可以使用引号来定义以字符串为值的属性：</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabIndex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>注意：由于相对<code>HTML</code> 而言，<code>JSX</code> 更加类似于<code>JavaScript</code>, <code>React DOM</code> 使用驼峰命名代替<code>HTML</code>中的属性名。</p><ul><li>也可以使用大括号来定义以 <code>JavaScript</code> 表达式为值的属性：</li></ul><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><p>注意：使用了大括号包裹的 <code>JavaScript</code> 表达式时就不能再到外面套引号了，JSX 会将引号中的内容识别为字符串而不是表达式。</p><h4 id="5、JSX-能够防注入攻击"><a href="#5、JSX-能够防注入攻击" class="headerlink" title="5、JSX 能够防注入攻击"></a>5、JSX 能够防注入攻击</h4><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'First &amp;middot; &lt;i>Second&lt;/i>'</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token keyword">return</span> element<span class="token punctuation">}</span></code></pre><p>也就是在执行渲染前，<code>React DOM</code> 会默认将要显示的内容中有任何的标签或者脚本都会进行转义编码，按照字符串直接显示出来。 这可以避免应用被注入，可以避免<code>XSS</code>攻击。所以可以放心地在<code>JSX</code> 当中使用用户输入。</p><p>如果需要按照 <code>html</code> 显示的内容，可以使用 <code>dangerouslySetInnerHTML</code> 来实现。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> content <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span></code></pre><h4 id="6、JSX-代表-Objects"><a href="#6、JSX-代表-Objects" class="headerlink" title="6、JSX 代表 Objects"></a>6、JSX 代表 Objects</h4><p><code>Babel</code> 转译器会把 <code>JSX</code> 转换成一个名为 <code>React.createElement()</code> 的方法调用。</p><p>下面两种代码的作用是完全相同的：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">'h1'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">'greeting'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>React.createElement()</code> 这个方法首先会进行一些避免 bug 的检查，之后会返回一个类似下面例子中的对象：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 注意: 以下示例是简化过的（不代表在 React 源码中是这样）</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    className<span class="token punctuation">:</span> <span class="token string">'greeting'</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token string">'Hello, world'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这样的对象被称为 <strong>React 元素</strong>。它代表所有可以在屏幕上看到的东西。<code>React</code> 通过读取这些对象来构建 <code>DOM</code> 并保持数据内容一致。</p><h3 id="三、元素"><a href="#三、元素" class="headerlink" title="三、元素"></a>三、元素</h3><p>元素（ <code>element</code> ）是一个 <code>React</code> 应用的最小组成单元。</p><h4 id="1、将元素渲染到-DOM-中"><a href="#1、将元素渲染到-DOM-中" class="headerlink" title="1、将元素渲染到 DOM 中"></a>1、将元素渲染到 DOM 中</h4><p><code>index.js</code></p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里 <code>element</code> 就是一个元素， 元素描述了我们在屏幕上会看到什么。<code>React</code> 元素不是组件，组件由元素构成。</p><p>可以通过 <code>ReactDOM.render</code> 把元素渲染到 <code>DOM</code> 中，<code>id</code> 为 <code>root</code> 的这个节点在 <code>index.html</code> 中。</p><p>浏览器中，可以看到 <code>element</code> 元素显示到了页面上。</p><h4 id="2、React-只会更新必要的内容"><a href="#2、React-只会更新必要的内容" class="headerlink" title="2、React 只会更新必要的内容"></a>2、React 只会更新必要的内容</h4><p><code>Index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/React/granular-dom-updates.gif" alt="更新必要部分"></p><h3 id="四、组件-amp-Props"><a href="#四、组件-amp-Props" class="headerlink" title="四、组件&amp;Props"></a>四、组件&amp;Props</h3><p>组件（ components ）可以让我们把 UI 分割成独立的可以复用的片段。概念上来讲，组件类似于 JS 的函数，它接收任意的输入（也就是 props ，属性），返回 React 元素。</p><h4 id="1、函数式组件"><a href="#1、函数式组件" class="headerlink" title="1、函数式组件"></a>1、函数式组件</h4><p>定义一个组件最简单的方式是写一个 JS 的函数：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Welcome <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个函数就是一个完整的 React 组件，因为它接收一个 props 对象作为参数，返回一个 React 元素。这样的组件叫做函数式组件。</p><h4 id="2、class-式组件"><a href="#2、class-式组件" class="headerlink" title="2、class 式组件"></a>2、class 式组件</h4><p>另外一个定义组件的方式就是使用 ES6 的 class：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从 React 的角度，上面两个组件是等价的。不过 class 式组件功能会多一些。</p><h4 id="3、组件的组合"><a href="#3、组件的组合" class="headerlink" title="3、组件的组合"></a>3、组件的组合</h4><p>组件可以在它的输出中引用其它组件，这就可以让我们用同一组件来抽象出任意层次的细节。在 React 应用中，按钮、表单、对话框、整个屏幕的内容等，这些通常都被表示为组件。</p><p>例如，我们可以创建一个<code>App</code>组件，用来多次渲染<code>Welcome</code>组件：</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cahal<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Edite<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器中，显示了三个 <code>Welcome</code> 。</p><h3 id="五、State-amp-生命周期"><a href="#五、State-amp-生命周期" class="headerlink" title="五、State&amp;生命周期"></a>五、State&amp;生命周期</h3><h4 id="1、class-式组件中才能用-state"><a href="#1、class-式组件中才能用-state" class="headerlink" title="1、class 式组件中才能用 state"></a>1、class 式组件中才能用 state</h4><p><code>class</code> 式组件要比函数式组件功能多，使用 <code>state</code> 就是只能用在 <code>class</code> 式组件中的功能。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Clock</code> 是一个 <code>class</code> 式组件。里面初始化了 <code>state</code> 值。然后 <code>render</code> 函数中，显示出了这个 <code>state</code> 值。</p><h4 id="2、给-class-添加生命周期方法"><a href="#2、给-class-添加生命周期方法" class="headerlink" title="2、给 class 添加生命周期方法"></a>2、给 class 添加生命周期方法</h4><p>每当 <code>Clock</code> 组件第一次加载到 <code>DOM</code> 中的时候，我们都想<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" target="_blank" rel="noopener">生成定时器</a>，这在 <code>React</code> 中被称为<code>挂载</code></p><p>同样，每当 <code>Clock</code> 生成的这个 <code>DOM</code> 被移除的时候，我们也会想要<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval" target="_blank" rel="noopener">清除定时器</a>，这在 <code>React</code> 中被称为<code>卸载</code>。</p><p><code>index.js</code>：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  tick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>组件初次渲染之后，会自动执行 <code>componentDidMount</code> 这个生命周期方法，这里面我们设置一个定时器，每秒钟执行一下 <code>tick</code> 方法。这里把定时器 <code>id</code> 赋值给了 <code>this.timerID</code> 。</p><p>组件被从 <code>DOM</code> 移除的时候，会自动执行 <code>componentWillUnmount</code> ，这里面我们需要清除一下定时器，释放资源。</p><p>来定义关键的 <code>tick</code> 函数，里面的关键动作就是更新 <code>state</code> 值。注意一定要用 <code>this.setState</code> 来更新。</p><p>浏览器中，可以看到每秒钟界面显示时间都会更新。</p><h3 id="六、事件处理"><a href="#六、事件处理" class="headerlink" title="六、事件处理"></a>六、事件处理</h3><h4 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法"></a>1、基本用法</h4><p>React 元素的事件处理和 DOM 元素的很相似。但是有一点语法上的不同:</p><ul><li>React 事件绑定属性的命名采用驼峰式写法，而不是小写；</li><li>如果采用 JSX 的语法，需要传入一个函数作为事件处理函数(<strong>推荐使用 ES6 的箭头函数</strong>)，而不是一个字符串(DOM 元素的写法)。</li></ul><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isToggleOn<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This binding is necessary to make `this` work in the callback</span>    <span class="token comment" spellcheck="true">// this.handleClick = this.handleClick.bind(this);</span>  <span class="token punctuation">}</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>prevState <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      isToggleOn<span class="token punctuation">:</span> <span class="token operator">!</span>prevState<span class="token punctuation">.</span>isToggleOn    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isToggleOn <span class="token operator">?</span> <span class="token string">'ON'</span> <span class="token punctuation">:</span> <span class="token string">'OFF'</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toggle</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：类的方法默认是不会<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener">绑定</a> <code>this</code> 的。可以将 <code>handleClick</code> 直接赋值为一个 <code>es6</code> 箭头函数，这样的好处是里面直接使用 <code>this</code> 而无需绑定。由于 <code>this.setState</code> 的异步性，所以参数不能传入对象，而要传入一个函数，才能稳妥的基于之前的状态来获得最新状态值。</p><h4 id="2、给事件处理函数传参"><a href="#2、给事件处理函数传参" class="headerlink" title="2、给事件处理函数传参"></a>2、给事件处理函数传参</h4><p>通常我们会为事件处理程序传递额外的参数。例如，若是 <code>id</code> 是你要删除那一行的 <code>id</code>：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  deleteRow <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>比如有一个列表，这里封装成 List 组件。里面 <code>deleteRow</code> 需要接受行号，这里就是 id ，才能知道要删除哪一行的内容。</p><p>如果 <code>deleteRow</code> 中，还想要事件对象：</p><pre class=" language-jsx"><code class="language-jsx">  deleteRow <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token punctuation">}</span></code></pre><p><code>ES6</code> 参数中拿到 <code>e</code> ，把它作为第二个参数传递给 <code>deleteRow</code> 即可。</p><h3 id="七、条件渲染"><a href="#七、条件渲染" class="headerlink" title="七、条件渲染"></a>七、条件渲染</h3><p>在 <code>React</code> 中，你可以创建不同的组件来封装各种你需要的行为。然后还可以根据应用的状态变化只渲染其中的一部分。</p><p><code>React</code> 中的条件渲染和 <code>JavaScript</code> 中的一致，使用 <code>JavaScript</code> 操作符 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank" rel="noopener"><code>if</code></a> 或<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator" target="_blank" rel="noopener">条件运算符</a>来创建表示当前状态的元素，然后让 <code>React</code> 根据它们来更新 <code>UI</code>。</p><h4 id="1、if-条件渲染"><a href="#1、if-条件渲染" class="headerlink" title="1、if 条件渲染"></a>1、if 条件渲染</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome back<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> GuestGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please sign up<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Greeting <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先定义两个函数式组件，一个是跟已经登陆的用户打招呼，另一个跟访客打招呼。下面定义 <code>Greeting</code> 组件。随着 <code>isLoggedIn</code> 的值的不同，会显示出不同的内容。</p><p>浏览器中，当 <code>isLoggedIn</code> 设置为 <code>true</code> 和 <code>false</code> ，会分别显示不同的打招呼信息。</p><h4 id="2、元素变量"><a href="#2、元素变量" class="headerlink" title="2、元素变量"></a>2、元素变量</h4><p>你可以使用变量来储存元素。它可以帮助你有条件的渲染组件的一部分，而输出的其他部分不会更改。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome Back<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> GuestGreeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please Sign Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> LoginButton <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> LogoutButton <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Logout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token keyword">const</span> Greeting <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoggedIn <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> <span class="token punctuation">{</span>    isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleLoginClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleLogoutClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoggedIn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginControl</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>添加两个按钮组件进来，一个是登录，一个是登出。创建一个 <code>LoginControl</code> 组件，初始化 <code>isLoggedIn</code> ，添加登录和登出对应的处理函数，里面对 <code>isLoggedIn</code> 状态值进行了修改。</p><h4 id="3、与运算符-amp-amp"><a href="#3、与运算符-amp-amp" class="headerlink" title="3、与运算符 &amp;&amp;"></a>3、与运算符 &amp;&amp;</h4><p><code>JavaScript</code> 的逻辑与 <code>&amp;&amp;</code>，它可以方便地条件渲染一个元素。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> Mailbox <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> unreadMessages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'Re: React'</span><span class="token punctuation">,</span> <span class="token string">'Re:Re: React'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mailbox</span> <span class="token attr-name">unreadMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义 <code>Mailbox</code> 组件，属性中拿到未读邮件的数组，下面用 <code>&amp;&amp;</code> 号实现 <code>if</code> 的效果，如果未读邮件数量大于 0，就显示未读邮件的数量；如果数量为 0，那么大括号里面内容就求值为 <code>undefined</code> ，也就是什么都不会显示了。</p><h4 id="4、三目运算符"><a href="#4、三目运算符" class="headerlink" title="4、三目运算符"></a>4、三目运算符</h4><p>在下面的例子中，我们用它来有条件的渲染一小段文本：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      The user is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token punctuation">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> logged <span class="token keyword">in</span><span class="token punctuation">.</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同样它也可以用在较大的表达式中：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="5、阻止组件渲染"><a href="#5、阻止组件渲染" class="headerlink" title="5、阻止组件渲染"></a>5、阻止组件渲染</h4><p>在极少数情况下，你可能希望隐藏组件，即使它被其他组件渲染。让 <code>render</code> 方法返回 <code>null</code> 而不是它的渲染结果即可实现。</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> WarningBanner <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Warning<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> showWarning<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleToggleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      showWarning<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WarningBanner</span> <span class="token attr-name">warn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning <span class="token operator">?</span> <span class="token string">'Hide'</span> <span class="token punctuation">:</span> <span class="token string">'Show'</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="八、列表-amp-Keys"><a href="#八、列表-amp-Keys" class="headerlink" title="八、列表 &amp; Keys"></a>八、列表 &amp; Keys</h3><h4 id="1、渲染多个组件"><a href="#1、渲染多个组件" class="headerlink" title="1、渲染多个组件"></a>1、渲染多个组件</h4><p>先看下在 <code>Javascript</code> 中如何转化列表：</p><p>我们使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener"><code>map()</code></a>函数让数组中的每一项翻倍,我们得到了一个新的数列<code>doubled</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>number <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>React</code>中，把数组转化为数列元素的过程是相似的：</p><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'how are you'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> List <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> messages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>t<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">messages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：此时打开浏览器控制台会有报错信息：<code>Warning: Each child in an array or iterator should have a unique &quot;key&quot; prop.</code> 。原因是每一个列表条目都应该有一个独一无二的 <code>key</code> 。</p><h4 id="2、Key"><a href="#2、Key" class="headerlink" title="2、Key"></a>2、Key</h4><p>把数据的 id 作为 key 是非常常见的做法：</p><p><code>index.js</code> ：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'React'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Re: React'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Re:Re: React'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> List <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> messages <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>t <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>t<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>list<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span> <span class="token attr-name">messages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一个元素的 <code>key</code> 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用来自数据的 <code>id</code> 作为元素的 key。</p><p>实际开发中的数据一般都是配有 <code>id</code> 的，将 <code>id</code> 作为 <code>key</code> 是一个很好的做法。如果用数组 <code>index</code> 作为 key 也是勉强可以的，但是由于 <code>index</code> 可能会随着数组元素的增减发生变化，如果列表可以重新排序，这会导致渲染变得很慢。</p><h3 id="九、表单"><a href="#九、表单" class="headerlink" title="九、表单"></a>九、表单</h3><p>当用户提交表单时，<code>HTML</code> 的默认行为会使这个表单跳转到一个新页面。在 <code>React</code> 中亦是如此。</p><p>但大多数情况下，我们都会构造一个处理提交表单并可访问用户输入表单数据的函数。实现这一点的标准方法是使用一种称为<strong>受控组件</strong>的技术。</p><h4 id="1、受控组件"><a href="#1、受控组件" class="headerlink" title="1、受控组件"></a>1、受控组件</h4><p><code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code> 都要绑定一个 <code>change</code> 事件，每当表单的状态发生变化，都会被写入组件的 <code>state</code> 中,这种组件在 <code>React</code> 中被称为受控组件。</p><h4 id="2、form-基本用法"><a href="#2、form-基本用法" class="headerlink" title="2、form 基本用法"></a>2、form 基本用法</h4><p><code>index.js</code> :</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleChange <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      username<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleSubmit <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        username<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>由于 <code>value</code> 属性是在我们的表单元素上设置的，因此显示的值将始终为 <code>React</code> 数据源上<code>this.state.value</code> 的值。由于每次按键都会触发 <code>handleChange</code> 来更新当前 <code>React</code> 中的 <code>state</code>，所展示的值也会随着不同用户的输入而更新。</p><h4 id="3、处理多个输入"><a href="#3、处理多个输入" class="headerlink" title="3、处理多个输入"></a>3、处理多个输入</h4><p>你有处理多个受控的 <code>input</code> 元素时，你可以通过给每个元素添加一个 <code>name</code> 属性，来让处理函数根据 <code>event.target.name</code> 的值来选择做什么。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Form</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  handleChange <span class="token operator">=</span> event <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  handleSubmit <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        Username<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Email<span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Gitbook 来做笔记?</title>
      <link href="/notes-with-gitbook/"/>
      <url>/notes-with-gitbook/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何使用 Gitbook 来做笔记? --><p>根据<a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md" target="_blank" rel="noopener">官网说明</a> 第一步，先安装</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> gitbook-cli -g</code></pre><p>然后，创建一个笔记文件夹</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> my-note</code></pre><a id="more"></a><p>然后执行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note$ gitbook init</code></pre><p>这样，可以生成两个文件</p><ul><li><code>README.md</code> 的内容会显示在书皮上</li><li><code>SUMMARY.md</code> 是目录</li></ul><h3 id="一、启动服务器，查看和编辑书籍"><a href="#一、启动服务器，查看和编辑书籍" class="headerlink" title="一、启动服务器，查看和编辑书籍"></a>一、启动服务器，查看和编辑书籍</h3><pre class=" language-bash"><code class="language-bash">$ gitbook serve</code></pre><p>这样，可以启动一个服务器，然后到 <code>localhost:4000</code> 端口，就可以看到这本书了。</p><p>可以修改 SUMMARY.md 来添加书籍目录</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Summary</span>* <span class="token punctuation">[</span>Introduction<span class="token punctuation">]</span><span class="token punctuation">(</span>README.md<span class="token punctuation">)</span>* 第一章  - <span class="token punctuation">[</span>第一小节：学习 Git<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/1-hello.md<span class="token punctuation">)</span>  - <span class="token punctuation">[</span>第二小节：Git 本地工作流<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/2-local-git.md<span class="token punctuation">)</span>  - <span class="token punctuation">[</span>第三小节：Github 基本操作<span class="token punctuation">]</span><span class="token punctuation">(</span>./git/3-github.md<span class="token punctuation">)</span></code></pre><p>创建 git 文件夹，然后里面就可以写笔记了。其实 gitbook 本身的使用技巧基本就是这些了。</p><h3 id="二、托管我的-gitbook"><a href="#二、托管我的-gitbook" class="headerlink" title="二、托管我的 gitbook"></a>二、托管我的 gitbook</h3><p>首先到 <code>github.com</code> 上创建 <code>my-note</code> 仓库。</p><p>为了部署方便，我们把我们的 <code>my-note</code> 的内容结构稍微调整一下，把原有的所有内容都放到 content 文件夹中，也就是有这样的目录结构</p><pre class=" language-bash"><code class="language-bash">➜  my-note <span class="token function">ls</span> contentREADME.md  SUMMARY.md <span class="token function">git</span>➜  my-note</code></pre><p>然后，把当然项目变成一个 <code>nodejs</code> 的项目：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note$ <span class="token function">npm</span> init</code></pre><p>然后，<code>package.json</code> 中添加这些代码：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"gitbook serve ./content"</span><span class="token punctuation">,</span> <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"gitbook build ./content ./gh-pages"</span><span class="token punctuation">,</span> <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"node ./scripts/deploy-gh-pages.js"</span><span class="token punctuation">,</span> <span class="token property">"publish"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; npm run deploy"</span><span class="token punctuation">,</span> <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"lsof -i :35729"</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>有了上面的 <code>npm</code> 脚本之后，我们如果我想在本地 <code>4000</code> 端口查看本书，需要运行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> start</code></pre><p>在准备上传之前，先来创建一个 <code>.gitignore</code> 文件，里面填写</p><pre class=" language-text"><code class="language-text">gh-pages</code></pre><p>然后，运行:</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init$ <span class="token function">git</span> add -A$ <span class="token function">git</span> commit -a -m<span class="token string">"hello my book"</span>$ <span class="token function">git</span> remote add origin git@github.com:IDeepspace/my-note.git$ <span class="token function">git</span> push -u origin master</code></pre><p>上面这些完成后，<code>gitbook</code> 的原始代码就被安全的备份到 <code>master</code> 分支了。访问 <a href="http://IDeepspace.github.io/my-note" target="_blank" rel="noopener">http://IDeepspace.github.io/my-note</a> 可以看到这些内容。</p><h3 id="三、部署书籍到-gh-pages"><a href="#三、部署书籍到-gh-pages" class="headerlink" title="三、部署书籍到 gh-pages"></a>三、部署书籍到 gh-pages</h3><p>这一步，可以手动做：</p><ul><li>第一步：运行 <code>npm run build</code> ，来把 <code>md</code> 文件翻译成 <code>html</code> 放到 <code>gh-pages</code> 文件夹</li><li>第二步，拷贝 <code>gh-pages</code> 中的所有文件，到本仓库的 <code>gh-pages</code> 分支，然后上传</li><li>第三步，以后每次修改完都需要拷贝到 <code>gh-pages</code> 分支，很麻烦</li></ul><p>所以，我们采用一个 <code>npm</code> 包，来帮助我们完成上面的操作</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> my-note/$ <span class="token function">npm</span> i --save gh-pages</code></pre><p>然后创建 <code>my-note/scripts/deploy-gh-pages.js</code></p><p>里面的内容是：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> ghpages <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gh-pages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ghpages<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'./gh-pages'</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样，每次书稿有了修改，运行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> run publish</code></pre><p>就可以把书稿部署到 <a href="http://IDeepspace.github.io/my-note" target="_blank" rel="noopener">http://IDeepspace.github.io/my-note</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express + Mongoose 实现增删改查</title>
      <link href="/express-mongoose/"/>
      <url>/express-mongoose/</url>
      
        <content type="html"><![CDATA[<!-- ## Express + Mongoose 实现增删改查 --><p><code>Express</code> 是一个基于 <code>Node.js</code> 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助你创建各种 Web 和移动设备应用，实现对数据库的增删查改。</p><p>数据库我们选择 <code>MongoDB</code>，它是一个基于分布式文件存储的开源数据库系统，<code>Mongoose</code> 是在 <code>node.js</code> 异步环境下对 <code>mongodb</code> 进行便捷操作的对象模型工具 。</p><p>接下来我们使用 <code>Express + Mongoose</code> 来实现简单的增删查改功能。</p><a id="more"></a><h3 id="一、创建一个-Express-项目"><a href="#一、创建一个-Express-项目" class="headerlink" title="一、创建一个 Express 项目"></a>一、创建一个 Express 项目</h3><p>既然 <code>Express</code> 是基于 <code>Node.js</code> 的框架，那么肯定需要装 <code>node.js</code> ，我们还需要安装 <code>MongoDB</code> , 关于 MongoDB 的使用，网上的教程有很多，我也写了一个基础的学习笔记，可以做下参考：<a href="http://www.togoblog.cn/mongodb-basic/" target="_blank" rel="noopener">MongoDB 学习笔记</a>。</p><p>接下来，我们使用 <code>express-generator</code> 来快速生成一个 <code>Express</code> 项目 :</p><pre><code>$ npm install -g express-generator</code></pre><p>然后初始化一个文件名为 express-mongoose-demo 的项目 :</p><pre><code>$ express express-mongoose-demo</code></pre><p>创建好项目之后，我们需要安装下依赖：</p><pre><code>$ cd express-mongoose-demo$ npm install</code></pre><p>启动项目：</p><pre><code>$ npm start</code></pre><p>浏览器打开 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000</a> ，就可以看到已经可以访问了。</p><h3 id="二、介绍目录结构"><a href="#二、介绍目录结构" class="headerlink" title="二、介绍目录结构"></a>二、介绍目录结构</h3><pre><code>├─bin/      // 启动文件├─public/   // 资源文件├─routes/   // 路由├─views/    // 视图├─app.js└─package.json</code></pre><p>express 创建项目的目录结构还是比较明了的。下面我们详细看看。</p><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><p><code>express</code> 创建的项目默认使用了 <code>jade</code> 模板引擎，在 <code>app.js</code> 中的设置的 ：</p><pre><code>// view engine setupapp.set(&#39;views&#39;, path.join(__dirname, &#39;views&#39;));app.set(&#39;view engine&#39;, &#39;jade&#39;);</code></pre><p><code>views/</code> 目录下都是 <code>.jade</code> 格式文件。简单说一下：</p><p>模板引擎（<code>Template Engine</code>）是一个将页面模板和数据结合起来生成 <code>html</code> 的工具。模板引擎有很多，在本学习笔记中，我们使用 <a href="https://www.npmjs.com/package/ejs" target="_blank" rel="noopener">ejs 模板引擎</a> ，先安装 ejs :</p><pre><code>$ npm install ejs --save</code></pre><p>然后在 <code>app.js</code> 中将模板引擎修改成 ejs :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// view engine setup</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> ejs<span class="token punctuation">.</span>__express<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>ejs</code> 有 3 种常用标签：</p><ul><li><code>&lt;% code %&gt;</code>：运行 <code>JavaScript</code> 代码，不输出</li><li><code>&lt;%= code %&gt;</code>：显示转义后的 <code>HTML</code> 内容</li><li><code>&lt;%- code %&gt;</code>：显示原始 <code>HTML</code> 内容</li></ul><p>更多使用方法这里不作详解！</p><h3 id="三、搭建视图和路由"><a href="#三、搭建视图和路由" class="headerlink" title="三、搭建视图和路由"></a>三、搭建视图和路由</h3><h4 id="创建用户列表"><a href="#创建用户列表" class="headerlink" title="创建用户列表"></a>创建用户列表</h4><p>把 <code>view/</code> 视图目录下的 <code>.jade</code> 文件都删除，然后创建 <code>UserList.html</code> 文件，内容如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户列表页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">for(var</span> <span class="token attr-name">i</span> <span class="token attr-name">in</span> <span class="token attr-name">user){</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%= user[i].username %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>&lt;%= user[i].email %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/detail/&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 查看 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/edit/&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 编辑 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>del<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user[i]._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 删除 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>接下来实现上面视图对应的路由，项目中默认已经给我们生成了两个路由。在 <code>routes/</code> 路由目录下已经有了两个路由文件：<code>index.js</code> 和 <code>users.js</code>。</p><p>在 <code>app.js</code> 文件中，已经帮我们设置好了这两个路由：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./routes/users'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/users'</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>浏览器访问 <a href="http://localhost:3000/users" target="_blank" rel="noopener">http://localhost:3000/users</a> ，就能访问到 <code>users</code> 对应的页面。我们来看看路由里 <code>users.js</code> 是怎么写的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* GET users listing. */</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'respond with a resource'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><code>express.Router</code> 类创建模块化、可挂载的路由句柄。我们修改上面代码来创建用户列表的路由 <code>users/list</code> :</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'Deepspace'</span><span class="token punctuation">,</span> email<span class="token punctuation">:</span> <span class="token string">'cxin1427@qq.com'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserList'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> list  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还记得我们新建的 <code>UserList.html</code> 视图文件中的 <code>user</code> 变量吗，这里用到了 <code>res.render()</code> 方法，功能就是渲染视图模板。</p><p><code>res.render()</code> 方法接收两个参数：第一个参数为视图文件名，第二个参数是一个对象，用于向模板中传递数据，<code>user</code> 就是在这里传过去的。更改完路由之后我们重启服务器，访问 <a href="http://localhost:3000/users/list" target="_blank" rel="noopener">http://localhost:3000/users/list</a> 就可以看到用户列表页面了。</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/express-2.png" alt="用户列表"></p><p>但是用户列表中的数据是写死的，我们应该从数据库中获取，下面我们来做这个工作。</p><h3 id="四、连接-MongoDB-数据库"><a href="#四、连接-MongoDB-数据库" class="headerlink" title="四、连接 MongoDB 数据库"></a>四、连接 MongoDB 数据库</h3><h4 id="1-新建-usersdb-数据库"><a href="#1-新建-usersdb-数据库" class="headerlink" title="1. 新建 usersdb 数据库"></a>1. 新建 usersdb 数据库</h4><pre><code>&gt; use usersdbswitch to db usersdb</code></pre><h4 id="2-在项目中安装-Mongoose"><a href="#2-在项目中安装-Mongoose" class="headerlink" title="2. 在项目中安装 Mongoose"></a>2. 在项目中安装 Mongoose</h4><pre><code>$ npm install mongoose --save</code></pre><p>安装成功后，就可以通过 <code>require(&#39;mongoose&#39;)</code> 来使用了！</p><h4 id="3-验证是否成功连接"><a href="#3-验证是否成功连接" class="headerlink" title="3. 验证是否成功连接"></a>3. 验证是否成功连接</h4><p>我们根目录下新建一个 <code>models</code> 目录，在此目录下创建一个 <code>db.js</code> 文件，内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  DB_URL <span class="token operator">=</span> <span class="token string">'mongodb://localhost:27017/usersdb'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接*/</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接成功*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connected'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection open to '</span> <span class="token operator">+</span> DB_URL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接异常*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection error: '</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*连接断开*/</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'disconnected'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Mongoose connection disconnected'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后，我们运行下 <code>db.js</code> :</p><pre class=" language-javascript"><code class="language-javascript">$ node db<span class="token punctuation">.</span>js</code></pre><p>从代码中可以看出，监听了几个事件，并且执行触发了<code>connected</code> 事件，打印：<code>Mongoose connection open to mongodb://localhost:27017/usersdb</code> 则表示连接成功！</p><h4 id="4-创建-Schema"><a href="#4-创建-Schema" class="headerlink" title="4. 创建 Schema"></a>4. 创建 Schema</h4><p><code>schema</code> 是 <code>mongoose</code> 里会用到的一种数据模式，可以理解为表结构的定义；每个 <code>schema</code> 会映射到 <code>mongodb</code> 中的一个 <code>collection</code>，它不具备操作数据库的能力 。</p><p>我们先改造一下 <code>db.js</code>，导出 <code>mongoose</code> 对象，在 <code>db.js</code> 文件最后一行添加如下代码即可：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">;</span></code></pre><p>下面我们定义一个 Schema，命名为 <code>userModel.js</code> , 内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  username<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用户名</span>  email<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> String <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//邮箱</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>定义一个 Schema 就这么简单，指定字段名和类型就可以了。</p><p><strong>Schema Types 内置类型如下：</strong></p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/NodeJS/Schema-Types.png" alt=""></p><h4 id="5-生成-Model"><a href="#5-生成-Model" class="headerlink" title="5. 生成 Model"></a>5. 生成 Model</h4><p>定义好了 Schema，接下就是生成 Model 。</p><p>这里的 <code>userSchema</code> 还不能对数据库进行操作，只是定义了数据模型属性 <code>username</code> , <code>email</code> 为字符串类型。需要将该 Schema 发布为 Model。<strong>Model 是由 Schema 发布生成的模型，可以对数据库的操作。</strong></p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="五、实现增删改查"><a href="#五、实现增删改查" class="headerlink" title="五、实现增删改查"></a>五、实现增删改查</h3><h4 id="1-查询"><a href="#1-查询" class="headerlink" title="1. 查询"></a>1. 查询</h4><p>在 <code>user.js</code> 路由文件里，我们来引入 <code>userModel.js</code> 进行数据库操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../models/userModel.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  userModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserList'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里使用 <code>userModel.find()</code> <strong>查询</strong>到所有用户。但是现在我们的数据库里还是空的，我们来新增一个添加用户页面向数据库里插入数据。</p><h4 id="2-新增"><a href="#2-新增" class="headerlink" title="2. 新增"></a>2. 新增</h4><p>在 <code>views/</code> 目录下新建 <code>UserAdd.html</code>添加用户视图</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;用户编辑页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/users/add&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot;&gt;        &lt;input type=&quot;email&quot; name=&quot;email&quot; value=&quot;&quot;&gt;        &lt;button type=&quot;submit&quot;&gt;submit&lt;/button&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>在 <code>user.js</code> 路由文件里来添加对应视图的路由:</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserAdd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这是渲染视图页面的路由，我们需要添加一个 post 方法的路由，在点击提交按钮的时候，把数据存进数据库里。</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> newUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">userModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span>    email<span class="token punctuation">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>email  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  newUser<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/users/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里使用 <code>new userModel()</code> 创建了一个 <code>Entity</code>，它是由 <code>Model</code> 创建的实体，它的操作也会影响数据库。<code>newUser</code> 调用 <code>save()</code> 方法将数据保存到数据库中。然后 <code>res.redirect()</code> 将页面重定向到用户列表页面，这时就可以看到我们新增的用户显示在列表中了。接下来我们看看如何来编辑用户信息。</p><h4 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改"></a>3. 修改</h4><p>依然是创建相应的用户编辑视图：UserEdit.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>用户编辑页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/users/update<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user._id %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user.username %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> user.email %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>添加对应的路由：<code>/users/edit/:id</code> 来渲染视图，<code>/users/update</code> 来修改数据库数据 :</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/edit/:id'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'UserEdit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/update'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span>username <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">;</span>    data<span class="token punctuation">.</span>email <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>email<span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/users/list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>userModel.findOne()</code> 会根据查询条件 <code>{_id: id}</code> 查询到对应的一条数据，那么同理，查看用户详情的实现也是如此，只是渲染你到另外一个模板而已，这里就不重复写了；<code>userModel.findById()</code> 查询到 data 对象，该对象也属于 <code>Entity</code>，有 <code>save()</code> 操作。<code>req.body.username</code> 就可以获取到我们修改后的 <code>username</code>，修改 data 对象之后调用 <code>save()</code> 方法保存到数据库中。接下来看看如何删除用户吧。</p><h4 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h4><p>在用户列表中，点击删除按钮，就把该用户从数据库中给删除了，不需要视图，直接写路由。</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/del'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  userModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> msg<span class="token punctuation">:</span> <span class="token string">'删除成功'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击按钮，发送删除的请求，那我们可以使用 ajax 来实现。在用户列表页面引入 jquery，方便我们操作。然后添加 ajax 请求.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.del'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/users/del?id='</span> <span class="token operator">+</span> id<span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'delete'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>重启服务器，进入 <code>users/list</code>，点击删除按钮，如果看到控制台中已经打印了 <code>{code: 200, msg: ‘删除成功’}</code> ，表示已经成功删除了，这时我们刷新页面，看看列表中已经不存在该用户了。</p><p><strong>部分路由对应的页面未创建视图或未做错误处理，但不影响学习本教程！</strong></p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>通过对用户的增删查改，学习如何写路由已经如何操作数据库。我们来总结一下：</p><ol><li>创建数据库，并验证是否正确连接</li><li>定义 Schema，由 Schema 发布 Model 来操作数据库。</li><li>Model 创建的实体 Entity，可以调用 save() 方法将数据保存到数据库中。</li><li><code>Model.find()</code> 方法查询到该 <code>Schema</code> 下的所有数据，<code>findOne()</code> 根据条件查询数据，<code>findById()</code> 根据 id 查询数据。</li><li>Model.remove() 删除数据。</li></ol><h3 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h3><blockquote><p><a href="https://github.com/IDeepspace/express-mongoose-demo-v1" target="_blank" rel="noopener">https://github.com/IDeepspace/express-mongoose-demo-v1</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> NodeJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Express </tag>
            
            <tag> Mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 箭头函数 Arrow Functions</title>
      <link href="/es6-arrow-functions/"/>
      <url>/es6-arrow-functions/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 箭头函数 Arrow Functions --><p>ES6 中引入了一种编写函数的新语法 —- 箭头函数 <code>Arrow Functions</code></p><h3 id="一、箭头函数产生的目的"><a href="#一、箭头函数产生的目的" class="headerlink" title="一、箭头函数产生的目的"></a>一、箭头函数产生的目的</h3><ul><li>简洁语法</li><li>与父作用域共享关键字 <code>this</code></li></ul><h3 id="二、箭头函数的优点"><a href="#二、箭头函数的优点" class="headerlink" title="二、箭头函数的优点"></a>二、箭头函数的优点</h3><ul><li>使用箭头函数比普通函数少些动词，如：<code>function</code> 或  <code>return</code></li><li><code>this</code> 提前定义，从上下文可以捕获 <code>this</code>。</li></ul><p>当你只需要一个只有一个参数的简单函数时，可以使用新标准中的箭头函数，它的语法非常简单：<code>标识符=&gt;表达式</code>。你无需输入 <code>function</code>和 <code>return</code>，一些小括号、大括号以及分号也可以省略。</p><a id="more"></a><h3 id="三、箭头函数的用法"><a href="#三、箭头函数的用法" class="headerlink" title="三、箭头函数的用法"></a>三、箭头函数的用法</h3><ol><li>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果箭头函数只有一行语句，且不需要返回值，可以采用下面的写法，就不用写大括号了。</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doesNotReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">let</span> getTempItem <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">let</span> getTempItem <span class="token operator">=</span> id <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">:</span> id<span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>箭头函数还可以和解构赋值 <code>Destructuring</code> 联合使用.</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> full <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> first<span class="token punctuation">,</span> last <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> last<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">function</span> <span class="token function">full</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> person<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>last<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>简化回调函数</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="6"><li>rest 参数与箭头函数结合</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>nums<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> nums<span class="token punctuation">;</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2,3,4,5]</span><span class="token keyword">const</span> headAndTail <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">headAndTail</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,[2,3,4,5]]</span></code></pre><h3 id="四、箭头函数中的-this"><a href="#四、箭头函数中的-this" class="headerlink" title="四、箭头函数中的 this"></a>四、箭头函数中的 this</h3><h4 id="1、默认绑定外层this"><a href="#1、默认绑定外层this" class="headerlink" title="1、默认绑定外层this"></a>1、默认绑定外层this</h4><p>我们都知道 ：<code>this</code> 的值是可以用 <code>call</code> 方法修改的，而且只有在调用的时候我们才能确定 <code>this</code> 的值，简单写个例子说明：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jerry'</span><span class="token punctuation">,</span>    greet<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//第一种调用方法</span>obj<span class="token punctuation">.</span>greet<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//第二种调用方法</span><span class="token comment" spellcheck="true">// 手动指定 this</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Jerry'</span><span class="token punctuation">,</span>    greet<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span>greet<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Spike'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打出来的是 Spike</span></code></pre><p>而当我们使用箭头函数的时候，<strong>箭头函数会默认帮我们绑定外层 <code>this</code> 的值，所以在箭头函数中 <code>this</code> 的值和外层的 <code>this</code> 是一样的。</strong></p><p>不使用箭头函数例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打出的是obj对象</span></code></pre><p>使用箭头函数的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打出来的是window</span></code></pre><p>在使用箭头函数的例子里，<strong>因为箭头函数默认不会使用自己的 <code>this</code>，而是会和外层的 <code>this</code> 保持一致，最外层的 <code>this</code> 就是 <code>window</code> 对象。</strong></p><h4 id="2、不能用call方法修改里面的this"><a href="#2、不能用call方法修改里面的this" class="headerlink" title="2、不能用call方法修改里面的this"></a>2、不能用call方法修改里面的this</h4><p>为了减少 <code>this</code> 的复杂性，箭头函数无法用 <code>call</code> 方法来指定 <code>this</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打出来的结果依然是window对象</span></code></pre><h4 id="3、多层对象嵌套里函数的this"><a href="#3、多层对象嵌套里函数的this" class="headerlink" title="3、多层对象嵌套里函数的this"></a>3、多层对象嵌套里函数的this</h4><p>上面说过，箭头函数里的 <code>this</code> 是和外层保持一致的，但是如果这个外层有好多层，那它是和哪层保持一致呢？</p><p>看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token punctuation">{</span>    c<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打出的是obj对象, 相当于obj.a.call(obj)</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打出的是obj.b对象, 相当于obj.b.c.call(obj.b)</span></code></pre><p>接下来把 <code>obj.b.c</code> 对应的函数换成箭头函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token punctuation">{</span>    c<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没有使用箭头函数打出的是obj</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打出的是window对象！！</span></code></pre><p><code>obj.a</code> 调用后打出来的是 <code>obj</code> 对象，而 <code>obj.b.c</code> 调用后打出的是 <code>window</code> 对象而非 <code>obj</code> 。那是不是说<strong>这就表示多层对象嵌套里箭头函数里 <code>this</code> 是和最最外层保持一致呢？</strong></p><p>其实不是的！！！我在刚开始的时候，看过一些博客里有这样去定义，其实这样描述是不正确的，看个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    fn1<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span> <span class="token punctuation">{</span>          c<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn0</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到的{fn1: f}对象</span></code></pre><p>从上面的例子可以看出：<strong>箭头函数不使用自身的 <code>this</code> ，而是一层一层的向上查找，直到找到有 <code>this</code> 地方，共享此处的 <code>this</code>。</strong></p><h3 id="五、箭头函数的其他特性"><a href="#五、箭头函数的其他特性" class="headerlink" title="五、箭头函数的其他特性"></a>五、箭头函数的其他特性</h3><ol><li><code>typeof</code> 运算符和普通的函数一样</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> commFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> commFunc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为 <code>function</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arrowFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arrowFunc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出也为<code>function</code>。<br>从此可以看出箭头函数的类型和普通的函数一样都为 <code>function</code>。</p><ol start="2"><li><code>instanceof</code> 也返回  <code>true</code>，表明是 <code>Function</code> 的实例</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>true</code>，由此可以看出箭头函数也是 Function 的实例</p><ol start="3"><li>返回对象用小括号括起来</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'galler'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>undefined</code>。此时的 <code>{}</code> 表明函数的起始位置和结束位置，由于该函数没有返回值，所以被调用时值为 <code>undefined</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'galler'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为<code>{name:&quot;galler&quot;}</code>。 此时 <code>{}</code> 表示定义一个对象。用 <code>()</code> 括起来表示是一个表达式，默认返回该对象。</p><ol start="4"><li>箭头函数中不能使用 <code>new</code></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Person <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'galler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行该程序，则出现 <code>TypeError: Person is not a constructor</code></p><ol start="5"><li><code>arguments</code> </li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一般的函数使用 <code>arguments</code>，在浏览器中输出为一个数组：<code>[1]</code>，在 Node 环境中输出为一个对象：<code>{&#39;0&#39;:1}</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token string">'galler'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>箭头函数使用 <code>arguments</code>，在浏览器环境中，则出现 <code>ReferenceError</code>，在 Node 环境中输出 <code>{&quot;0&quot;:{}，……}</code>。<br>由此可以得出，箭头函数与普通函数的再一个区别：不能使用 <code>arguments</code> 对象。</p><ol start="6"><li>没有原型</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出为 <code>undefined</code>。由此可以看出箭头函数没有原型 。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 数组的拓展</title>
      <link href="/es6-array/"/>
      <url>/es6-array/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 数组的拓展 --><h4 id="一-Array-from"><a href="#一-Array-from" class="headerlink" title="一 . Array.from()"></a>一 . Array.from()</h4><p><code>Array.from</code>方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）</p><p>下面是一个类似数组的对象，<code>Array.from</code>将它转为真正的数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>  <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>  <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>  length<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES5的写法</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span><span class="token comment" spellcheck="true">// ES6的写法</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span></code></pre><a id="more"></a><h4 id="二-Array-of"><a href="#二-Array-of" class="headerlink" title="二 . Array.of()"></a>二 . Array.of()</h4><p><code>Array.of</code>方法用于将一组值，转换为数组。</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3,11,8]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>这个方法的主要目的，是弥补数组构造函数<code>Array()</code>的不足。因为参数个数的不同，会导致<code>Array()</code>的行为有差异。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [, , ,]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [3, 11, 8]</span></code></pre><p>上面代码中，<code>Array</code> 方法没有参数、一个参数、三个参数时，返回结果都不一样。只有当参数个数不少于 2 个时，<code>Array()</code> 才会返回由参数组成的新数组。参数个数只有一个时，实际上是指定数组的长度。</p><p><code>Array.of</code> 基本上可以用来替代<code>Array()</code>或<code>new Array()</code>，并且不存在由于参数不同而导致的重载。它的行为非常统一。</p><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [undefined]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1]</span>Array<span class="token punctuation">.</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2]</span></code></pre><p><code>Array.of</code> 总是返回参数值组成的数组。如果没有参数，就返回一个空数组。</p><p><code>Array.of</code> 方法可以用下面的代码模拟实现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ArrayOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="三-copyWithin"><a href="#三-copyWithin" class="headerlink" title="三 . copyWithin()"></a>三 . copyWithin()</h4><p>数组实例的<code>copyWithin</code>方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。也就是说，使用这个方法，会修改当前数组 。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h5><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="接受三个参数。"><a href="#接受三个参数。" class="headerlink" title="接受三个参数。"></a>接受三个参数。</h5><ul><li>target（必需）：从该位置开始替换数据。</li><li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li></ul><p>看下面的例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[ 4, 5, 3, 4, 5 ]</span><span class="token comment" spellcheck="true">// 将3号位复制到0号位</span><span class="token keyword">let</span> cct2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [4, 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">// -2相当于3号位，-1相当于4号位</span><span class="token keyword">let</span> cct3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[4, 2, 3, 4, 5]</span><span class="token comment" spellcheck="true">// 将3号位复制到0号位</span><span class="token keyword">let</span> cct4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copyWithin<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {0: 1, 3: 1, length: 5}</span><span class="token comment" spellcheck="true">// 将2号位到数组结束，复制到0号位</span><span class="token keyword">let</span> i32a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> cct5 <span class="token operator">=</span> i32a<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Int32Array [3, 4, 5, 4, 5]</span><span class="token comment" spellcheck="true">// 对于没有部署 TypedArray 的 copyWithin 方法的平台</span><span class="token comment" spellcheck="true">// 需要采用下面的写法</span><span class="token keyword">let</span> cct6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copyWithin<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Int32Array [4, 2, 3, 4, 5]</span></code></pre><h4 id="四-数组实例的-find-和-findIndex"><a href="#四-数组实例的-find-和-findIndex" class="headerlink" title="四 . 数组实例的 find() 和 findIndex()"></a>四 . 数组实例的 find() 和 findIndex()</h4><h5 id="1-数组实例的find方法，用于找出第一个符合条件的数组成员。"><a href="#1-数组实例的find方法，用于找出第一个符合条件的数组成员。" class="headerlink" title="1.数组实例的find方法，用于找出第一个符合条件的数组成员。"></a>1.数组实例的<code>find</code>方法，用于找出第一个符合条件的数组成员。</h5><blockquote><p>它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为<code>true</code>的成员，然后返回该成员。如果没有符合条件的成员，则返回<code>undefined</code> 。</p></blockquote><p><strong>语法</strong></p><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>参数</strong></p><ul><li><p><code>callback</code></p><p>在数组每一项上执行的函数，接收 3 个参数：<code>element</code>当前遍历到的元素。<code>index</code>当前遍历到的索引。<code>array</code>数组本身。</p></li><li><p><code>thisArg</code>可选</p><p>可选，指定 <code>callback 的 this 参数。</code></p></li></ul><p>看下面的例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-5</span><span class="token keyword">let</span> cct2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><h5 id="2-findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1"><a href="#2-findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1" class="headerlink" title="2.findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1 ."></a>2.<code>findIndex</code>方法的用法与<code>find</code>方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回<code>-1</code> .</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p><strong>另外，这两个方法都可以发现<code>NaN</code>，弥补了数组的<code>IndexOf</code>方法的不足</strong>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// -1</span>  <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>y <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span></code></pre><p>上面代码中，<code>indexOf</code>方法无法识别数组的<code>NaN</code>成员，但是<code>findIndex</code>方法可以借助<code>Object.is</code>方法做到。</p><h4 id="五-fill"><a href="#五-fill" class="headerlink" title="五 . fill()"></a>五 . fill()</h4><p><code>fill</code>方法使用给定值，填充一个数组。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [7, 7, 7]</span><span class="token keyword">let</span> cct5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [7, 7, 7]</span></code></pre><p>上面代码表明，<code>fill</code>方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。</p><p><code>fill</code>方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cct6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cct6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 7, 'c']</span></code></pre><p>上面代码表示，<code>fill</code>方法从 1 号位开始，向原数组填充 7，到 2 号位之前结束。</p><h4 id="六-entries-，keys-和-values"><a href="#六-entries-，keys-和-values" class="headerlink" title="六 . entries()，keys() 和 values()"></a>六 . entries()，keys() 和 values()</h4><p>1.<code>entries()</code> 方法返回一个新的 <code>Array Iterator</code> 对象，该对象包含数组中每个索引的键/值对 。</p><p>2.<code>keys()</code>方法返回一个新的 <code>Array</code> 迭代器，它包含数组中每个索引的键。</p><p>3.<code>values()</code> 方法返回一个新的 <code>Array Iterator</code> 对象，该对象包含数组每个索引的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 1</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> elem <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 'a'</span><span class="token comment" spellcheck="true">// 'b'</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 0 'a'</span><span class="token comment" spellcheck="true">// 1 'b'</span></code></pre><p><strong>如果不使用<code>for...of</code>循环，可以手动调用遍历器对象的<code>next</code>方法，进行遍历。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> letter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> entries <span class="token operator">=</span> letter<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [0, 'a']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 'b']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [2, 'c']</span></code></pre><h4 id="七-includes"><a href="#七-includes" class="headerlink" title="七 . includes()"></a>七 . includes()</h4><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，如果是，返回 true, 反之则返回 false .</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><pre class=" language-javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">,</span> fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li><p><code>searchElement</code></p><p>需要查找的元素值。</p></li><li><p><code>fromIndex</code> 可选</p><p>从该索引处开始查找 <code>searchElement</code>。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p></li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Boolean" target="_blank" rel="noopener"><code>Boolean</code></a>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>该方法的第二个参数表示搜索的起始位置，默认为<code>0</code>。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p><strong>注意 :</strong> 没有该方法之前，我们通常使用数组的<code>indexOf</code>方法，检查是否包含某个值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p><code>indexOf</code>方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于<code>-1</code>，表达起来不够直观。二是，它内部使用严格相等运算符（<code>===</code>）进行判断，这会导致对<code>NaN</code>的误判。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -1</span></code></pre><p><code>includes</code>使用的是不一样的判断算法，就没有这个问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>下面代码用来检查当前环境是否支持该方法，如果不支持，部署一个简易的替代版本。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> contains <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>includes    <span class="token operator">?</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>el <span class="token operator">=</span><span class="token operator">></span> el <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => false</span></code></pre><p>另外，<code>Map</code> 和 <code>Set</code> 数据结构有一个<code>has</code>方法，需要注意与<code>includes</code>区分。</p><ul><li><code>Map</code> 结构的<code>has</code>方法，是用来查找键名的，比如<code>Map.prototype.has(key)</code>、<code>WeakMap.prototype.has(key)</code>、<code>Reflect.has(target, propertyKey)</code>。</li><li><code>Set</code> 结构的<code>has</code>方法，是用来查找值的，比如<code>Set.prototype.has(value)</code>、<code>WeakSet.prototype.has(value)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— 模板字符串</title>
      <link href="/es6-string/"/>
      <url>/es6-string/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— 模板字符串 --><p>我们知道, 在传统的 JavaScript 语言，输出模板通常是这样写的 , 需要用<code>+</code>来拼接 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#result'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>  <span class="token string">'There are &lt;b>'</span> <span class="token operator">+</span>    basket<span class="token punctuation">.</span>count <span class="token operator">+</span>    <span class="token string">'&lt;/b> '</span> <span class="token operator">+</span>    <span class="token string">'items in your basket, '</span> <span class="token operator">+</span>    <span class="token string">'&lt;em>'</span> <span class="token operator">+</span>    basket<span class="token punctuation">.</span>onSale <span class="token operator">+</span>    <span class="token string">'&lt;/em> are on sale!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这种写法相当繁琐不方便.</p><a id="more"></a><h4 id="ES6-引入了一种新型的字符串字面量语法，我们称之为模板字符串（template-strings）。"><a href="#ES6-引入了一种新型的字符串字面量语法，我们称之为模板字符串（template-strings）。" class="headerlink" title="ES6 引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。"></a>ES6 引入了一种新型的字符串字面量语法，我们称之为模板字符串（template strings）。</h4><h5 id="1-模板字符串（template-string）是增强版的字符串，用反引号（-）标识。"><a href="#1-模板字符串（template-string）是增强版的字符串，用反引号（-）标识。" class="headerlink" title="1.模板字符串（template string）是增强版的字符串，用反引号（`）标识。"></a>1.模板字符串（template string）是增强版的字符串，用反引号（`）标识。</h5><h5 id="2-它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。"><a href="#2-它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。" class="headerlink" title="2.它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。"></a>2.它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</h5><h5 id="3-模板字符串中嵌入变量，需要将变量名写在-之中-。"><a href="#3-模板字符串中嵌入变量，需要将变量名写在-之中-。" class="headerlink" title="3.模板字符串中嵌入变量，需要将变量名写在 ${} 之中 。"></a>3.模板字符串中嵌入变量，需要将变量名写在 <code>${}</code> 之中 。</h5><h5 id="4-如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。"><a href="#4-如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。" class="headerlink" title="4.如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。"></a>4.如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</h5><h5 id="5-如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。"><a href="#5-如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。" class="headerlink" title="5.如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。"></a>5.如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</h5><h5 id="6-所有模板字符串的空格和换行，都是被保留的，比如-lt-ul-gt-标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它"><a href="#6-所有模板字符串的空格和换行，都是被保留的，比如-lt-ul-gt-标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它" class="headerlink" title="6.所有模板字符串的空格和换行，都是被保留的，比如&lt;ul&gt;标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它"></a>6.所有模板字符串的空格和换行，都是被保留的，比如<code>&lt;ul&gt;</code>标签前面会有一个换行。如果你不想要这个换行，可以使用<code>trim</code>方法消除它</h5><p><strong>看看下面的例子 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1. 普通字符串</span><span class="token template-string"><span class="token string">`In JavaScript '\n' is a line-feed.`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 .字符串中嵌入变量</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span>  time <span class="token operator">=</span> <span class="token string">'today'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, how are you </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.1如果变量没有声明,则会报错 !变量place没有声明</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>place<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错</span><span class="token comment" spellcheck="true">//3 .反斜杠转义</span><span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token string">`\`Yo\` World!`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.多行字符串</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`string text line 1string text line 2`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5.使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ul>  &lt;li>first&lt;/li>  &lt;li>second&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6. 可以使用trim方法消除换行</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token string">`&lt;ul>  &lt;li>first&lt;/li>  &lt;li>second&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="7-大括号内部可以放入任意的-JavaScript-表达式，可以进行运算，以及引用对象属性。"><a href="#7-大括号内部可以放入任意的-JavaScript-表达式，可以进行运算，以及引用对象属性。" class="headerlink" title="7.大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。"></a>7.大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>  x <span class="token comment" spellcheck="true">// "1 + 2 = 3"</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "1 + 4 = 5"</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>obj<span class="token punctuation">.</span>x <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "3"</span></code></pre><h5 id="8-模板字符串之中还能调用函数。"><a href="#8-模板字符串之中还能调用函数。" class="headerlink" title="8.模板字符串之中还能调用函数。"></a>8.模板字符串之中还能调用函数。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token template-string"><span class="token string">`foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bar`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// foo Hello World bar</span></code></pre><p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的<code>toString</code>方法。</p><h5 id="9-由于模板字符串的大括号内部，就是执行-JavaScript-代码，因此如果大括号内部是一个字符串，将会原样输出。"><a href="#9-由于模板字符串的大括号内部，就是执行-JavaScript-代码，因此如果大括号内部是一个字符串，将会原样输出。" class="headerlink" title="9.由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。"></a>9.由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token string">'World'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "Hello World"</span></code></pre><h5 id="10-模板字符串甚至还能嵌套。"><a href="#10-模板字符串甚至还能嵌套。" class="headerlink" title="10.模板字符串甚至还能嵌套。"></a>10.模板字符串甚至还能嵌套。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> tmpl <span class="token operator">=</span> addrs <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`  &lt;table>  ${addrs    .map(      addr => `</span></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>$<span class="token punctuation">{</span>addr<span class="token punctuation">.</span>first<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>    <span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>$<span class="token punctuation">{</span>addr<span class="token punctuation">.</span>last<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span>  <span class="token template-string"><span class="token string">`    )    .join('')}  &lt;/table>`</span></span><span class="token punctuation">;</span></code></pre><p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> first<span class="token punctuation">:</span> <span class="token string">'&lt;Jane>'</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">'Bond'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> first<span class="token punctuation">:</span> <span class="token string">'Lars'</span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string">'&lt;Croft>'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tmpl</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// &lt;table></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>&lt;Jane>&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>Bond&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>Lars&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//   &lt;tr>&lt;td>&lt;Croft>&lt;/td>&lt;/tr></span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// &lt;/table></span></code></pre><h5 id="11-如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。"><a href="#11-如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。" class="headerlink" title="11.如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。"></a>11.如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'return '</span> <span class="token operator">+</span> <span class="token string">'`Hello ${name}!`'</span><span class="token punctuation">;</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Hello Jack!"</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(name) => `Hello ${name}!`'</span><span class="token punctuation">;</span><span class="token keyword">let</span> func <span class="token operator">=</span> eval<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Hello Jack!"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— Set 和 Map 的数据结构</title>
      <link href="/es6-set-map/"/>
      <url>/es6-set-map/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— Set 和 Map 的数据结构 --><h3 id="一-Set"><a href="#一-Set" class="headerlink" title="一 . Set"></a>一 . Set</h3><p><code>ES6</code> 提供了新的数据结构 <code>Set</code> 。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><p><code>Set</code> 本身是一个构造函数，用来生成 <code>Set</code> 数据结构。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 5</span><span class="token comment" spellcheck="true">// 4</span></code></pre><a id="more"></a><p>在 <code>Set</code> 内部，两个 <code>NaN</code> 是相等。两个对象总是不相等的。可以用 <code>length</code> 来检测 .</p><h4 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a><strong>Set 实例的属性和方法</strong></h4><p>Set 结构的实例有以下属性。</p><ul><li><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</li><li><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</li></ul><p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。</p><ul><li><code>add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>clear()</code>：清除所有成员，没有返回值。</li></ul><h4 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h4><p>Set 结构的实例有四个遍历方法，可以用于遍历成员。</p><ul><li><code>keys()</code>：返回键名的遍历器</li><li><code>values()</code>：返回键值的遍历器</li><li><code>entries()</code>：返回键值对的遍历器</li><li><code>forEach()</code>：使用回调函数遍历每个成员</li></ul><p>需要特别指出的是，<code>Set</code>的遍历顺序就是插入顺序。这个特性有时非常有用，比如使用 Set 保存一个回调函数列表，调用时就能保证按照添加顺序调用。</p><h3 id="二-Map"><a href="#二-Map" class="headerlink" title="二 . Map"></a>二 . Map</h3><p>Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> p<span class="token punctuation">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "content"</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span></code></pre><p>注意，只有对同一个对象的引用，Map 结构才将其视为同一个键。这一点要非常小心。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面代码的 <code>set</code> 和 <code>get</code> 方法，表面是针对同一个键，但实际上这是两个值，内存地址是不一样的，因此 get 方法无法读取该键，返回 <code>undefined</code>。</p><p>如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，<code>Map</code> 将其视为一个键，包括 <code>0</code> 和 <code>-0</code>。另外，虽然 <code>NaN</code> 不严格相等于自身，但 <code>Map</code> 将其视为同一个键。</p><p>实例属性和方法：<code>size</code>、<code>set</code>、<code>get</code>、<code>has</code>、<code>delete</code>、<code>clear</code></p><p>遍历方法：<code>keys()</code>、<code>values()</code>、<code>entries()</code>、<code>forEach()</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 —— let 和 const</title>
      <link href="/es6-let-const/"/>
      <url>/es6-let-const/</url>
      
        <content type="html"><![CDATA[<!-- ## ES6 —— let 和 const --><h4 id="零、块级作用域"><a href="#零、块级作用域" class="headerlink" title="零、块级作用域"></a>零、块级作用域</h4><p>在学习 <code>let</code> 和 <code>const</code> 之前，我们不得不谈一谈 <code>ES5</code> 的块级作用域，理解为什么要在 <code>ES6</code> 引入 <code>let</code> 和 <code>const</code> 。</p><p>我们都知道：<strong>通过 <code>var</code> 声明的变量存在变量提升的特性。</strong> 看看下面的示例代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可能会觉得只有 <code>condition</code> 为 <code>true</code> 的时候，才会创建 <code>value</code>，如果 <code>condition</code> 为 <code>false</code>，程序就不会走到 <code>if</code> 里面，结果是程序报错：<code>ReferenceError: value is not defined</code> 。</p><p>但是，因为变量提升的原因，实际代码相当于：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> value<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果 <code>condition</code> 为 <code>false</code> ，结果会是 <code>undefined</code>。</p><p>除此之外，在 <code>for</code> 循环中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>即便循环已经结束了，我们依然可以访问 <code>i</code> 的值。</p><p>为了加强对变量生命周期的控制，<code>ECMAScript 6</code> 引入了块级作用域。</p><p>块级作用域存在于：</p><ul><li>函数内部</li><li>块中(字符 { 和 } 之间的区域)</li></ul><a id="more"></a><h4 id="一、let-声明变量"><a href="#一、let-声明变量" class="headerlink" title="一、let 声明变量"></a>一、let 声明变量</h4><p>在 <code>ES5</code> 中，除了全局作用域外，限定所声明的变量的作用域是函数作用域。这使得 <code>ES5</code> 在很多情况下为了模拟块级作用域（避免变量名污染）需要使用立即执行的匿名函数。在 ES6 中新增了声明块级使用域变量的关键字 <code>let</code>。与 <code>var</code> 相比，使用 <code>let</code> 声明的变量有如下特点：</p><ol><li><code>let</code> 声明的变量所在的作用域为块级;</li><li><code>let</code> 声明的变量不存在变量提升;</li><li><code>let</code> 声明的变量不允许重复声明，否则会报错。 使用 <code>let</code> 可以替代 <code>ES5</code> 中为了模拟块级作用域而使用的立即执行的匿名函数:</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//ES5实现方法:</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6实现方法:</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>我们具体来看看它的特点</p><p><strong>1 . 所声明的变量，只在 let 命令所在的代码块内有效</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: a is not defined.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>有了这个特性,我们经常使用 <code>for</code> 循环的计数器，就很合适使用 <code>let</code> 命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ReferenceError: i is not defined</span></code></pre><p><strong>2 . let 不像 var 那样，会发生“变量提升”现象。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码在声明 <code>foo</code> 之前，就使用这个变量，结果会抛出一个错误。</p><p><strong>3 . 不允许重复声明</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因此，不能在函数内部重新声明参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不报错</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>4 . 另外，ES6 也规定，函数本身的作用域，在其所在的块级作用域之内。如 :</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数f</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码在 <code>ES5</code> 中运行，会得到 <code>I am inside!</code>，但是在 <code>ES6</code> 中运行，会得到 <code>I am outside!</code>。这是因为 <code>ES5</code> 存在函数提升，不管会不会进入 <code>if</code> 代码块，函数声明都会提升到当前作用域的顶部，得到执行；而 <code>ES6</code> 支持块级作用域，不管会不会进入 <code>if</code> 代码块，其内部声明的函数皆不会影响到作用域的外部。</p><p>需要注意的是，如果在严格模式下，函数只能在顶层作用域和函数内声明，其他情况（比如 <code>if</code> 代码块、循环代码块）的声明都会报错。</p><h4 id="二、const-声明常量"><a href="#二、const-声明常量" class="headerlink" title="二、const 声明常量"></a>二、const 声明常量</h4><p><code>ES6</code> 中可以使用 <code>const</code> 关键字来声明常量，被声明的常量是不能被修改的。与使用 <code>let</code> 声明的变量类似，<code>const</code> 声明的常量为块级作用域，不存在变量提升，且不可重复声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415,这里赋值无效,但是不会报错</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415,这里重复声明了</span></code></pre><p>上面代码表明改变常量的值是不起作用的。需要注意的是，对常量重新赋值不会报错，只会默默地失败。</p><p><strong>注意 :</strong></p><p><code>const</code> 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，<code>const</code> 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。 看个例子 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token comment" spellcheck="true">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: "foo" is read-only</span></code></pre><p>另一个例子:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>如果要使对象为常量的话可以配合 <code>Object.freeze()</code> 函数来实现 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无法修改foo,严格模式下报错</span>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//无法修改foo.a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span></code></pre><p>以上方法中的 <code>Object.freeze()</code> 函数本身有局限性，它只能冻结对象的属性不被修改，并不能冻结它的属性的属性被修改。如果要实现将对象内部所有属性冻结，需要使用自定义的强化的冻结函数。下面是一个深度冻结的方法:</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>deepFreeze <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> object<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过以上 <code>deepFreeze</code> 即可实现完全将对象常量化。效果如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用原始的冻结函数</span><span class="token keyword">let</span> a <span class="token operator">=</span> foo<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本操作可以使foo.a变为[1,2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2]</span><span class="token keyword">const</span> foo2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">deepFreeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//使用深度冻结函数</span><span class="token keyword">let</span> b <span class="token operator">=</span> foo2<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//本操作无法改变foo2.a ,会报错</span><span class="token comment" spellcheck="true">//console.log(b);</span></code></pre><h4 id="三、全局对象属性"><a href="#三、全局对象属性" class="headerlink" title="三、全局对象属性"></a>三、全局对象属性</h4><p>全局对象是最顶层的对象，在浏览器环境指的是 <code>window</code> 对象，在 <code>Node.js</code> 指的是 <code>global</code> 对象。<code>ES5</code> 规定，所有全局变量都是全局对象的属性。</p><p><code>ES6</code> 规定，<code>var</code> 和 <code>function</code> 声明的全局变量，属于全局对象的属性；<code>let</code> 命令、<code>const</code> 命令、<code>class</code> 命令声明的全局变量，不属于全局对象的属性。例 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在Node的REPL环境，可以写成global.a</span><span class="token comment" spellcheck="true">// 或者采用通用方法，写成this.a</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 原型链和原型继承</title>
      <link href="/es6-proptype-chain/"/>
      <url>/es6-proptype-chain/</url>
      
        <content type="html"><![CDATA[<!-- ## JavaScript 原型链和原型继承 --><p>JavaScript 中最难最繁复的一个知识点应该就是原型继承, 要说清楚原型继承，就得先了解清楚什么是原型链。</p><h3 id="一-原型链"><a href="#一-原型链" class="headerlink" title="一.原型链"></a>一.原型链</h3><p>在写 JavaScript 的时候，我们经常会写出下面的代码：</p><pre><code>const arr = [1, 2, 3];arr.push(4); // 4const string = &#39;Deepspace&#39;;string.slice(1);//eepspace</code></pre><p>那么我们会不会觉得很奇怪, 为什么我好端端的创建一个数组或者字符串，莫名其妙地就有了 <code>.push</code>, <code>.slice</code> 这些方法呢？</p><a id="more"></a><p>实际上, 我们用字面量创建字符串和数组是对 <code>Array</code> 和 <code>String</code> 进行了实例化 .</p><p>看看 MDN 上面是怎么说的 :</p><blockquote><p>当谈到继承时，Javascript 只有一种结构：对象。每个对象都有一个私有属性(称为[[Prototype]])，它持有一个连接到另一个称为其 prototype 对象的链接。该原型对象具有一个自己的原型，等等，直到达到一个对象的 prototype 为 null。根据定义，null 没有 prototype，并作为这个原型链 中的最后一个环节。</p><p>JavaScript 中几乎所有的对象都是位于原型链顶端的 Object 的实例。</p><p>……</p><p>JavaScript 对象是动态的属性“包”（指其自己的属性）。JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p></blockquote><p>我们来验证一下 MDN 的说法 :</p><pre><code>arr.hasOwnProperty(&#39;push&#39;);     // falsestring.hasOwnProperty(&#39;slice&#39;); // false</code></pre><p><code>hasOwnProperty</code> 是用来检测指定的属性是否在对象本身上的，上面的两行代码都返回了 <code>false</code>。那么显然， <code>.push</code>, <code>.slice</code> 是原型链上的，那么 JavaScript 引擎是如何找到这两个方法的呢？</p><p>实际上，根据 ECMAScript 标准，每个对象都有一个 <code>[[prototype]]</code> 属性，用来指向该对象的原型，这等同于某些浏览器内核给 JavaScript 实现的 <code>__proto__</code> 属性（已在 ES6 中成为标准）。从 ECMAScript 6 开始，<code>[[Prototype]]</code>还可以用 <code>Object.getPrototypeOf()</code>和 <code>Object.setPrototypeOf()</code> 访问器来访问。</p><p>我们用下面的例子来说明 :</p><pre><code>const o = {    a: 1,    b: 2};// 演示使用，尽量不要直接操作 .__proto__// 否则可能造成原型链混乱o.__proto__ = {    b: 3,    c: 4};// 上面两行代码执行完，我们就创建了这么一段原型链：// { a:1, b:2 } --&gt; { b:3, c:4 } --&gt; Object.prototype --&gt; nullconsole.log(o.a); //1// a 是 o 的自身属性吗？是的，该属性的值为 1console.log(o.b); // 2// b 是 o 的自身属性吗？是的，该属性的值为 2// o.[[Prototype]] 上还有一个 b 属性，但是它不会被访问到。// 这种情况称为“属性遮蔽 (property shadowing)”。console.log(o.c); // 4// c 是 o 的自身属性吗？不是，那看看 o.[[Prototype]] 上有没有。// c 是 o.[[Prototype]] 的自身属性吗？是的，该属性的值为 4console.log(o.d); // undefined// d 是 o 的自身属性吗？不是，那看看 o.[[Prototype]] 上有没有.// d 是 o.[[Prototype]] 的自身属性吗？不是，那看看 o.[[Prototype]].[[Prototype]] 上有没有。// o.[[Prototype]].[[Prototype]] 为 null，停止搜索。// 没有 d 属性，返回 undefined。</code></pre><p>那么同样的, 文章刚开始的两段代码也是创建了原型链 :</p><pre><code>// [1, 2, 3] --&gt; Array.prototype -&gt; Object.prototype --&gt; nullconst arr = [1, 2, 3];console.log(arr.__proto__ === Array.prototype); // truearr.push(4); // 4// Array.prototype.push// [1, 2, 3] --&gt; String.prototype -&gt; Object.prototype --&gt; nullconst str = &#39;Deepspace&#39;;console.log(str.__proto__ === String.prototype); // truestr.slice(1); // eepspace// String.prototype.slice</code></pre><p><strong>那么对于函数又是怎么一回事呢？</strong></p><p>JavaScript 全部都是动态的，都是运行时，不存在类（classes）。实际上，在 JavaScript 中，所谓的类的构造器，其实就是一个普通的函数。当使用 <code>new</code> 来作用这个函数时，它就可以被称为构造方法（构造函数），比如：</p><pre><code>const Person = function (name, age) {    this.name = name;    this.age = age};Person.prototype.say = function () {    return &#39;hello!&#39;};// 创建了一个原型链// Deepspace --&gt; Person.prototype --&gt; Object.prototype --&gt; nullconst Deepspace = new Person(&#39;Deepspace&#39;, 22);console.log(Deepspace.say()); // hello!console.log(Deepspace.__proto__ === Person.prototype); // true</code></pre><p>可见，<code>Deepspace.__proto__</code> 指向了构造函数 <code>Person</code> 的 <code>prototype</code> , 形成了一个原型链。</p><h3 id="二-原型继承"><a href="#二-原型继承" class="headerlink" title="二.原型继承"></a>二.原型继承</h3><p>通过上面的描述, 我们已经对原型链有所了解. 我们再来看看原型继承 .</p><p>继承是面向对象的特性之一，JavaScript 当然也可以，只不过不是类继承，而是原型继承：</p><pre><code>const Animal = function () {};Animal.prototype.run = function () {    console.log(&#39;Animal run fast!&#39;)};// 继承 Animalconst Person = function (name, age) {    this.name = name;    this.age = age;};Person.prototype = new Animal();Person.prototype.constructor = Person;Person.prototype.say = function () {    console.log(&#39;hello!&#39;)};// Deepspace --&gt; Person.prototype --&gt; Animal.prototype --&gt; Object.prototype --&gt; nullconst Deepspace = new Person(&#39;Deepspace&#39;, 22);Deepspace.run(); // Animal run fast!Deepspace.say(); // hello!console.log(Deepspace.name);  // Deepspaceconsole.log(Deepspace.age);  // 22</code></pre><p>我们首先创造了一个名为 <code>Animal</code> 的构造函数，并给他的原型加了一个 <code>run()</code> 的方法。</p><p>接着我们创建了一个名为 <code>Person</code> 的构造函数，然后，我们将 <code>Person</code> 的原型指向了 <code>Animal</code> 的实例：</p><pre><code>Person.prototype = new Animal()</code></pre><p>这个的用处是，我们想把 <code>Animal</code> 原型上定义的方法继承下来，你也可以采用下面的办法：</p><pre><code>Person.prototype = Animal.prototype</code></pre><p>但是<strong>不建议</strong>这么写，<strong>因为这样会让 <code>Person</code> 和 <code>Animal</code> 共用了一个原型对象</strong>，那么之后我们对 <code>Person.prototype</code> 的修改也会相应的修改到 <code>Animal.prototype</code>，这是我们不希望的。</p><p>然后我们把 <code>Person.prototype.constructor</code> 指回了 <code>Person</code> 构造函数：</p><pre><code>Person.prototype.constructor = Person</code></pre><p>这是因为我们执行 <code>Person.prototype = new Animal()</code> 的时候，<code>Person.prototype.constructor</code> 会被改成 <code>Animal</code>，那么之后的 <code>Deepspace</code> 的构造函数就变成 <code>Animal</code> ，这是不对的，于是我们做了修正。</p><p>然后我们就可以愉快的给 <code>Person</code> 添加其他的方法了，比如我加了一个 <code>say</code>。那么实例出 <code>Deepspace</code> 我们可以看到，<code>Deepspace</code> 同时继承了 <code>Animal</code> 的 <code>run</code> 和 <code>Person</code> 的 <code>say</code> 方法，实现了原型继承。</p><h3 id="三-ES6-的语法糖"><a href="#三-ES6-的语法糖" class="headerlink" title="三.ES6 的语法糖"></a>三.ES6 的语法糖</h3><p>可以看到，使用原生来写原型继承实在是太麻烦了，于是 ES6 添加了一个语法糖—— <code>class</code>，新的 <code>class</code>写法只是让对象原型的写法更加清晰、更像“面向对象”编程的语法而已。</p><p>我们把上面的例子改写成 ES6 <code>class</code> 的形式：</p><pre><code>// Animal 类class Animal {    // 定义构造函数    constructor () {}    // 定义 run 方法    run () {        console.log(&#39;Animal run fast!&#39;)    }}// Person 类 继承于 Animalclass Person extends Animal {    // 重写 Animal 的构造函数    constructor (name, age) {        super();        this.name = name;        this.age = age    }    // 添加 say 方法    say () {        console.log(&#39;hello!&#39;)    }}const Deepspace = new Person(&#39;Deepspace&#39;, 22);Deepspace.run(); // Animal run fast!Deepspace.say(); // hello!console.log(Deepspace.name);  // Deepspaceconsole.log(Deepspace.age);  // 22</code></pre><p>有一点要注意，在继承的时候，构造函数内要记得使用 <code>super</code> 来调用父类的构造函数，否则新建实例时会报错。这是因为子类没有自己的 <code>this</code> 对象，而是继承父类的 <code>this</code> 对象，然后对其进行加工。如果不调用 <code>super</code> 方法，子类就得不到 <code>this</code> 对象。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 面向对象(一)</title>
      <link href="/js-oo-1/"/>
      <url>/js-oo-1/</url>
      
        <content type="html"><![CDATA[<!-- ## JS 面向对象(一) --><h3 id="一、什么是面向对象编程？"><a href="#一、什么是面向对象编程？" class="headerlink" title="一、什么是面向对象编程？"></a>一、什么是面向对象编程？</h3><p>维基百科上是这样说的</p><blockquote><p>Object-oriented programming (OOP) is a programming paradigm based on the concept of “objects”, which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.</p></blockquote><p>翻译一下：面向对象编程是一套基于“对象”这个概念的编程方法论。一个对象中会包含数据，通常叫“属性”，也会包含一些函数，通常叫方法。</p><h4 id="1-class-和-object"><a href="#1-class-和-object" class="headerlink" title="1.class 和 object"></a>1.class 和 object</h4><p>object 就是对象的英文，class 中文翻译为”类”，这两个概念是面向对象编程的最重要的概念。对象是类的实例化，例如人是一个类，人有名字这个属性，但是没有具体值。 把人这个类实例化成一个具体的人，给这个人具体赋值，这个具体的人，就是一个对象，对象中就有了实际的数据值了。</p><a id="more"></a><h4 id="2-为何要面向对象编程？"><a href="#2-为何要面向对象编程？" class="headerlink" title="2.为何要面向对象编程？"></a>2.为何要面向对象编程？</h4><p>面向过程其实最为实际的一种思考方式，因为我们总是一贯一步一步的解决问题。可以说面向过程是一种基础的方法，它考虑的是实际的实现。 所以面向过程编程其实是更对新手直观的，但是面向对象编程因为对数据和方法进行了封装，造成类是有极强的可复用性的，所以在大型项目中面向对象 几乎是标配了。</p><p>还是有一个有意思的小点要提一下，面向对象编程跟最直观的面向过程的编程有很大的区别。当然任何的编程都要考虑两个要素，一个是数据，另外一个是方法。面向对象先考虑 的是数据，后考虑方法，而面向过程编程是相反的。</p><h3 id="二、使用-Babel-编译-ES6"><a href="#二、使用-Babel-编译-ES6" class="headerlink" title="二、使用 Babel 编译 ES6"></a>二、使用 Babel 编译 ES6</h3><p>并不是所有的浏览器都支持 ES6（ES2015）的各种新语法。如果我们要把用 ES6 写的代码运行到产品环境下，还是要把 ES6 语法编译成 ES5 （也就是老语法）以获得 最佳的浏览器支持的。目前，工程实践中最常用的做法是用 Babel 来完成这个编译工作。具体怎么做呢？</p><h4 id="1-初始化一个项目"><a href="#1-初始化一个项目" class="headerlink" title="1.初始化一个项目"></a>1.初始化一个项目</h4><p>我们新建一个文件夹，就叫作 <code>oo-js-demo</code> 吧，执行：</p><pre><code>$ npm init -y</code></pre><h4 id="2-新建一个-html-文件"><a href="#2-新建一个-html-文件" class="headerlink" title="2.新建一个 html 文件"></a>2.新建一个 html 文件</h4><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;o-o-js&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;script src=&quot;build/main.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>我们要在 <code>src</code> 文件夹中新建 <code>main.js</code> , 简单写入 ES6 的一些新语法，然后使用 Babel 将其编译成 ES5 的语法，编译后的文件放在 <code>build</code> 文件夹下的 <code>main.js</code> , 这样在 html 中引入的 js 文件就可以在不支持 ES6 语法的浏览器中运行了。</p><h4 id="3-src-main-js"><a href="#3-src-main-js" class="headerlink" title="3.src/main.js"></a>3.src/main.js</h4><pre><code>class Person {  constructor(name) {    this.name = name  }}var Deepspace = new Person(&#39;Deepspace&#39;)console.log(Deepspace.name)</code></pre><h4 id="4-使用-Babel"><a href="#4-使用-Babel" class="headerlink" title="4.使用 Babel"></a>4.使用 Babel</h4><p>安装</p><pre><code>$ npm install --save-dev babel-cli$ npm install babel-preset-env --save-dev</code></pre><p>在根目录下创建一个 <code>.babelrc</code> 文件，写入以下内容：</p><pre><code>{  &quot;presets&quot;: [&quot;env&quot;]}</code></pre><p>然后在 <code>package.json</code> 中将 Babel 的命令写入进去：</p><pre><code>{  &quot;name&quot;: &quot;oo-js-demo&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: {    &quot;build&quot;: &quot;babel src -d build&quot;  },  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;devDependencies&quot;: {    &quot;babel-cli&quot;: &quot;^6.26.0&quot;,    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;  }}</code></pre><p>最后，执行：</p><pre><code>$ npm run build</code></pre><p>这样，就会在根目录创建 <code>build</code> 文件夹，并将编译好的 ES5 语法写入 <code>build/main.js</code> 中。</p><h3 id="三、Class-核心知识"><a href="#三、Class-核心知识" class="headerlink" title="三、Class 核心知识"></a>三、Class 核心知识</h3><h4 id="1-写一个-Class"><a href="#1-写一个-Class" class="headerlink" title="1.写一个 Class"></a>1.写一个 Class</h4><p>我们先用 ES5 的语法写个类</p><pre><code>function Person(name) {  this.name = name;}Person.prototype.changeName = function(newName) {  this.name = newName;};</code></pre><p>ES6 语法：</p><pre><code>class Person {  constructor(name) {    this.name = name;  }  changeName(newName) {    this.name = newName;  }}</code></pre><p>使用的时候都是一样的，都用 new 关键字</p><pre><code>var Deepspace = new Person(&#39;Deepspace&#39;);console.log(Deepspace.name);Deepspace.changeName(&#39;Deepspace&#39;);console.log(Deepspace.name);</code></pre><h4 id="2-理解-this-的指向"><a href="#2-理解-this-的指向" class="headerlink" title="2.理解 this 的指向"></a>2.理解 this 的指向</h4><blockquote><p>在面向对象编程条件下，类的方法内部如果含有 this，它默认指向类的实例。</p></blockquote><pre><code>class Person {  constructor(name) {    this.name = name;    console.log(this);  }  changeName(newName) {    this.name = newName;  }  sayName(){    console.log(this.name);  }}let deepspace = new Person(&#39;deepspace&#39;);let togoblog = new Person(&#39;togoblog&#39;);deepspace.changeName(&#39;cxin&#39;);deepspace.sayName();</code></pre><p>打印出来的结果是：</p><pre><code>Person { name: &#39;deepspace&#39; }Person { name: &#39;togoblog&#39; }cxin</code></pre><p>我们也可以使用“对象字面量”的形式来定义对象 :</p><pre><code>let Person = {  name: &#39;Peter&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }}Person.talk();</code></pre><h4 id="3-bind"><a href="#3-bind" class="headerlink" title="3.bind"></a>3.bind</h4><p>this 在不同的执行上下文中指向不同的对象，这样往往会造成 undefined 错误，bind 要解决的就是明确函数在执行的时候 this 的指向。</p><p>理解 bind 和 this 是使用 JS 对象的必备基础。我们看下面的例子：</p><pre><code>let Person = {  name: &#39;Deepspace&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }};Person.talk();let plzTalk = Person.talk;plzTalk();</code></pre><p>执行的结果会是这样的：</p><pre><code>My name is DeepspaceMy name is undefined</code></pre><p>为什么呢？其实 <code>let plzTalk = Person.talk;</code> 可以写成这样：</p><pre><code>let plzTalk = function() {  console.log(`My name is ${this.name}`);}</code></pre><p>那 <code>this.name</code> 自然就是 undefined 的了。</p><p><strong>使用 bind 之后</strong> :</p><pre><code>let Person = {  name: &#39;Deepspace&#39;,  talk: function() {    console.log(`My name is ${this.name}`);  }};Person.talk();let plzTalk = Person.talk;plzTalk.bind(Person)();</code></pre><p>也可以写成下面这样：</p><pre><code>let Person = {  name: &#39;Deepspace&#39;}let plzTalk = function() {    console.log(`My name is ${this.name}`);};plzTalk.bind(Person)();</code></pre><p>所以总结一下： bind 的作用就是把一个对象（作为 bind 的参数传入），绑定到这个函数中的 this 之上。</p><h4 id="4-bind-的例子"><a href="#4-bind-的例子" class="headerlink" title="4.bind 的例子"></a>4.bind 的例子</h4><p>再举一个 bind/this 的小例子，加深一下理解。</p><p>看下面这个例子：</p><pre><code>function talk() {  console.log(this.sound);}let Person = {  sound: &#39;Hi there!&#39;,  speak: talk};Person.speak();</code></pre><p>执行后的结果：</p><pre><code>Hi there!</code></pre><p>是可以正确输出 sound 的值的。其实是把 talk 这个函数拷贝到了 Person 对象中的 speak 中的 talk，这时候 this 就是指向 Person 这个对象，所以可以正确输出！</p><p>所以，这样做也是可以的：</p><pre><code>function talk() {  console.log(this.sound);}let Person = {  sound: &#39;Hi there!&#39;,};talk.bind(Person)();</code></pre><h4 id="5-静态方法"><a href="#5-静态方法" class="headerlink" title="5.静态方法"></a>5.静态方法</h4><p>我们在调用 class 里面的方法的时候，需要先将类实例化成对象，然后调用对象中的方法，这是很不方便的。</p><p>静态方法（ static method ）可以让我们不用实例化 class ，直接呼叫，很适合用来组织很多小功能到一个 Class 之上。</p><p>我们先看下面的错误示范：</p><pre><code>class Person {  constructor() {  }  sayHello() {    console.log(&quot;Hello&quot;);  }}Person.sayHello();</code></pre><p>会报错：</p><pre><code>TypeError: Person.sayHello is not a function</code></pre><p>我们只需要在方法前加上 <code>static</code> 关键字即可</p><pre><code>class Person {  constructor() {  }  static sayHello() {    console.log(&quot;Hello&quot;);  }}Person.sayHello();</code></pre><p>运行一下，会正确打印出 <code>Hello</code> , OK !</p><h3 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h3><h4 id="1-父类和子类"><a href="#1-父类和子类" class="headerlink" title="1.父类和子类"></a>1.父类和子类</h4><p>面向对象编程中所谓”继承”，指的就是子类会继承父类的属性和方法。ES6 语法中，继承通过 extends 关键字来实现。</p><p><strong>通过下面的代码来演示这几个效果：</strong></p><ul><li>子类中可以使用父类中的属性</li><li>子类中可以调用父类中的方法</li><li>子类中可以扩展自己的属性和方法</li></ul><pre><code>class Father {  constructor() {    this.gender = &#39;male&#39;;  }  getFamilyName() {    console.log(`The family name is Zhang`);  }}class Son extends Father {  constructor() {    super();    this.height = 160;  }  getSchoolName() {    console.log(&#39;NO.2 Middle School&#39;);  }}let tom = new Son;console.log(tom.gender);console.log(tom.height);tom.getFamilyName();tom.getSchoolName();</code></pre><h4 id="2-super-调用父类方法"><a href="#2-super-调用父类方法" class="headerlink" title="2.super 调用父类方法"></a>2.super 调用父类方法</h4><p>使用类继承的过程中，理解 super() 的作用是非常必要的。</p><p><strong>super 是什么？</strong></p><p>可以这样简单的认为： super 代表父类。主要有两个用途：</p><ul><li>使用 super() 呼叫父类的 constructor()</li><li>使用 <code>super.functionName()</code> 调用父类中的 static 方法</li></ul><p><strong>super() 的作用</strong></p><p>子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。</p><p>ES6 的继承机制，实质是先创造父类的实例对象 this（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。</p><pre><code>class Father {  constructor(familyName){    this.familyName = familyName;  }  getFamilyName(){    return `The family name is ${this.familyName}`;  }  static sayHello() {    console.log(&#39;hello&#39;);  }}class Son extends Father {  constructor(familyName, height) {    super(familyName);    this.height = height; // 没有上一行的 super() ，这里的 this 就不让用  }  getSchool(){    return &#39;NO.2 Middle School!&#39;;  }  static hello() {    super.sayHello(); // 调用父类的静态方法  }}let tom = new Son(&#39;Chen&#39;, 180);console.log(tom.height);console.log(tom.getFamilyName());console.log(Son.hello());</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github 搭建博客教程</title>
      <link href="/create-blog-site-with-hexo/"/>
      <url>/create-blog-site-with-hexo/</url>
      
        <content type="html"><![CDATA[<!-- ## Hexo+Github 搭建博客教程 --><blockquote><p> github 有一个非常强大的功能 —— <strong>GitHub Page</strong></p></blockquote><p>GitHub Pages 有以下几个优点：</p><ul><li>轻量级的博客系统，没有麻烦的配置</li><li>免费空间，享受 Git 版本管理功能</li><li>使用标记语言，比如 Markdown</li><li>无需自己搭建服务器</li><li>可以绑定自己的域名</li></ul><p>当然他也有缺点：</p><ul><li>搭配模板系统，相当于静态页发布，每运行生成一次都必须遍历全部的文本文件，网站越大，生成时间越长</li><li>动态程序的部分相当局限，比如没有评论，不过有解决方案</li><li>基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台</li></ul><p>要想搭建漂亮的 blog，还需要模板系统，官方推荐的是 jekyll，但是配置稍复杂，我们使用另一个选择 —— <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>，一个简单地、轻量地、基于 Node 的一个静态博客框架。</p><p>下面介绍下如何使用 hexo + github pages 搭建个人博客 。<br><a id="more"></a></p><h3 id="一-安装GIt"><a href="#一-安装GIt" class="headerlink" title="一. 安装GIt"></a>一. 安装GIt</h3><h4 id="1-for-windows"><a href="#1-for-windows" class="headerlink" title="1. for windows :"></a>1. for windows :</h4><p><a href="https://github.com/git-for-windows/git/releases/tag/v2.14.1.windows.1" target="_blank" rel="noopener">https://github.com/git-for-windows/git/releases/tag/v2.14.1.windows.1</a></p><h4 id="2-for-linux"><a href="#2-for-linux" class="headerlink" title="2. for linux :"></a>2. for linux :</h4><pre class=" language-shell"><code class="language-shell">$ sudo apt-get update$ sudo apt-get install git  </code></pre><p>安装下载完成后，可以使用下面的命令行，确认<code>git</code>的版本：</p><pre class=" language-shell"><code class="language-shell">$ git --version</code></pre><h3 id="二-安装node"><a href="#二-安装node" class="headerlink" title="二.安装node"></a>二.安装node</h3><h4 id="1-for-windows-1"><a href="#1-for-windows-1" class="headerlink" title="1. for windows"></a>1. for windows</h4><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><h4 id="2-for-linux-1"><a href="#2-for-linux-1" class="headerlink" title="2. for linux"></a>2. for linux</h4><p>1 . 先装一个 nvm (  <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a> )</p><pre class=" language-shell"><code class="language-shell">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.2/install.sh | bash</code></pre><p>nvm 的全称是 <strong>Node Version Manager</strong>，之所以需要这个工具，是因为 Node.js 的各种特性都没有稳定下来，所以我们经常由于老项目或尝新的原因，需要切换各种版本。</p><p>安装完成后，你的 shell 里面应该就有个 nvm 命令了，调用它试试 , 有输出 ,  则 nvm 安装成功</p><pre class=" language-shell"><code class="language-shell">$ nvm</code></pre><ol start="2"><li>使用 nvm 的命令安装 Node.js 最新版</li></ol><pre class=" language-shell"><code class="language-shell">$ nvm install node</code></pre><p>查看安装效果</p><pre><code>nvm use node</code></pre><p>显示 :</p><pre class=" language-shell"><code class="language-shell">Now using node v6.11.0 (npm v3.10.10)</code></pre><h3 id="三-安装-hexo"><a href="#三-安装-hexo" class="headerlink" title="三. 安装 hexo"></a>三. 安装 hexo</h3><pre class=" language-shell"><code class="language-shell">$ npm install hexo-cli -g</code></pre><h3 id="四-初始化-hexo-博客项目"><a href="#四-初始化-hexo-博客项目" class="headerlink" title="四. 初始化 hexo 博客项目"></a>四. 初始化 hexo 博客项目</h3><p>1.新建一个文件夹 ( 我是在桌面创建的 HEXO )</p><p>2.在Hexo文件下，右键运行Git Bash，输入命令：</p><pre class=" language-shell"><code class="language-shell">$ hexo init</code></pre><p>会生成如下图所示的文件结构 :</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Hexo/hexo-folder.png" alt="xhexo-folder"></p><p>下面对文件目录做个简单介绍 :</p><p><strong>1. _config.yml</strong></p><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数, 这个文件下面会做较为详细的介绍 。</p><p><strong>2. scaffolds</strong></p><p><code>scaffolds</code> 是“ 脚手架、骨架 ”的意思，当你新建一篇文章（<code>hexo new  &#39;title&#39;</code>）的时候，<code>hexo</code>是根据这个目录下的文件进行构建的 。</p><p><strong>3. package.json</strong></p><p><code>hexo</code> 框架的参数和所依赖插件，如下：</p><pre class=" language-shell"><code class="language-shell">{  "name": "hexo-site",  "version": "0.0.0",  "private": true,  "hexo": {    "version": ""  },  "dependencies": {    "hexo": "^3.2.0",    "hexo-generator-archive": "^0.1.4",    "hexo-generator-category": "^0.1.3",    "hexo-generator-index": "^0.2.0",    "hexo-generator-tag": "^0.2.0",    "hexo-renderer-ejs": "^0.3.0",    "hexo-renderer-stylus": "^0.3.1",    "hexo-renderer-marked": "^0.3.0",    "hexo-server": "^0.2.0"  }}</code></pre><p>如果后期我们想安装一些插件, 也会写入 <code>package.json</code> 当中 .</p><p><strong>4. source</strong></p><p>这个目录很重要，新建的文章都是在保存在这个目录下的.</p><ul><li><p><code>_posts</code> 。需要新建的博文都放在 <code>_posts</code> 目录下。</p></li><li><p><code>_posts</code> 目录下是一个个 <code>markdown</code> 文件。你应该可以看到一个 <code>hello-world.md</code> 的文件，文章就在这个文件中编辑 。</p></li><li><p><code>_posts</code> 目录下的<code>md</code>文件，会被编译成 <code>html</code> 文件，放到 <code>public</code> （此文件现在应该没有，因为你还没有编译过）文件夹下。</p></li></ul><p><strong>5. themes</strong></p><p>网站主题目录，hexo有非常好的主题拓展，支持的主题也很丰富。该目录下，每一个子目录就是一个主题</p><p><strong>6. 我们打开 <code>theme</code> 文件夹下的主题文件夹, 会发现也有一个 <code>_config.yml</code> 文件</strong></p><p><code>_config.yml</code> 文件中的内容，是主题的一个配置信息</p><p><code>_config.yml</code> 采用YAML语法格式，具体配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="五-本地浏览博客"><a href="#五-本地浏览博客" class="headerlink" title="五.本地浏览博客"></a>五.本地浏览博客</h3><p>分别输入下面两条命令 :</p><pre><code>$ hexo g$ hexo s</code></pre><p>在浏览器中输入 : <code>http://localhost:4000/</code></p><p>会看到 :</p><p><img src="https://raw.githubusercontent.com/IDeepspace/ImageHosting/master/Hexo/hexo-init-theme.png" alt="hexo-init-theme"></p><h3 id="六-部署到-Github-上"><a href="#六-部署到-Github-上" class="headerlink" title="六.部署到 Github 上"></a>六.部署到 <code>Github</code> 上</h3><ol><li><p>申请Github账号 ( 别忘了邮箱验证 )</p></li><li><p>新建一个 <code>Repository</code>  , 注意仓库的名字前缀必须和自己 <code>github</code> 的用户名保持严格一致，如 <code>IDeepspace.github.io</code></p></li><li><p>在 <code>_config.yml</code> 进行配置</p></li></ol><pre class=" language-shell"><code class="language-shell"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:    github: https://github.com/IDeepspace/IDeepspace.github.io.git  branch: master</code></pre><p>在 <code>deploy</code> 中配置自己的仓库信息 ( 注意冒号后面有空格 )</p><ol start="4"><li>安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>自动部署发布工具</li></ol><pre class=" language-shell"><code class="language-shell">$  npm install hexo-deployer-git -–save</code></pre><ol start="5"><li>发布到Github</li></ol><p>输入如下命令 :</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>然后输入自己的 <code>Github</code> 用户名和密码即可</p><ol start="6"><li>在浏览器中输入  <a href="https://IDeepspace.github.io/" target="_blank" rel="noopener">https://IDeepspace.github.io/</a> 便可以打开自己的博客啦 !</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客－性能优化之静态文件压缩</title>
      <link href="/hexo-performance-optimization/"/>
      <url>/hexo-performance-optimization/</url>
      
        <content type="html"><![CDATA[<!-- ## Hexo博客－性能优化之静态文件压缩 --><h3 id="使用Gulp优化Hexo"><a href="#使用Gulp优化Hexo" class="headerlink" title="使用Gulp优化Hexo"></a>使用Gulp优化Hexo</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><pre class=" language-shell"><code class="language-shell">$ npm install gulp gulp-uglify gulp-clean-css gulp-htmlmin gulp-htmlclean gulp-imagemin gulp-concat --save-dev</code></pre><p>如果安装的依赖和已经存在的依赖有冲突 , 可在 <code>package.json</code> 中添加以下开发依赖 :</p><pre class=" language-shell"><code class="language-shell">"devDependencies": {    "gulp": "^3.9.1",    "gulp-concat": "^2.6.1",    "gulp-htmlclean": "^2.7.15",    "gulp-htmlmin": "^3.0.0",    "gulp-imagemin": "^3.3.0",    "gulp-clean-css": "^2.3.2",    "gulp-uglify": "^3.0.0"}</code></pre><a id="more"></a><h4 id="2-创建-gulpfile-js"><a href="#2-创建-gulpfile-js" class="headerlink" title="2.创建 gulpfile.js"></a>2.创建 gulpfile.js</h4><p>在 <code>hexo blog</code> 的根目录文件夹下创建 <code>gulpfile.js</code> :</p><p>写入以下内容 :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-uglify'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  cssmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-clean-css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlmin'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-htmlclean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concat <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp-concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JS压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'uglify'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/js/**/.js'</span><span class="token punctuation">,</span> <span class="token string">'!./public/js/**/*min.js'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src(['./public</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js<span class="token string">','</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>zuoxi<span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js<span class="token string">',,'</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span>radio<span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>js'<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对应修改为./public即可</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public-fancybox-js压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fancybox:js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/jquery.fancybox.js'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 合并 JS</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'jsall'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    gulp      <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.js'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 压缩后重命名</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'app.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//public-fancybox-css压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fancybox:css'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/jquery.fancybox.css'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/vendors/fancybox/source/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//CSS压缩</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'cssmin'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./public/css/main.css'</span><span class="token punctuation">,</span> <span class="token string">'!./public/css/*min.css'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cssmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/css/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>图片压缩gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-img-aggressive'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/medias/**/*.*'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>imagemin<span class="token punctuation">.</span><span class="token function">gifsicle</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'optimizationLevel'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">jpegtran</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'progressive'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">optipng</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'optimizationLevel'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        imagemin<span class="token punctuation">.</span><span class="token function">svgo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'verbose'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public/medias'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public 目录 html文件 public</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">*</span><span class="token punctuation">.</span>hmtl 表示<span class="token keyword">public</span>下所有文件夹中html，包括当前目录gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'minify-html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./public/**/*.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>      <span class="token function">htmlmin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'build'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'uglify'</span><span class="token punctuation">,</span>  <span class="token string">'jsall'</span><span class="token punctuation">,</span>  <span class="token string">'cssmin'</span><span class="token punctuation">,</span>  <span class="token string">'minify-img-aggressive'</span><span class="token punctuation">,</span>  <span class="token string">'fancybox:js'</span><span class="token punctuation">,</span>  <span class="token string">'fancybox:css'</span><span class="token punctuation">,</span>  <span class="token string">'minify-html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-执行优化命令"><a href="#2-执行优化命令" class="headerlink" title="2.执行优化命令"></a>2.执行优化命令</h4><pre class=" language-shell"><code class="language-shell">$ hexo clean$ hexo g$ gulp build$ hexo d</code></pre><p>连续执行4个命令太麻烦， 可以直接在根目录下的 <code>package.json</code> 文件中生成写入 <code>scripts</code> :</p><pre class=" language-shell"><code class="language-shell">"scripts": {  "build": "hexo clean && hexo g && gulp build && hexo deploy"  }</code></pre><p>然后执行命令 :</p><pre class=" language-shell"><code class="language-shell">$ npm run build</code></pre><p>以前都是使用 <code>hexo clean</code>  ,  <code>hexo g</code>  , <code>hexo d</code> 来自动更新博文，虽然命令不长，还是不如上面一条命令来的直接 !</p><p>至此，可以得到一个 <code>html</code> 、<code>css</code> 、<code>js</code> 、<code>image</code> 都更优化的 <code>/public</code>文件夹，我用评测工具测试了一下博客打开速度, 确实快了不少 !</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自动备份Hexo博客源文件</title>
      <link href="/hexo-backup/"/>
      <url>/hexo-backup/</url>
      
        <content type="html"><![CDATA[<!-- ## 如何自动备份Hexo博客源文件 --><h3 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h3><blockquote><p>电脑装了双系统，前些天重装了系统，没有备份 <code>Hexo</code> 博客源文件，只能重新去安装一堆依赖和修改配置了。。。搜了一下网络教程解决了备份的问题，所以此博客记录自动备份<code>Hexo</code>博客源文件到<code>Github</code>的过程。</p></blockquote><p>原文出自：<a href="http://notes.xiamo.tk/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html" target="_blank" rel="noopener">自动备份Hexo博客源文件</a></p><h3 id="二-原理"><a href="#二-原理" class="headerlink" title="二.原理"></a>二.原理</h3><p>通过通过监听<code>Hexo</code> 的其它事件来完成自动执行Git命令完成自动备份。查阅<a href="https://hexo.io/zh-cn/api/events.html#deployBefore" target="_blank" rel="noopener">Hexo文档</a>，找到了<code>Hexo</code> 的主要事件，见下表：</p><table><thead><tr><th>事件名</th><th>事件发生时间</th></tr></thead><tbody><tr><td>deployBefore</td><td>在部署完成前发布</td></tr><tr><td>deployAfter</td><td>在部署成功后发布</td></tr><tr><td>exit</td><td>在 Hexo 结束前发布</td></tr><tr><td>generateBefore</td><td>在静态文件生成前发布</td></tr><tr><td>generateAfter</td><td>在静态文件生成后发布</td></tr><tr><td>new</td><td>在文章文件建立后发布</td></tr></tbody></table><p>于是我们就可以通过监听 <code>Hexo</code> 的 <code>deployAfter</code> 事件，待上传完成之后自动运行 <code>Git</code> 备份命令，从而达到自动备份的目的。<br><a id="more"></a></p><h3 id="三-实现"><a href="#三-实现" class="headerlink" title="三.实现"></a>三.实现</h3><h4 id="1-将Hexo目录加入Git仓库"><a href="#1-将Hexo目录加入Git仓库" class="headerlink" title="1.将Hexo目录加入Git仓库"></a>1.将<code>Hexo</code>目录加入Git仓库</h4><p>在<code>Github</code>下创建一个新的 <code>repository</code>，取名为<code>HEXO</code>。进入本地的<code>Hexo</code>文件夹，执行以下命令创建仓库:</p><pre class=" language-shell"><code class="language-shell">$ git init</code></pre><p>设置远程仓库地址，并更新:</p><pre class=" language-shell"><code class="language-shell">$ git remote add origin git@github.com:XXX/XXX.git$ git pull origin master</code></pre><p>修改 <code>.gitignore</code>文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快 <code>push</code>速度。</p><p>执行命令以下命令，完成 <code>Hexo</code>源码在本地的提交:</p><pre class=" language-shell"><code class="language-shell">$ git add .$ git commit -m "添加hexo源码文件作为备份"</code></pre><p>执行以下命令，将本地的仓库文件推送到 Github</p><pre class=" language-shell"><code class="language-shell">$ git push origin master</code></pre><h4 id="2-安装shelljs模块"><a href="#2-安装shelljs模块" class="headerlink" title="2.安装shelljs模块"></a>2.安装shelljs模块</h4><p>要实现这个自动备份功能，需要依赖 <code>Node.js</code>的一个 <code>shelljs</code> 模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。该模块需要安装后使用。</p><p>在命令中键入以下命令，完成shelljs模块的安装：</p><pre class=" language-shell"><code class="language-shell">$ npm install --save shelljs</code></pre><h4 id="3-编写自动备份脚本"><a href="#3-编写自动备份脚本" class="headerlink" title="3.编写自动备份脚本"></a>3.编写自动备份脚本</h4><p>待到模块安装完成，在Hexo根目录的scripts文件夹下新建一个js文件，文件名随意取。</p><blockquote><p>ps: 如果没有scripts目录，请新建一个。</p></blockquote><p>然后在脚本中，写入以下内容：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'shelljs/global'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    hexo<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'deployAfter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//当deploy完成后执行备份</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"产生了一个错误&lt;(￣3￣)> !，错误详情为："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">which</span><span class="token punctuation">(</span><span class="token string">'git'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Sorry, this script requires git'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"======================Auto Backup Begin==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cd</span><span class="token punctuation">(</span><span class="token string">'D:/hexo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处修改为Hexo根目录路径</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git add --all'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git add failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git commit -am "Form auto backup script\'s commit"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git commit failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'git push origin master'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">'Error: Git push failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">echo</span><span class="token punctuation">(</span><span class="token string">"==================Auto Backup Complete============================"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，需要修改第17行的 <code>D:\hexo</code> 路径为 <code>Hexo</code> 的根目录路径。（脚本中的路径为博主的 <code>Hexo</code> 路径）</p><p>如果你的 <code>Git</code> 远程仓库名称不为 <code>origin</code> 的话，还需要修改第28行执行的 <code>push</code> 命令，修改成自己的远程仓库名和相应的分支名。</p><p>保存脚本并退出，然后执行 <code>hexo deploy</code> 命令，将会得到类似以下结果:</p><pre class=" language-shell"><code class="language-shell">INFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...[master ca549c6] Site updated: 2017-12-19 13:34:01 61 files changed, 75 insertions(+), 75 deletions(-) rewrite archives/2016/page/2/index.html (64%) rewrite archives/2017/page/4/index.html (68%) rewrite archives/page/4/index.html (68%) rewrite archives/page/8/index.html (64%) rewrite page/4/index.html (78%) rewrite page/8/index.html (74%)Branch 'master' set up to track remote branch 'master' from 'https://github.com/IDeepspace/IDeepspace.github.io.git'.To https://github.com/IDeepspace/IDeepspace.github.io.git   c9c91a4..ca549c6  HEAD -> masterOn branch masternothing to commit, working tree cleanBranch 'master' set up to track remote branch 'master' from 'https://git.coding.net/IDeepspace/IDeepspace.coding.me.git'.To https://git.coding.net/IDeepspace/IDeepspace.coding.me.git   c9c91a4..ca549c6  HEAD -> masterINFO  Deploy done: git======================Auto Backup Begin===========================cd: no such file or directory: E:HEXO[master 5244810] Form auto backup script's commit 1 file changed, 6 insertions(+), 6 deletions(-) rename scripts/{index.js.bak => index.js} (70%)To https://github.com/IDeepspace/HEXO-BLOG.git   e6b6921..5244810  master -> master==================Auto Backup Complete============================</code></pre><p>这样子，每次更新博文并 <code>deploy</code> 到服务器上之后，备份就自动启动并完成备份啦 !</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
